
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model ConfiguracionConsultorio
 * 
 */
export type ConfiguracionConsultorio = $Result.DefaultSelection<Prisma.$ConfiguracionConsultorioPayload>
/**
 * Model Consultorio
 * 
 */
export type Consultorio = $Result.DefaultSelection<Prisma.$ConsultorioPayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model AgendaDoctor
 * 
 */
export type AgendaDoctor = $Result.DefaultSelection<Prisma.$AgendaDoctorPayload>
/**
 * Model TipoTurnoDoctor
 * 
 */
export type TipoTurnoDoctor = $Result.DefaultSelection<Prisma.$TipoTurnoDoctorPayload>
/**
 * Model Paciente
 * 
 */
export type Paciente = $Result.DefaultSelection<Prisma.$PacientePayload>
/**
 * Model Turno
 * 
 */
export type Turno = $Result.DefaultSelection<Prisma.$TurnoPayload>
/**
 * Model EmailToken
 * 
 */
export type EmailToken = $Result.DefaultSelection<Prisma.$EmailTokenPayload>
/**
 * Model CoberturaMedica
 * 
 */
export type CoberturaMedica = $Result.DefaultSelection<Prisma.$CoberturaMedicaPayload>
/**
 * Model CuentasWhatsapp
 * 
 */
export type CuentasWhatsapp = $Result.DefaultSelection<Prisma.$CuentasWhatsappPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.configuracionConsultorio`: Exposes CRUD operations for the **ConfiguracionConsultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConfiguracionConsultorios
    * const configuracionConsultorios = await prisma.configuracionConsultorio.findMany()
    * ```
    */
  get configuracionConsultorio(): Prisma.ConfiguracionConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consultorio`: Exposes CRUD operations for the **Consultorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consultorios
    * const consultorios = await prisma.consultorio.findMany()
    * ```
    */
  get consultorio(): Prisma.ConsultorioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.agendaDoctor`: Exposes CRUD operations for the **AgendaDoctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AgendaDoctors
    * const agendaDoctors = await prisma.agendaDoctor.findMany()
    * ```
    */
  get agendaDoctor(): Prisma.AgendaDoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tipoTurnoDoctor`: Exposes CRUD operations for the **TipoTurnoDoctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TipoTurnoDoctors
    * const tipoTurnoDoctors = await prisma.tipoTurnoDoctor.findMany()
    * ```
    */
  get tipoTurnoDoctor(): Prisma.TipoTurnoDoctorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paciente`: Exposes CRUD operations for the **Paciente** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pacientes
    * const pacientes = await prisma.paciente.findMany()
    * ```
    */
  get paciente(): Prisma.PacienteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.turno`: Exposes CRUD operations for the **Turno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turnos
    * const turnos = await prisma.turno.findMany()
    * ```
    */
  get turno(): Prisma.TurnoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailToken`: Exposes CRUD operations for the **EmailToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailTokens
    * const emailTokens = await prisma.emailToken.findMany()
    * ```
    */
  get emailToken(): Prisma.EmailTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coberturaMedica`: Exposes CRUD operations for the **CoberturaMedica** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoberturaMedicas
    * const coberturaMedicas = await prisma.coberturaMedica.findMany()
    * ```
    */
  get coberturaMedica(): Prisma.CoberturaMedicaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cuentasWhatsapp`: Exposes CRUD operations for the **CuentasWhatsapp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CuentasWhatsapps
    * const cuentasWhatsapps = await prisma.cuentasWhatsapp.findMany()
    * ```
    */
  get cuentasWhatsapp(): Prisma.CuentasWhatsappDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    ConfiguracionConsultorio: 'ConfiguracionConsultorio',
    Consultorio: 'Consultorio',
    Doctor: 'Doctor',
    AgendaDoctor: 'AgendaDoctor',
    TipoTurnoDoctor: 'TipoTurnoDoctor',
    Paciente: 'Paciente',
    Turno: 'Turno',
    EmailToken: 'EmailToken',
    CoberturaMedica: 'CoberturaMedica',
    CuentasWhatsapp: 'CuentasWhatsapp'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "account" | "session" | "user" | "verificationToken" | "configuracionConsultorio" | "consultorio" | "doctor" | "agendaDoctor" | "tipoTurnoDoctor" | "paciente" | "turno" | "emailToken" | "coberturaMedica" | "cuentasWhatsapp"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      ConfiguracionConsultorio: {
        payload: Prisma.$ConfiguracionConsultorioPayload<ExtArgs>
        fields: Prisma.ConfiguracionConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConfiguracionConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConfiguracionConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          findFirst: {
            args: Prisma.ConfiguracionConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConfiguracionConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          findMany: {
            args: Prisma.ConfiguracionConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>[]
          }
          create: {
            args: Prisma.ConfiguracionConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          createMany: {
            args: Prisma.ConfiguracionConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConfiguracionConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>[]
          }
          delete: {
            args: Prisma.ConfiguracionConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          update: {
            args: Prisma.ConfiguracionConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.ConfiguracionConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConfiguracionConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConfiguracionConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.ConfiguracionConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConfiguracionConsultorioPayload>
          }
          aggregate: {
            args: Prisma.ConfiguracionConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConfiguracionConsultorio>
          }
          groupBy: {
            args: Prisma.ConfiguracionConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConfiguracionConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConfiguracionConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<ConfiguracionConsultorioCountAggregateOutputType> | number
          }
        }
      }
      Consultorio: {
        payload: Prisma.$ConsultorioPayload<ExtArgs>
        fields: Prisma.ConsultorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findFirst: {
            args: Prisma.ConsultorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          findMany: {
            args: Prisma.ConsultorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          create: {
            args: Prisma.ConsultorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          createMany: {
            args: Prisma.ConsultorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsultorioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          delete: {
            args: Prisma.ConsultorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          update: {
            args: Prisma.ConsultorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          deleteMany: {
            args: Prisma.ConsultorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsultorioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>[]
          }
          upsert: {
            args: Prisma.ConsultorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsultorioPayload>
          }
          aggregate: {
            args: Prisma.ConsultorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsultorio>
          }
          groupBy: {
            args: Prisma.ConsultorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultorioCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultorioCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      AgendaDoctor: {
        payload: Prisma.$AgendaDoctorPayload<ExtArgs>
        fields: Prisma.AgendaDoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgendaDoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgendaDoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          findFirst: {
            args: Prisma.AgendaDoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgendaDoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          findMany: {
            args: Prisma.AgendaDoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>[]
          }
          create: {
            args: Prisma.AgendaDoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          createMany: {
            args: Prisma.AgendaDoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AgendaDoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>[]
          }
          delete: {
            args: Prisma.AgendaDoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          update: {
            args: Prisma.AgendaDoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          deleteMany: {
            args: Prisma.AgendaDoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AgendaDoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AgendaDoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>[]
          }
          upsert: {
            args: Prisma.AgendaDoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AgendaDoctorPayload>
          }
          aggregate: {
            args: Prisma.AgendaDoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAgendaDoctor>
          }
          groupBy: {
            args: Prisma.AgendaDoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AgendaDoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgendaDoctorCountArgs<ExtArgs>
            result: $Utils.Optional<AgendaDoctorCountAggregateOutputType> | number
          }
        }
      }
      TipoTurnoDoctor: {
        payload: Prisma.$TipoTurnoDoctorPayload<ExtArgs>
        fields: Prisma.TipoTurnoDoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TipoTurnoDoctorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TipoTurnoDoctorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          findFirst: {
            args: Prisma.TipoTurnoDoctorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TipoTurnoDoctorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          findMany: {
            args: Prisma.TipoTurnoDoctorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>[]
          }
          create: {
            args: Prisma.TipoTurnoDoctorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          createMany: {
            args: Prisma.TipoTurnoDoctorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TipoTurnoDoctorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>[]
          }
          delete: {
            args: Prisma.TipoTurnoDoctorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          update: {
            args: Prisma.TipoTurnoDoctorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          deleteMany: {
            args: Prisma.TipoTurnoDoctorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TipoTurnoDoctorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TipoTurnoDoctorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>[]
          }
          upsert: {
            args: Prisma.TipoTurnoDoctorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TipoTurnoDoctorPayload>
          }
          aggregate: {
            args: Prisma.TipoTurnoDoctorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTipoTurnoDoctor>
          }
          groupBy: {
            args: Prisma.TipoTurnoDoctorGroupByArgs<ExtArgs>
            result: $Utils.Optional<TipoTurnoDoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.TipoTurnoDoctorCountArgs<ExtArgs>
            result: $Utils.Optional<TipoTurnoDoctorCountAggregateOutputType> | number
          }
        }
      }
      Paciente: {
        payload: Prisma.$PacientePayload<ExtArgs>
        fields: Prisma.PacienteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PacienteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PacienteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findFirst: {
            args: Prisma.PacienteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PacienteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          findMany: {
            args: Prisma.PacienteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          create: {
            args: Prisma.PacienteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          createMany: {
            args: Prisma.PacienteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PacienteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          delete: {
            args: Prisma.PacienteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          update: {
            args: Prisma.PacienteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          deleteMany: {
            args: Prisma.PacienteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PacienteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PacienteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>[]
          }
          upsert: {
            args: Prisma.PacienteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PacientePayload>
          }
          aggregate: {
            args: Prisma.PacienteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaciente>
          }
          groupBy: {
            args: Prisma.PacienteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PacienteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PacienteCountArgs<ExtArgs>
            result: $Utils.Optional<PacienteCountAggregateOutputType> | number
          }
        }
      }
      Turno: {
        payload: Prisma.$TurnoPayload<ExtArgs>
        fields: Prisma.TurnoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurnoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurnoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          findFirst: {
            args: Prisma.TurnoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurnoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          findMany: {
            args: Prisma.TurnoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>[]
          }
          create: {
            args: Prisma.TurnoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          createMany: {
            args: Prisma.TurnoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurnoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>[]
          }
          delete: {
            args: Prisma.TurnoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          update: {
            args: Prisma.TurnoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          deleteMany: {
            args: Prisma.TurnoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurnoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TurnoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>[]
          }
          upsert: {
            args: Prisma.TurnoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          aggregate: {
            args: Prisma.TurnoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurno>
          }
          groupBy: {
            args: Prisma.TurnoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurnoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurnoCountArgs<ExtArgs>
            result: $Utils.Optional<TurnoCountAggregateOutputType> | number
          }
        }
      }
      EmailToken: {
        payload: Prisma.$EmailTokenPayload<ExtArgs>
        fields: Prisma.EmailTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          findFirst: {
            args: Prisma.EmailTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          findMany: {
            args: Prisma.EmailTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>[]
          }
          create: {
            args: Prisma.EmailTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          createMany: {
            args: Prisma.EmailTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>[]
          }
          delete: {
            args: Prisma.EmailTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          update: {
            args: Prisma.EmailTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          deleteMany: {
            args: Prisma.EmailTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>[]
          }
          upsert: {
            args: Prisma.EmailTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailTokenPayload>
          }
          aggregate: {
            args: Prisma.EmailTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailToken>
          }
          groupBy: {
            args: Prisma.EmailTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailTokenCountArgs<ExtArgs>
            result: $Utils.Optional<EmailTokenCountAggregateOutputType> | number
          }
        }
      }
      CoberturaMedica: {
        payload: Prisma.$CoberturaMedicaPayload<ExtArgs>
        fields: Prisma.CoberturaMedicaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoberturaMedicaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoberturaMedicaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          findFirst: {
            args: Prisma.CoberturaMedicaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoberturaMedicaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          findMany: {
            args: Prisma.CoberturaMedicaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>[]
          }
          create: {
            args: Prisma.CoberturaMedicaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          createMany: {
            args: Prisma.CoberturaMedicaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoberturaMedicaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>[]
          }
          delete: {
            args: Prisma.CoberturaMedicaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          update: {
            args: Prisma.CoberturaMedicaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          deleteMany: {
            args: Prisma.CoberturaMedicaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoberturaMedicaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoberturaMedicaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>[]
          }
          upsert: {
            args: Prisma.CoberturaMedicaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoberturaMedicaPayload>
          }
          aggregate: {
            args: Prisma.CoberturaMedicaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoberturaMedica>
          }
          groupBy: {
            args: Prisma.CoberturaMedicaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoberturaMedicaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoberturaMedicaCountArgs<ExtArgs>
            result: $Utils.Optional<CoberturaMedicaCountAggregateOutputType> | number
          }
        }
      }
      CuentasWhatsapp: {
        payload: Prisma.$CuentasWhatsappPayload<ExtArgs>
        fields: Prisma.CuentasWhatsappFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CuentasWhatsappFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CuentasWhatsappFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          findFirst: {
            args: Prisma.CuentasWhatsappFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CuentasWhatsappFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          findMany: {
            args: Prisma.CuentasWhatsappFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>[]
          }
          create: {
            args: Prisma.CuentasWhatsappCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          createMany: {
            args: Prisma.CuentasWhatsappCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CuentasWhatsappCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>[]
          }
          delete: {
            args: Prisma.CuentasWhatsappDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          update: {
            args: Prisma.CuentasWhatsappUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          deleteMany: {
            args: Prisma.CuentasWhatsappDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CuentasWhatsappUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CuentasWhatsappUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>[]
          }
          upsert: {
            args: Prisma.CuentasWhatsappUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CuentasWhatsappPayload>
          }
          aggregate: {
            args: Prisma.CuentasWhatsappAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCuentasWhatsapp>
          }
          groupBy: {
            args: Prisma.CuentasWhatsappGroupByArgs<ExtArgs>
            result: $Utils.Optional<CuentasWhatsappGroupByOutputType>[]
          }
          count: {
            args: Prisma.CuentasWhatsappCountArgs<ExtArgs>
            result: $Utils.Optional<CuentasWhatsappCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    account?: AccountOmit
    session?: SessionOmit
    user?: UserOmit
    verificationToken?: VerificationTokenOmit
    configuracionConsultorio?: ConfiguracionConsultorioOmit
    consultorio?: ConsultorioOmit
    doctor?: DoctorOmit
    agendaDoctor?: AgendaDoctorOmit
    tipoTurnoDoctor?: TipoTurnoDoctorOmit
    paciente?: PacienteOmit
    turno?: TurnoOmit
    emailToken?: EmailTokenOmit
    coberturaMedica?: CoberturaMedicaOmit
    cuentasWhatsapp?: CuentasWhatsappOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    pacientesCreados: number
    pacientesEditados: number
    turnosCreados: number
    turnosEditados: number
    doctores: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    pacientesCreados?: boolean | UserCountOutputTypeCountPacientesCreadosArgs
    pacientesEditados?: boolean | UserCountOutputTypeCountPacientesEditadosArgs
    turnosCreados?: boolean | UserCountOutputTypeCountTurnosCreadosArgs
    turnosEditados?: boolean | UserCountOutputTypeCountTurnosEditadosArgs
    doctores?: boolean | UserCountOutputTypeCountDoctoresArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPacientesCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPacientesEditadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTurnosCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTurnosEditadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDoctoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }


  /**
   * Count Type ConsultorioCountOutputType
   */

  export type ConsultorioCountOutputType = {
    turnos: number
    agendaDoctor: number
    tiposTurno: number
  }

  export type ConsultorioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turnos?: boolean | ConsultorioCountOutputTypeCountTurnosArgs
    agendaDoctor?: boolean | ConsultorioCountOutputTypeCountAgendaDoctorArgs
    tiposTurno?: boolean | ConsultorioCountOutputTypeCountTiposTurnoArgs
  }

  // Custom InputTypes
  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultorioCountOutputType
     */
    select?: ConsultorioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountTurnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountAgendaDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaDoctorWhereInput
  }

  /**
   * ConsultorioCountOutputType without action
   */
  export type ConsultorioCountOutputTypeCountTiposTurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoTurnoDoctorWhereInput
  }


  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    AgendaDoctor: number
    TipoTurnoDoctor: number
    Turno: number
    usuarios: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AgendaDoctor?: boolean | DoctorCountOutputTypeCountAgendaDoctorArgs
    TipoTurnoDoctor?: boolean | DoctorCountOutputTypeCountTipoTurnoDoctorArgs
    Turno?: boolean | DoctorCountOutputTypeCountTurnoArgs
    usuarios?: boolean | DoctorCountOutputTypeCountUsuariosArgs
  }

  // Custom InputTypes
  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountAgendaDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaDoctorWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountTipoTurnoDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoTurnoDoctorWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountTurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountUsuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type TipoTurnoDoctorCountOutputType
   */

  export type TipoTurnoDoctorCountOutputType = {
    consultorios: number
    turnos: number
  }

  export type TipoTurnoDoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorios?: boolean | TipoTurnoDoctorCountOutputTypeCountConsultoriosArgs
    turnos?: boolean | TipoTurnoDoctorCountOutputTypeCountTurnosArgs
  }

  // Custom InputTypes
  /**
   * TipoTurnoDoctorCountOutputType without action
   */
  export type TipoTurnoDoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctorCountOutputType
     */
    select?: TipoTurnoDoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TipoTurnoDoctorCountOutputType without action
   */
  export type TipoTurnoDoctorCountOutputTypeCountConsultoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
  }

  /**
   * TipoTurnoDoctorCountOutputType without action
   */
  export type TipoTurnoDoctorCountOutputTypeCountTurnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }


  /**
   * Count Type PacienteCountOutputType
   */

  export type PacienteCountOutputType = {
    turnos: number
  }

  export type PacienteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turnos?: boolean | PacienteCountOutputTypeCountTurnosArgs
  }

  // Custom InputTypes
  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PacienteCountOutputType
     */
    select?: PacienteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PacienteCountOutputType without action
   */
  export type PacienteCountOutputTypeCountTurnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }


  /**
   * Count Type CoberturaMedicaCountOutputType
   */

  export type CoberturaMedicaCountOutputType = {
    pacientes: number
    turnos: number
  }

  export type CoberturaMedicaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pacientes?: boolean | CoberturaMedicaCountOutputTypeCountPacientesArgs
    turnos?: boolean | CoberturaMedicaCountOutputTypeCountTurnosArgs
  }

  // Custom InputTypes
  /**
   * CoberturaMedicaCountOutputType without action
   */
  export type CoberturaMedicaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedicaCountOutputType
     */
    select?: CoberturaMedicaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoberturaMedicaCountOutputType without action
   */
  export type CoberturaMedicaCountOutputTypeCountPacientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
  }

  /**
   * CoberturaMedicaCountOutputType without action
   */
  export type CoberturaMedicaCountOutputTypeCountTurnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    perfil: number | null
  }

  export type UserSumAggregateOutputType = {
    perfil: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    enabled: boolean | null
    token: string | null
    tokenExpires: Date | null
    perfil: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    enabled: boolean | null
    token: string | null
    tokenExpires: Date | null
    perfil: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    enabled: number
    token: number
    tokenExpires: number
    perfil: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    perfil?: true
  }

  export type UserSumAggregateInputType = {
    perfil?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    enabled?: true
    token?: true
    tokenExpires?: true
    perfil?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    enabled?: true
    token?: true
    tokenExpires?: true
    perfil?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    enabled?: true
    token?: true
    tokenExpires?: true
    perfil?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    enabled: boolean
    token: string | null
    tokenExpires: Date | null
    perfil: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    enabled?: boolean
    token?: boolean
    tokenExpires?: boolean
    perfil?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    pacientesCreados?: boolean | User$pacientesCreadosArgs<ExtArgs>
    pacientesEditados?: boolean | User$pacientesEditadosArgs<ExtArgs>
    turnosCreados?: boolean | User$turnosCreadosArgs<ExtArgs>
    turnosEditados?: boolean | User$turnosEditadosArgs<ExtArgs>
    doctores?: boolean | User$doctoresArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    enabled?: boolean
    token?: boolean
    tokenExpires?: boolean
    perfil?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    enabled?: boolean
    token?: boolean
    tokenExpires?: boolean
    perfil?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    enabled?: boolean
    token?: boolean
    tokenExpires?: boolean
    perfil?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "enabled" | "token" | "tokenExpires" | "perfil", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    pacientesCreados?: boolean | User$pacientesCreadosArgs<ExtArgs>
    pacientesEditados?: boolean | User$pacientesEditadosArgs<ExtArgs>
    turnosCreados?: boolean | User$turnosCreadosArgs<ExtArgs>
    turnosEditados?: boolean | User$turnosEditadosArgs<ExtArgs>
    doctores?: boolean | User$doctoresArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      pacientesCreados: Prisma.$PacientePayload<ExtArgs>[]
      pacientesEditados: Prisma.$PacientePayload<ExtArgs>[]
      turnosCreados: Prisma.$TurnoPayload<ExtArgs>[]
      turnosEditados: Prisma.$TurnoPayload<ExtArgs>[]
      doctores: Prisma.$DoctorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      password: string | null
      enabled: boolean
      token: string | null
      tokenExpires: Date | null
      perfil: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pacientesCreados<T extends User$pacientesCreadosArgs<ExtArgs> = {}>(args?: Subset<T, User$pacientesCreadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pacientesEditados<T extends User$pacientesEditadosArgs<ExtArgs> = {}>(args?: Subset<T, User$pacientesEditadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    turnosCreados<T extends User$turnosCreadosArgs<ExtArgs> = {}>(args?: Subset<T, User$turnosCreadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    turnosEditados<T extends User$turnosEditadosArgs<ExtArgs> = {}>(args?: Subset<T, User$turnosEditadosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    doctores<T extends User$doctoresArgs<ExtArgs> = {}>(args?: Subset<T, User$doctoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly enabled: FieldRef<"User", 'Boolean'>
    readonly token: FieldRef<"User", 'String'>
    readonly tokenExpires: FieldRef<"User", 'DateTime'>
    readonly perfil: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.pacientesCreados
   */
  export type User$pacientesCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    cursor?: PacienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * User.pacientesEditados
   */
  export type User$pacientesEditadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    cursor?: PacienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * User.turnosCreados
   */
  export type User$turnosCreadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * User.turnosEditados
   */
  export type User$turnosEditadosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * User.doctores
   */
  export type User$doctoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model ConfiguracionConsultorio
   */

  export type AggregateConfiguracionConsultorio = {
    _count: ConfiguracionConsultorioCountAggregateOutputType | null
    _min: ConfiguracionConsultorioMinAggregateOutputType | null
    _max: ConfiguracionConsultorioMaxAggregateOutputType | null
  }

  export type ConfiguracionConsultorioMinAggregateOutputType = {
    id: string | null
    nombreConsultorio: string | null
    domicilio: string | null
    telefono: string | null
    mail: string | null
    horarioAtencion: string | null
    web: string | null
    coberturas: string | null
    limite: Date | null
    envio: boolean | null
    horaEnvio: string | null
    diasEnvio: string | null
    envioMail: boolean | null
    horaEnvioMail: string | null
    diasEnvioMail: string | null
    urlApp: string | null
    urlAppDev: string | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConfiguracionConsultorioMaxAggregateOutputType = {
    id: string | null
    nombreConsultorio: string | null
    domicilio: string | null
    telefono: string | null
    mail: string | null
    horarioAtencion: string | null
    web: string | null
    coberturas: string | null
    limite: Date | null
    envio: boolean | null
    horaEnvio: string | null
    diasEnvio: string | null
    envioMail: boolean | null
    horaEnvioMail: string | null
    diasEnvioMail: string | null
    urlApp: string | null
    urlAppDev: string | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConfiguracionConsultorioCountAggregateOutputType = {
    id: number
    nombreConsultorio: number
    domicilio: number
    telefono: number
    mail: number
    horarioAtencion: number
    web: number
    coberturas: number
    limite: number
    feriados: number
    envio: number
    horaEnvio: number
    diasEnvio: number
    envioMail: number
    horaEnvioMail: number
    diasEnvioMail: number
    urlApp: number
    urlAppDev: number
    logoUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConfiguracionConsultorioMinAggregateInputType = {
    id?: true
    nombreConsultorio?: true
    domicilio?: true
    telefono?: true
    mail?: true
    horarioAtencion?: true
    web?: true
    coberturas?: true
    limite?: true
    envio?: true
    horaEnvio?: true
    diasEnvio?: true
    envioMail?: true
    horaEnvioMail?: true
    diasEnvioMail?: true
    urlApp?: true
    urlAppDev?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConfiguracionConsultorioMaxAggregateInputType = {
    id?: true
    nombreConsultorio?: true
    domicilio?: true
    telefono?: true
    mail?: true
    horarioAtencion?: true
    web?: true
    coberturas?: true
    limite?: true
    envio?: true
    horaEnvio?: true
    diasEnvio?: true
    envioMail?: true
    horaEnvioMail?: true
    diasEnvioMail?: true
    urlApp?: true
    urlAppDev?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConfiguracionConsultorioCountAggregateInputType = {
    id?: true
    nombreConsultorio?: true
    domicilio?: true
    telefono?: true
    mail?: true
    horarioAtencion?: true
    web?: true
    coberturas?: true
    limite?: true
    feriados?: true
    envio?: true
    horaEnvio?: true
    diasEnvio?: true
    envioMail?: true
    horaEnvioMail?: true
    diasEnvioMail?: true
    urlApp?: true
    urlAppDev?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConfiguracionConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConfiguracionConsultorio to aggregate.
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracionConsultorios to fetch.
     */
    orderBy?: ConfiguracionConsultorioOrderByWithRelationInput | ConfiguracionConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConfiguracionConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracionConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracionConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConfiguracionConsultorios
    **/
    _count?: true | ConfiguracionConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfiguracionConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfiguracionConsultorioMaxAggregateInputType
  }

  export type GetConfiguracionConsultorioAggregateType<T extends ConfiguracionConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregateConfiguracionConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfiguracionConsultorio[P]>
      : GetScalarType<T[P], AggregateConfiguracionConsultorio[P]>
  }




  export type ConfiguracionConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConfiguracionConsultorioWhereInput
    orderBy?: ConfiguracionConsultorioOrderByWithAggregationInput | ConfiguracionConsultorioOrderByWithAggregationInput[]
    by: ConfiguracionConsultorioScalarFieldEnum[] | ConfiguracionConsultorioScalarFieldEnum
    having?: ConfiguracionConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfiguracionConsultorioCountAggregateInputType | true
    _min?: ConfiguracionConsultorioMinAggregateInputType
    _max?: ConfiguracionConsultorioMaxAggregateInputType
  }

  export type ConfiguracionConsultorioGroupByOutputType = {
    id: string
    nombreConsultorio: string
    domicilio: string
    telefono: string
    mail: string
    horarioAtencion: string
    web: string | null
    coberturas: string
    limite: Date
    feriados: string[]
    envio: boolean
    horaEnvio: string | null
    diasEnvio: string | null
    envioMail: boolean
    horaEnvioMail: string | null
    diasEnvioMail: string | null
    urlApp: string
    urlAppDev: string | null
    logoUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConfiguracionConsultorioCountAggregateOutputType | null
    _min: ConfiguracionConsultorioMinAggregateOutputType | null
    _max: ConfiguracionConsultorioMaxAggregateOutputType | null
  }

  type GetConfiguracionConsultorioGroupByPayload<T extends ConfiguracionConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConfiguracionConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfiguracionConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfiguracionConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], ConfiguracionConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type ConfiguracionConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreConsultorio?: boolean
    domicilio?: boolean
    telefono?: boolean
    mail?: boolean
    horarioAtencion?: boolean
    web?: boolean
    coberturas?: boolean
    limite?: boolean
    feriados?: boolean
    envio?: boolean
    horaEnvio?: boolean
    diasEnvio?: boolean
    envioMail?: boolean
    horaEnvioMail?: boolean
    diasEnvioMail?: boolean
    urlApp?: boolean
    urlAppDev?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["configuracionConsultorio"]>

  export type ConfiguracionConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreConsultorio?: boolean
    domicilio?: boolean
    telefono?: boolean
    mail?: boolean
    horarioAtencion?: boolean
    web?: boolean
    coberturas?: boolean
    limite?: boolean
    feriados?: boolean
    envio?: boolean
    horaEnvio?: boolean
    diasEnvio?: boolean
    envioMail?: boolean
    horaEnvioMail?: boolean
    diasEnvioMail?: boolean
    urlApp?: boolean
    urlAppDev?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["configuracionConsultorio"]>

  export type ConfiguracionConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombreConsultorio?: boolean
    domicilio?: boolean
    telefono?: boolean
    mail?: boolean
    horarioAtencion?: boolean
    web?: boolean
    coberturas?: boolean
    limite?: boolean
    feriados?: boolean
    envio?: boolean
    horaEnvio?: boolean
    diasEnvio?: boolean
    envioMail?: boolean
    horaEnvioMail?: boolean
    diasEnvioMail?: boolean
    urlApp?: boolean
    urlAppDev?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["configuracionConsultorio"]>

  export type ConfiguracionConsultorioSelectScalar = {
    id?: boolean
    nombreConsultorio?: boolean
    domicilio?: boolean
    telefono?: boolean
    mail?: boolean
    horarioAtencion?: boolean
    web?: boolean
    coberturas?: boolean
    limite?: boolean
    feriados?: boolean
    envio?: boolean
    horaEnvio?: boolean
    diasEnvio?: boolean
    envioMail?: boolean
    horaEnvioMail?: boolean
    diasEnvioMail?: boolean
    urlApp?: boolean
    urlAppDev?: boolean
    logoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConfiguracionConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombreConsultorio" | "domicilio" | "telefono" | "mail" | "horarioAtencion" | "web" | "coberturas" | "limite" | "feriados" | "envio" | "horaEnvio" | "diasEnvio" | "envioMail" | "horaEnvioMail" | "diasEnvioMail" | "urlApp" | "urlAppDev" | "logoUrl" | "createdAt" | "updatedAt", ExtArgs["result"]["configuracionConsultorio"]>

  export type $ConfiguracionConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConfiguracionConsultorio"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombreConsultorio: string
      domicilio: string
      telefono: string
      mail: string
      horarioAtencion: string
      web: string | null
      coberturas: string
      limite: Date
      feriados: string[]
      envio: boolean
      horaEnvio: string | null
      diasEnvio: string | null
      envioMail: boolean
      horaEnvioMail: string | null
      diasEnvioMail: string | null
      urlApp: string
      urlAppDev: string | null
      logoUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["configuracionConsultorio"]>
    composites: {}
  }

  type ConfiguracionConsultorioGetPayload<S extends boolean | null | undefined | ConfiguracionConsultorioDefaultArgs> = $Result.GetResult<Prisma.$ConfiguracionConsultorioPayload, S>

  type ConfiguracionConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConfiguracionConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConfiguracionConsultorioCountAggregateInputType | true
    }

  export interface ConfiguracionConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConfiguracionConsultorio'], meta: { name: 'ConfiguracionConsultorio' } }
    /**
     * Find zero or one ConfiguracionConsultorio that matches the filter.
     * @param {ConfiguracionConsultorioFindUniqueArgs} args - Arguments to find a ConfiguracionConsultorio
     * @example
     * // Get one ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConfiguracionConsultorioFindUniqueArgs>(args: SelectSubset<T, ConfiguracionConsultorioFindUniqueArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConfiguracionConsultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConfiguracionConsultorioFindUniqueOrThrowArgs} args - Arguments to find a ConfiguracionConsultorio
     * @example
     * // Get one ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConfiguracionConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, ConfiguracionConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConfiguracionConsultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioFindFirstArgs} args - Arguments to find a ConfiguracionConsultorio
     * @example
     * // Get one ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConfiguracionConsultorioFindFirstArgs>(args?: SelectSubset<T, ConfiguracionConsultorioFindFirstArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConfiguracionConsultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioFindFirstOrThrowArgs} args - Arguments to find a ConfiguracionConsultorio
     * @example
     * // Get one ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConfiguracionConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, ConfiguracionConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConfiguracionConsultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConfiguracionConsultorios
     * const configuracionConsultorios = await prisma.configuracionConsultorio.findMany()
     * 
     * // Get first 10 ConfiguracionConsultorios
     * const configuracionConsultorios = await prisma.configuracionConsultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configuracionConsultorioWithIdOnly = await prisma.configuracionConsultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConfiguracionConsultorioFindManyArgs>(args?: SelectSubset<T, ConfiguracionConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConfiguracionConsultorio.
     * @param {ConfiguracionConsultorioCreateArgs} args - Arguments to create a ConfiguracionConsultorio.
     * @example
     * // Create one ConfiguracionConsultorio
     * const ConfiguracionConsultorio = await prisma.configuracionConsultorio.create({
     *   data: {
     *     // ... data to create a ConfiguracionConsultorio
     *   }
     * })
     * 
     */
    create<T extends ConfiguracionConsultorioCreateArgs>(args: SelectSubset<T, ConfiguracionConsultorioCreateArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConfiguracionConsultorios.
     * @param {ConfiguracionConsultorioCreateManyArgs} args - Arguments to create many ConfiguracionConsultorios.
     * @example
     * // Create many ConfiguracionConsultorios
     * const configuracionConsultorio = await prisma.configuracionConsultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConfiguracionConsultorioCreateManyArgs>(args?: SelectSubset<T, ConfiguracionConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConfiguracionConsultorios and returns the data saved in the database.
     * @param {ConfiguracionConsultorioCreateManyAndReturnArgs} args - Arguments to create many ConfiguracionConsultorios.
     * @example
     * // Create many ConfiguracionConsultorios
     * const configuracionConsultorio = await prisma.configuracionConsultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConfiguracionConsultorios and only return the `id`
     * const configuracionConsultorioWithIdOnly = await prisma.configuracionConsultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConfiguracionConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, ConfiguracionConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConfiguracionConsultorio.
     * @param {ConfiguracionConsultorioDeleteArgs} args - Arguments to delete one ConfiguracionConsultorio.
     * @example
     * // Delete one ConfiguracionConsultorio
     * const ConfiguracionConsultorio = await prisma.configuracionConsultorio.delete({
     *   where: {
     *     // ... filter to delete one ConfiguracionConsultorio
     *   }
     * })
     * 
     */
    delete<T extends ConfiguracionConsultorioDeleteArgs>(args: SelectSubset<T, ConfiguracionConsultorioDeleteArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConfiguracionConsultorio.
     * @param {ConfiguracionConsultorioUpdateArgs} args - Arguments to update one ConfiguracionConsultorio.
     * @example
     * // Update one ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConfiguracionConsultorioUpdateArgs>(args: SelectSubset<T, ConfiguracionConsultorioUpdateArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConfiguracionConsultorios.
     * @param {ConfiguracionConsultorioDeleteManyArgs} args - Arguments to filter ConfiguracionConsultorios to delete.
     * @example
     * // Delete a few ConfiguracionConsultorios
     * const { count } = await prisma.configuracionConsultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConfiguracionConsultorioDeleteManyArgs>(args?: SelectSubset<T, ConfiguracionConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConfiguracionConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConfiguracionConsultorios
     * const configuracionConsultorio = await prisma.configuracionConsultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConfiguracionConsultorioUpdateManyArgs>(args: SelectSubset<T, ConfiguracionConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConfiguracionConsultorios and returns the data updated in the database.
     * @param {ConfiguracionConsultorioUpdateManyAndReturnArgs} args - Arguments to update many ConfiguracionConsultorios.
     * @example
     * // Update many ConfiguracionConsultorios
     * const configuracionConsultorio = await prisma.configuracionConsultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConfiguracionConsultorios and only return the `id`
     * const configuracionConsultorioWithIdOnly = await prisma.configuracionConsultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConfiguracionConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, ConfiguracionConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConfiguracionConsultorio.
     * @param {ConfiguracionConsultorioUpsertArgs} args - Arguments to update or create a ConfiguracionConsultorio.
     * @example
     * // Update or create a ConfiguracionConsultorio
     * const configuracionConsultorio = await prisma.configuracionConsultorio.upsert({
     *   create: {
     *     // ... data to create a ConfiguracionConsultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConfiguracionConsultorio we want to update
     *   }
     * })
     */
    upsert<T extends ConfiguracionConsultorioUpsertArgs>(args: SelectSubset<T, ConfiguracionConsultorioUpsertArgs<ExtArgs>>): Prisma__ConfiguracionConsultorioClient<$Result.GetResult<Prisma.$ConfiguracionConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConfiguracionConsultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioCountArgs} args - Arguments to filter ConfiguracionConsultorios to count.
     * @example
     * // Count the number of ConfiguracionConsultorios
     * const count = await prisma.configuracionConsultorio.count({
     *   where: {
     *     // ... the filter for the ConfiguracionConsultorios we want to count
     *   }
     * })
    **/
    count<T extends ConfiguracionConsultorioCountArgs>(
      args?: Subset<T, ConfiguracionConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfiguracionConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConfiguracionConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfiguracionConsultorioAggregateArgs>(args: Subset<T, ConfiguracionConsultorioAggregateArgs>): Prisma.PrismaPromise<GetConfiguracionConsultorioAggregateType<T>>

    /**
     * Group by ConfiguracionConsultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfiguracionConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConfiguracionConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConfiguracionConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: ConfiguracionConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConfiguracionConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfiguracionConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConfiguracionConsultorio model
   */
  readonly fields: ConfiguracionConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConfiguracionConsultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConfiguracionConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConfiguracionConsultorio model
   */
  interface ConfiguracionConsultorioFieldRefs {
    readonly id: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly nombreConsultorio: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly domicilio: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly telefono: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly mail: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly horarioAtencion: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly web: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly coberturas: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly limite: FieldRef<"ConfiguracionConsultorio", 'DateTime'>
    readonly feriados: FieldRef<"ConfiguracionConsultorio", 'String[]'>
    readonly envio: FieldRef<"ConfiguracionConsultorio", 'Boolean'>
    readonly horaEnvio: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly diasEnvio: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly envioMail: FieldRef<"ConfiguracionConsultorio", 'Boolean'>
    readonly horaEnvioMail: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly diasEnvioMail: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly urlApp: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly urlAppDev: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly logoUrl: FieldRef<"ConfiguracionConsultorio", 'String'>
    readonly createdAt: FieldRef<"ConfiguracionConsultorio", 'DateTime'>
    readonly updatedAt: FieldRef<"ConfiguracionConsultorio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConfiguracionConsultorio findUnique
   */
  export type ConfiguracionConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter, which ConfiguracionConsultorio to fetch.
     */
    where: ConfiguracionConsultorioWhereUniqueInput
  }

  /**
   * ConfiguracionConsultorio findUniqueOrThrow
   */
  export type ConfiguracionConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter, which ConfiguracionConsultorio to fetch.
     */
    where: ConfiguracionConsultorioWhereUniqueInput
  }

  /**
   * ConfiguracionConsultorio findFirst
   */
  export type ConfiguracionConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter, which ConfiguracionConsultorio to fetch.
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracionConsultorios to fetch.
     */
    orderBy?: ConfiguracionConsultorioOrderByWithRelationInput | ConfiguracionConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConfiguracionConsultorios.
     */
    cursor?: ConfiguracionConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracionConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracionConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConfiguracionConsultorios.
     */
    distinct?: ConfiguracionConsultorioScalarFieldEnum | ConfiguracionConsultorioScalarFieldEnum[]
  }

  /**
   * ConfiguracionConsultorio findFirstOrThrow
   */
  export type ConfiguracionConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter, which ConfiguracionConsultorio to fetch.
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracionConsultorios to fetch.
     */
    orderBy?: ConfiguracionConsultorioOrderByWithRelationInput | ConfiguracionConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConfiguracionConsultorios.
     */
    cursor?: ConfiguracionConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracionConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracionConsultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConfiguracionConsultorios.
     */
    distinct?: ConfiguracionConsultorioScalarFieldEnum | ConfiguracionConsultorioScalarFieldEnum[]
  }

  /**
   * ConfiguracionConsultorio findMany
   */
  export type ConfiguracionConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter, which ConfiguracionConsultorios to fetch.
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConfiguracionConsultorios to fetch.
     */
    orderBy?: ConfiguracionConsultorioOrderByWithRelationInput | ConfiguracionConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConfiguracionConsultorios.
     */
    cursor?: ConfiguracionConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConfiguracionConsultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConfiguracionConsultorios.
     */
    skip?: number
    distinct?: ConfiguracionConsultorioScalarFieldEnum | ConfiguracionConsultorioScalarFieldEnum[]
  }

  /**
   * ConfiguracionConsultorio create
   */
  export type ConfiguracionConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * The data needed to create a ConfiguracionConsultorio.
     */
    data: XOR<ConfiguracionConsultorioCreateInput, ConfiguracionConsultorioUncheckedCreateInput>
  }

  /**
   * ConfiguracionConsultorio createMany
   */
  export type ConfiguracionConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConfiguracionConsultorios.
     */
    data: ConfiguracionConsultorioCreateManyInput | ConfiguracionConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConfiguracionConsultorio createManyAndReturn
   */
  export type ConfiguracionConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many ConfiguracionConsultorios.
     */
    data: ConfiguracionConsultorioCreateManyInput | ConfiguracionConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConfiguracionConsultorio update
   */
  export type ConfiguracionConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * The data needed to update a ConfiguracionConsultorio.
     */
    data: XOR<ConfiguracionConsultorioUpdateInput, ConfiguracionConsultorioUncheckedUpdateInput>
    /**
     * Choose, which ConfiguracionConsultorio to update.
     */
    where: ConfiguracionConsultorioWhereUniqueInput
  }

  /**
   * ConfiguracionConsultorio updateMany
   */
  export type ConfiguracionConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConfiguracionConsultorios.
     */
    data: XOR<ConfiguracionConsultorioUpdateManyMutationInput, ConfiguracionConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which ConfiguracionConsultorios to update
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * Limit how many ConfiguracionConsultorios to update.
     */
    limit?: number
  }

  /**
   * ConfiguracionConsultorio updateManyAndReturn
   */
  export type ConfiguracionConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update ConfiguracionConsultorios.
     */
    data: XOR<ConfiguracionConsultorioUpdateManyMutationInput, ConfiguracionConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which ConfiguracionConsultorios to update
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * Limit how many ConfiguracionConsultorios to update.
     */
    limit?: number
  }

  /**
   * ConfiguracionConsultorio upsert
   */
  export type ConfiguracionConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * The filter to search for the ConfiguracionConsultorio to update in case it exists.
     */
    where: ConfiguracionConsultorioWhereUniqueInput
    /**
     * In case the ConfiguracionConsultorio found by the `where` argument doesn't exist, create a new ConfiguracionConsultorio with this data.
     */
    create: XOR<ConfiguracionConsultorioCreateInput, ConfiguracionConsultorioUncheckedCreateInput>
    /**
     * In case the ConfiguracionConsultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConfiguracionConsultorioUpdateInput, ConfiguracionConsultorioUncheckedUpdateInput>
  }

  /**
   * ConfiguracionConsultorio delete
   */
  export type ConfiguracionConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
    /**
     * Filter which ConfiguracionConsultorio to delete.
     */
    where: ConfiguracionConsultorioWhereUniqueInput
  }

  /**
   * ConfiguracionConsultorio deleteMany
   */
  export type ConfiguracionConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConfiguracionConsultorios to delete
     */
    where?: ConfiguracionConsultorioWhereInput
    /**
     * Limit how many ConfiguracionConsultorios to delete.
     */
    limit?: number
  }

  /**
   * ConfiguracionConsultorio without action
   */
  export type ConfiguracionConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConfiguracionConsultorio
     */
    select?: ConfiguracionConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConfiguracionConsultorio
     */
    omit?: ConfiguracionConsultorioOmit<ExtArgs> | null
  }


  /**
   * Model Consultorio
   */

  export type AggregateConsultorio = {
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  export type ConsultorioMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsultorioMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    direccion: string | null
    telefono: string | null
    email: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsultorioCountAggregateOutputType = {
    id: number
    nombre: number
    direccion: number
    telefono: number
    email: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsultorioMinAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    email?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsultorioMaxAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    email?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsultorioCountAggregateInputType = {
    id?: true
    nombre?: true
    direccion?: true
    telefono?: true
    email?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsultorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorio to aggregate.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consultorios
    **/
    _count?: true | ConsultorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultorioMaxAggregateInputType
  }

  export type GetConsultorioAggregateType<T extends ConsultorioAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultorio[P]>
      : GetScalarType<T[P], AggregateConsultorio[P]>
  }




  export type ConsultorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithAggregationInput | ConsultorioOrderByWithAggregationInput[]
    by: ConsultorioScalarFieldEnum[] | ConsultorioScalarFieldEnum
    having?: ConsultorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultorioCountAggregateInputType | true
    _min?: ConsultorioMinAggregateInputType
    _max?: ConsultorioMaxAggregateInputType
  }

  export type ConsultorioGroupByOutputType = {
    id: string
    nombre: string
    direccion: string | null
    telefono: string | null
    email: string | null
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: ConsultorioCountAggregateOutputType | null
    _min: ConsultorioMinAggregateOutputType | null
    _max: ConsultorioMaxAggregateOutputType | null
  }

  type GetConsultorioGroupByPayload<T extends ConsultorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultorioGroupByOutputType[P]>
        }
      >
    >


  export type ConsultorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    turnos?: boolean | Consultorio$turnosArgs<ExtArgs>
    agendaDoctor?: boolean | Consultorio$agendaDoctorArgs<ExtArgs>
    tiposTurno?: boolean | Consultorio$tiposTurnoArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["consultorio"]>

  export type ConsultorioSelectScalar = {
    id?: boolean
    nombre?: boolean
    direccion?: boolean
    telefono?: boolean
    email?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsultorioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "direccion" | "telefono" | "email" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["consultorio"]>
  export type ConsultorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turnos?: boolean | Consultorio$turnosArgs<ExtArgs>
    agendaDoctor?: boolean | Consultorio$agendaDoctorArgs<ExtArgs>
    tiposTurno?: boolean | Consultorio$tiposTurnoArgs<ExtArgs>
    _count?: boolean | ConsultorioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ConsultorioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ConsultorioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ConsultorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Consultorio"
    objects: {
      turnos: Prisma.$TurnoPayload<ExtArgs>[]
      agendaDoctor: Prisma.$AgendaDoctorPayload<ExtArgs>[]
      tiposTurno: Prisma.$TipoTurnoDoctorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      direccion: string | null
      telefono: string | null
      email: string | null
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consultorio"]>
    composites: {}
  }

  type ConsultorioGetPayload<S extends boolean | null | undefined | ConsultorioDefaultArgs> = $Result.GetResult<Prisma.$ConsultorioPayload, S>

  type ConsultorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsultorioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsultorioCountAggregateInputType | true
    }

  export interface ConsultorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Consultorio'], meta: { name: 'Consultorio' } }
    /**
     * Find zero or one Consultorio that matches the filter.
     * @param {ConsultorioFindUniqueArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsultorioFindUniqueArgs>(args: SelectSubset<T, ConsultorioFindUniqueArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consultorio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsultorioFindUniqueOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsultorioFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsultorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsultorioFindFirstArgs>(args?: SelectSubset<T, ConsultorioFindFirstArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consultorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindFirstOrThrowArgs} args - Arguments to find a Consultorio
     * @example
     * // Get one Consultorio
     * const consultorio = await prisma.consultorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsultorioFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsultorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consultorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consultorios
     * const consultorios = await prisma.consultorio.findMany()
     * 
     * // Get first 10 Consultorios
     * const consultorios = await prisma.consultorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsultorioFindManyArgs>(args?: SelectSubset<T, ConsultorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consultorio.
     * @param {ConsultorioCreateArgs} args - Arguments to create a Consultorio.
     * @example
     * // Create one Consultorio
     * const Consultorio = await prisma.consultorio.create({
     *   data: {
     *     // ... data to create a Consultorio
     *   }
     * })
     * 
     */
    create<T extends ConsultorioCreateArgs>(args: SelectSubset<T, ConsultorioCreateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consultorios.
     * @param {ConsultorioCreateManyArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsultorioCreateManyArgs>(args?: SelectSubset<T, ConsultorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Consultorios and returns the data saved in the database.
     * @param {ConsultorioCreateManyAndReturnArgs} args - Arguments to create many Consultorios.
     * @example
     * // Create many Consultorios
     * const consultorio = await prisma.consultorio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsultorioCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsultorioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Consultorio.
     * @param {ConsultorioDeleteArgs} args - Arguments to delete one Consultorio.
     * @example
     * // Delete one Consultorio
     * const Consultorio = await prisma.consultorio.delete({
     *   where: {
     *     // ... filter to delete one Consultorio
     *   }
     * })
     * 
     */
    delete<T extends ConsultorioDeleteArgs>(args: SelectSubset<T, ConsultorioDeleteArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consultorio.
     * @param {ConsultorioUpdateArgs} args - Arguments to update one Consultorio.
     * @example
     * // Update one Consultorio
     * const consultorio = await prisma.consultorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsultorioUpdateArgs>(args: SelectSubset<T, ConsultorioUpdateArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consultorios.
     * @param {ConsultorioDeleteManyArgs} args - Arguments to filter Consultorios to delete.
     * @example
     * // Delete a few Consultorios
     * const { count } = await prisma.consultorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsultorioDeleteManyArgs>(args?: SelectSubset<T, ConsultorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsultorioUpdateManyArgs>(args: SelectSubset<T, ConsultorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consultorios and returns the data updated in the database.
     * @param {ConsultorioUpdateManyAndReturnArgs} args - Arguments to update many Consultorios.
     * @example
     * // Update many Consultorios
     * const consultorio = await prisma.consultorio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Consultorios and only return the `id`
     * const consultorioWithIdOnly = await prisma.consultorio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsultorioUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsultorioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Consultorio.
     * @param {ConsultorioUpsertArgs} args - Arguments to update or create a Consultorio.
     * @example
     * // Update or create a Consultorio
     * const consultorio = await prisma.consultorio.upsert({
     *   create: {
     *     // ... data to create a Consultorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consultorio we want to update
     *   }
     * })
     */
    upsert<T extends ConsultorioUpsertArgs>(args: SelectSubset<T, ConsultorioUpsertArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consultorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioCountArgs} args - Arguments to filter Consultorios to count.
     * @example
     * // Count the number of Consultorios
     * const count = await prisma.consultorio.count({
     *   where: {
     *     // ... the filter for the Consultorios we want to count
     *   }
     * })
    **/
    count<T extends ConsultorioCountArgs>(
      args?: Subset<T, ConsultorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultorioAggregateArgs>(args: Subset<T, ConsultorioAggregateArgs>): Prisma.PrismaPromise<GetConsultorioAggregateType<T>>

    /**
     * Group by Consultorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultorioGroupByArgs['orderBy'] }
        : { orderBy?: ConsultorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Consultorio model
   */
  readonly fields: ConsultorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Consultorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    turnos<T extends Consultorio$turnosArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$turnosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    agendaDoctor<T extends Consultorio$agendaDoctorArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$agendaDoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tiposTurno<T extends Consultorio$tiposTurnoArgs<ExtArgs> = {}>(args?: Subset<T, Consultorio$tiposTurnoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Consultorio model
   */
  interface ConsultorioFieldRefs {
    readonly id: FieldRef<"Consultorio", 'String'>
    readonly nombre: FieldRef<"Consultorio", 'String'>
    readonly direccion: FieldRef<"Consultorio", 'String'>
    readonly telefono: FieldRef<"Consultorio", 'String'>
    readonly email: FieldRef<"Consultorio", 'String'>
    readonly color: FieldRef<"Consultorio", 'String'>
    readonly createdAt: FieldRef<"Consultorio", 'DateTime'>
    readonly updatedAt: FieldRef<"Consultorio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Consultorio findUnique
   */
  export type ConsultorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findUniqueOrThrow
   */
  export type ConsultorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio findFirst
   */
  export type ConsultorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findFirstOrThrow
   */
  export type ConsultorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorio to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Consultorios.
     */
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio findMany
   */
  export type ConsultorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter, which Consultorios to fetch.
     */
    where?: ConsultorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Consultorios to fetch.
     */
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consultorios.
     */
    cursor?: ConsultorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consultorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consultorios.
     */
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * Consultorio create
   */
  export type ConsultorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to create a Consultorio.
     */
    data: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
  }

  /**
   * Consultorio createMany
   */
  export type ConsultorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultorio createManyAndReturn
   */
  export type ConsultorioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to create many Consultorios.
     */
    data: ConsultorioCreateManyInput | ConsultorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Consultorio update
   */
  export type ConsultorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The data needed to update a Consultorio.
     */
    data: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
    /**
     * Choose, which Consultorio to update.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio updateMany
   */
  export type ConsultorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio updateManyAndReturn
   */
  export type ConsultorioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * The data used to update Consultorios.
     */
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyInput>
    /**
     * Filter which Consultorios to update
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to update.
     */
    limit?: number
  }

  /**
   * Consultorio upsert
   */
  export type ConsultorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * The filter to search for the Consultorio to update in case it exists.
     */
    where: ConsultorioWhereUniqueInput
    /**
     * In case the Consultorio found by the `where` argument doesn't exist, create a new Consultorio with this data.
     */
    create: XOR<ConsultorioCreateInput, ConsultorioUncheckedCreateInput>
    /**
     * In case the Consultorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultorioUpdateInput, ConsultorioUncheckedUpdateInput>
  }

  /**
   * Consultorio delete
   */
  export type ConsultorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    /**
     * Filter which Consultorio to delete.
     */
    where: ConsultorioWhereUniqueInput
  }

  /**
   * Consultorio deleteMany
   */
  export type ConsultorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Consultorios to delete
     */
    where?: ConsultorioWhereInput
    /**
     * Limit how many Consultorios to delete.
     */
    limit?: number
  }

  /**
   * Consultorio.turnos
   */
  export type Consultorio$turnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Consultorio.agendaDoctor
   */
  export type Consultorio$agendaDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    where?: AgendaDoctorWhereInput
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    cursor?: AgendaDoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendaDoctorScalarFieldEnum | AgendaDoctorScalarFieldEnum[]
  }

  /**
   * Consultorio.tiposTurno
   */
  export type Consultorio$tiposTurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    where?: TipoTurnoDoctorWhereInput
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    cursor?: TipoTurnoDoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TipoTurnoDoctorScalarFieldEnum | TipoTurnoDoctorScalarFieldEnum[]
  }

  /**
   * Consultorio without action
   */
  export type ConsultorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
  }


  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    emoji: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    emoji: string | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    nombre: number
    emoji: number
    feriados: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoctorMinAggregateInputType = {
    id?: true
    nombre?: true
    emoji?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    nombre?: true
    emoji?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    nombre?: true
    emoji?: true
    feriados?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    nombre: string
    emoji: string
    feriados: string[]
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    emoji?: boolean
    feriados?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    AgendaDoctor?: boolean | Doctor$AgendaDoctorArgs<ExtArgs>
    TipoTurnoDoctor?: boolean | Doctor$TipoTurnoDoctorArgs<ExtArgs>
    Turno?: boolean | Doctor$TurnoArgs<ExtArgs>
    usuarios?: boolean | Doctor$usuariosArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    emoji?: boolean
    feriados?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    emoji?: boolean
    feriados?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    nombre?: boolean
    emoji?: boolean
    feriados?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "emoji" | "feriados" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["doctor"]>
  export type DoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AgendaDoctor?: boolean | Doctor$AgendaDoctorArgs<ExtArgs>
    TipoTurnoDoctor?: boolean | Doctor$TipoTurnoDoctorArgs<ExtArgs>
    Turno?: boolean | Doctor$TurnoArgs<ExtArgs>
    usuarios?: boolean | Doctor$usuariosArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      AgendaDoctor: Prisma.$AgendaDoctorPayload<ExtArgs>[]
      TipoTurnoDoctor: Prisma.$TipoTurnoDoctorPayload<ExtArgs>[]
      Turno: Prisma.$TurnoPayload<ExtArgs>[]
      usuarios: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      emoji: string
      feriados: string[]
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoctorFindUniqueArgs>(args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoctorFindFirstArgs>(args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoctorFindManyArgs>(args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
     */
    create<T extends DoctorCreateArgs>(args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Doctors.
     * @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoctorCreateManyArgs>(args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {DoctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, DoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
     */
    delete<T extends DoctorDeleteArgs>(args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoctorUpdateArgs>(args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoctorDeleteManyArgs>(args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoctorUpdateManyArgs>(args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors and returns the data updated in the database.
     * @param {DoctorUpdateManyAndReturnArgs} args - Arguments to update many Doctors.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, DoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
     */
    upsert<T extends DoctorUpsertArgs>(args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AgendaDoctor<T extends Doctor$AgendaDoctorArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$AgendaDoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TipoTurnoDoctor<T extends Doctor$TipoTurnoDoctorArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$TipoTurnoDoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Turno<T extends Doctor$TurnoArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$TurnoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    usuarios<T extends Doctor$usuariosArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$usuariosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Doctor model
   */
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'String'>
    readonly nombre: FieldRef<"Doctor", 'String'>
    readonly emoji: FieldRef<"Doctor", 'String'>
    readonly feriados: FieldRef<"Doctor", 'String[]'>
    readonly color: FieldRef<"Doctor", 'String'>
    readonly createdAt: FieldRef<"Doctor", 'DateTime'>
    readonly updatedAt: FieldRef<"Doctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }

  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor createManyAndReturn
   */
  export type DoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
  }

  /**
   * Doctor updateManyAndReturn
   */
  export type DoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to update.
     */
    limit?: number
  }

  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }

  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
    /**
     * Limit how many Doctors to delete.
     */
    limit?: number
  }

  /**
   * Doctor.AgendaDoctor
   */
  export type Doctor$AgendaDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    where?: AgendaDoctorWhereInput
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    cursor?: AgendaDoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AgendaDoctorScalarFieldEnum | AgendaDoctorScalarFieldEnum[]
  }

  /**
   * Doctor.TipoTurnoDoctor
   */
  export type Doctor$TipoTurnoDoctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    where?: TipoTurnoDoctorWhereInput
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    cursor?: TipoTurnoDoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TipoTurnoDoctorScalarFieldEnum | TipoTurnoDoctorScalarFieldEnum[]
  }

  /**
   * Doctor.Turno
   */
  export type Doctor$TurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Doctor.usuarios
   */
  export type Doctor$usuariosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Doctor
     */
    omit?: DoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoctorInclude<ExtArgs> | null
  }


  /**
   * Model AgendaDoctor
   */

  export type AggregateAgendaDoctor = {
    _count: AgendaDoctorCountAggregateOutputType | null
    _avg: AgendaDoctorAvgAggregateOutputType | null
    _sum: AgendaDoctorSumAggregateOutputType | null
    _min: AgendaDoctorMinAggregateOutputType | null
    _max: AgendaDoctorMaxAggregateOutputType | null
  }

  export type AgendaDoctorAvgAggregateOutputType = {
    dia: number | null
  }

  export type AgendaDoctorSumAggregateOutputType = {
    dia: number | null
  }

  export type AgendaDoctorMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    consultorioId: string | null
    dia: number | null
    fecha: Date | null
    nombre: string | null
    atencion: boolean | null
    desde: string | null
    hasta: string | null
    corteDesde: string | null
    corteHasta: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgendaDoctorMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    consultorioId: string | null
    dia: number | null
    fecha: Date | null
    nombre: string | null
    atencion: boolean | null
    desde: string | null
    hasta: string | null
    corteDesde: string | null
    corteHasta: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AgendaDoctorCountAggregateOutputType = {
    id: number
    doctorId: number
    consultorioId: number
    dia: number
    fecha: number
    nombre: number
    atencion: number
    desde: number
    hasta: number
    corteDesde: number
    corteHasta: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AgendaDoctorAvgAggregateInputType = {
    dia?: true
  }

  export type AgendaDoctorSumAggregateInputType = {
    dia?: true
  }

  export type AgendaDoctorMinAggregateInputType = {
    id?: true
    doctorId?: true
    consultorioId?: true
    dia?: true
    fecha?: true
    nombre?: true
    atencion?: true
    desde?: true
    hasta?: true
    corteDesde?: true
    corteHasta?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgendaDoctorMaxAggregateInputType = {
    id?: true
    doctorId?: true
    consultorioId?: true
    dia?: true
    fecha?: true
    nombre?: true
    atencion?: true
    desde?: true
    hasta?: true
    corteDesde?: true
    corteHasta?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AgendaDoctorCountAggregateInputType = {
    id?: true
    doctorId?: true
    consultorioId?: true
    dia?: true
    fecha?: true
    nombre?: true
    atencion?: true
    desde?: true
    hasta?: true
    corteDesde?: true
    corteHasta?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AgendaDoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgendaDoctor to aggregate.
     */
    where?: AgendaDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendaDoctors to fetch.
     */
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgendaDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendaDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendaDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AgendaDoctors
    **/
    _count?: true | AgendaDoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgendaDoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgendaDoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgendaDoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgendaDoctorMaxAggregateInputType
  }

  export type GetAgendaDoctorAggregateType<T extends AgendaDoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateAgendaDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAgendaDoctor[P]>
      : GetScalarType<T[P], AggregateAgendaDoctor[P]>
  }




  export type AgendaDoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgendaDoctorWhereInput
    orderBy?: AgendaDoctorOrderByWithAggregationInput | AgendaDoctorOrderByWithAggregationInput[]
    by: AgendaDoctorScalarFieldEnum[] | AgendaDoctorScalarFieldEnum
    having?: AgendaDoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgendaDoctorCountAggregateInputType | true
    _avg?: AgendaDoctorAvgAggregateInputType
    _sum?: AgendaDoctorSumAggregateInputType
    _min?: AgendaDoctorMinAggregateInputType
    _max?: AgendaDoctorMaxAggregateInputType
  }

  export type AgendaDoctorGroupByOutputType = {
    id: string
    doctorId: string
    consultorioId: string | null
    dia: number
    fecha: Date | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde: string | null
    corteHasta: string | null
    createdAt: Date
    updatedAt: Date
    _count: AgendaDoctorCountAggregateOutputType | null
    _avg: AgendaDoctorAvgAggregateOutputType | null
    _sum: AgendaDoctorSumAggregateOutputType | null
    _min: AgendaDoctorMinAggregateOutputType | null
    _max: AgendaDoctorMaxAggregateOutputType | null
  }

  type GetAgendaDoctorGroupByPayload<T extends AgendaDoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgendaDoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgendaDoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgendaDoctorGroupByOutputType[P]>
            : GetScalarType<T[P], AgendaDoctorGroupByOutputType[P]>
        }
      >
    >


  export type AgendaDoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    consultorioId?: boolean
    dia?: boolean
    fecha?: boolean
    nombre?: boolean
    atencion?: boolean
    desde?: boolean
    hasta?: boolean
    corteDesde?: boolean
    corteHasta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }, ExtArgs["result"]["agendaDoctor"]>

  export type AgendaDoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    consultorioId?: boolean
    dia?: boolean
    fecha?: boolean
    nombre?: boolean
    atencion?: boolean
    desde?: boolean
    hasta?: boolean
    corteDesde?: boolean
    corteHasta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }, ExtArgs["result"]["agendaDoctor"]>

  export type AgendaDoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    consultorioId?: boolean
    dia?: boolean
    fecha?: boolean
    nombre?: boolean
    atencion?: boolean
    desde?: boolean
    hasta?: boolean
    corteDesde?: boolean
    corteHasta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }, ExtArgs["result"]["agendaDoctor"]>

  export type AgendaDoctorSelectScalar = {
    id?: boolean
    doctorId?: boolean
    consultorioId?: boolean
    dia?: boolean
    fecha?: boolean
    nombre?: boolean
    atencion?: boolean
    desde?: boolean
    hasta?: boolean
    corteDesde?: boolean
    corteHasta?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AgendaDoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "consultorioId" | "dia" | "fecha" | "nombre" | "atencion" | "desde" | "hasta" | "corteDesde" | "corteHasta" | "createdAt" | "updatedAt", ExtArgs["result"]["agendaDoctor"]>
  export type AgendaDoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }
  export type AgendaDoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }
  export type AgendaDoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorio?: boolean | AgendaDoctor$consultorioArgs<ExtArgs>
  }

  export type $AgendaDoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AgendaDoctor"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      consultorio: Prisma.$ConsultorioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      consultorioId: string | null
      dia: number
      fecha: Date | null
      nombre: string
      atencion: boolean
      desde: string
      hasta: string
      corteDesde: string | null
      corteHasta: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["agendaDoctor"]>
    composites: {}
  }

  type AgendaDoctorGetPayload<S extends boolean | null | undefined | AgendaDoctorDefaultArgs> = $Result.GetResult<Prisma.$AgendaDoctorPayload, S>

  type AgendaDoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AgendaDoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AgendaDoctorCountAggregateInputType | true
    }

  export interface AgendaDoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AgendaDoctor'], meta: { name: 'AgendaDoctor' } }
    /**
     * Find zero or one AgendaDoctor that matches the filter.
     * @param {AgendaDoctorFindUniqueArgs} args - Arguments to find a AgendaDoctor
     * @example
     * // Get one AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AgendaDoctorFindUniqueArgs>(args: SelectSubset<T, AgendaDoctorFindUniqueArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AgendaDoctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AgendaDoctorFindUniqueOrThrowArgs} args - Arguments to find a AgendaDoctor
     * @example
     * // Get one AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AgendaDoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, AgendaDoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgendaDoctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorFindFirstArgs} args - Arguments to find a AgendaDoctor
     * @example
     * // Get one AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AgendaDoctorFindFirstArgs>(args?: SelectSubset<T, AgendaDoctorFindFirstArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AgendaDoctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorFindFirstOrThrowArgs} args - Arguments to find a AgendaDoctor
     * @example
     * // Get one AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AgendaDoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, AgendaDoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AgendaDoctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AgendaDoctors
     * const agendaDoctors = await prisma.agendaDoctor.findMany()
     * 
     * // Get first 10 AgendaDoctors
     * const agendaDoctors = await prisma.agendaDoctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const agendaDoctorWithIdOnly = await prisma.agendaDoctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AgendaDoctorFindManyArgs>(args?: SelectSubset<T, AgendaDoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AgendaDoctor.
     * @param {AgendaDoctorCreateArgs} args - Arguments to create a AgendaDoctor.
     * @example
     * // Create one AgendaDoctor
     * const AgendaDoctor = await prisma.agendaDoctor.create({
     *   data: {
     *     // ... data to create a AgendaDoctor
     *   }
     * })
     * 
     */
    create<T extends AgendaDoctorCreateArgs>(args: SelectSubset<T, AgendaDoctorCreateArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AgendaDoctors.
     * @param {AgendaDoctorCreateManyArgs} args - Arguments to create many AgendaDoctors.
     * @example
     * // Create many AgendaDoctors
     * const agendaDoctor = await prisma.agendaDoctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AgendaDoctorCreateManyArgs>(args?: SelectSubset<T, AgendaDoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AgendaDoctors and returns the data saved in the database.
     * @param {AgendaDoctorCreateManyAndReturnArgs} args - Arguments to create many AgendaDoctors.
     * @example
     * // Create many AgendaDoctors
     * const agendaDoctor = await prisma.agendaDoctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AgendaDoctors and only return the `id`
     * const agendaDoctorWithIdOnly = await prisma.agendaDoctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AgendaDoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, AgendaDoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AgendaDoctor.
     * @param {AgendaDoctorDeleteArgs} args - Arguments to delete one AgendaDoctor.
     * @example
     * // Delete one AgendaDoctor
     * const AgendaDoctor = await prisma.agendaDoctor.delete({
     *   where: {
     *     // ... filter to delete one AgendaDoctor
     *   }
     * })
     * 
     */
    delete<T extends AgendaDoctorDeleteArgs>(args: SelectSubset<T, AgendaDoctorDeleteArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AgendaDoctor.
     * @param {AgendaDoctorUpdateArgs} args - Arguments to update one AgendaDoctor.
     * @example
     * // Update one AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AgendaDoctorUpdateArgs>(args: SelectSubset<T, AgendaDoctorUpdateArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AgendaDoctors.
     * @param {AgendaDoctorDeleteManyArgs} args - Arguments to filter AgendaDoctors to delete.
     * @example
     * // Delete a few AgendaDoctors
     * const { count } = await prisma.agendaDoctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AgendaDoctorDeleteManyArgs>(args?: SelectSubset<T, AgendaDoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgendaDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AgendaDoctors
     * const agendaDoctor = await prisma.agendaDoctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AgendaDoctorUpdateManyArgs>(args: SelectSubset<T, AgendaDoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AgendaDoctors and returns the data updated in the database.
     * @param {AgendaDoctorUpdateManyAndReturnArgs} args - Arguments to update many AgendaDoctors.
     * @example
     * // Update many AgendaDoctors
     * const agendaDoctor = await prisma.agendaDoctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AgendaDoctors and only return the `id`
     * const agendaDoctorWithIdOnly = await prisma.agendaDoctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AgendaDoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, AgendaDoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AgendaDoctor.
     * @param {AgendaDoctorUpsertArgs} args - Arguments to update or create a AgendaDoctor.
     * @example
     * // Update or create a AgendaDoctor
     * const agendaDoctor = await prisma.agendaDoctor.upsert({
     *   create: {
     *     // ... data to create a AgendaDoctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AgendaDoctor we want to update
     *   }
     * })
     */
    upsert<T extends AgendaDoctorUpsertArgs>(args: SelectSubset<T, AgendaDoctorUpsertArgs<ExtArgs>>): Prisma__AgendaDoctorClient<$Result.GetResult<Prisma.$AgendaDoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AgendaDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorCountArgs} args - Arguments to filter AgendaDoctors to count.
     * @example
     * // Count the number of AgendaDoctors
     * const count = await prisma.agendaDoctor.count({
     *   where: {
     *     // ... the filter for the AgendaDoctors we want to count
     *   }
     * })
    **/
    count<T extends AgendaDoctorCountArgs>(
      args?: Subset<T, AgendaDoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgendaDoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AgendaDoctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgendaDoctorAggregateArgs>(args: Subset<T, AgendaDoctorAggregateArgs>): Prisma.PrismaPromise<GetAgendaDoctorAggregateType<T>>

    /**
     * Group by AgendaDoctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgendaDoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgendaDoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgendaDoctorGroupByArgs['orderBy'] }
        : { orderBy?: AgendaDoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgendaDoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgendaDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AgendaDoctor model
   */
  readonly fields: AgendaDoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AgendaDoctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgendaDoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorio<T extends AgendaDoctor$consultorioArgs<ExtArgs> = {}>(args?: Subset<T, AgendaDoctor$consultorioArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AgendaDoctor model
   */
  interface AgendaDoctorFieldRefs {
    readonly id: FieldRef<"AgendaDoctor", 'String'>
    readonly doctorId: FieldRef<"AgendaDoctor", 'String'>
    readonly consultorioId: FieldRef<"AgendaDoctor", 'String'>
    readonly dia: FieldRef<"AgendaDoctor", 'Int'>
    readonly fecha: FieldRef<"AgendaDoctor", 'DateTime'>
    readonly nombre: FieldRef<"AgendaDoctor", 'String'>
    readonly atencion: FieldRef<"AgendaDoctor", 'Boolean'>
    readonly desde: FieldRef<"AgendaDoctor", 'String'>
    readonly hasta: FieldRef<"AgendaDoctor", 'String'>
    readonly corteDesde: FieldRef<"AgendaDoctor", 'String'>
    readonly corteHasta: FieldRef<"AgendaDoctor", 'String'>
    readonly createdAt: FieldRef<"AgendaDoctor", 'DateTime'>
    readonly updatedAt: FieldRef<"AgendaDoctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AgendaDoctor findUnique
   */
  export type AgendaDoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter, which AgendaDoctor to fetch.
     */
    where: AgendaDoctorWhereUniqueInput
  }

  /**
   * AgendaDoctor findUniqueOrThrow
   */
  export type AgendaDoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter, which AgendaDoctor to fetch.
     */
    where: AgendaDoctorWhereUniqueInput
  }

  /**
   * AgendaDoctor findFirst
   */
  export type AgendaDoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter, which AgendaDoctor to fetch.
     */
    where?: AgendaDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendaDoctors to fetch.
     */
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgendaDoctors.
     */
    cursor?: AgendaDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendaDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendaDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgendaDoctors.
     */
    distinct?: AgendaDoctorScalarFieldEnum | AgendaDoctorScalarFieldEnum[]
  }

  /**
   * AgendaDoctor findFirstOrThrow
   */
  export type AgendaDoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter, which AgendaDoctor to fetch.
     */
    where?: AgendaDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendaDoctors to fetch.
     */
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AgendaDoctors.
     */
    cursor?: AgendaDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendaDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendaDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AgendaDoctors.
     */
    distinct?: AgendaDoctorScalarFieldEnum | AgendaDoctorScalarFieldEnum[]
  }

  /**
   * AgendaDoctor findMany
   */
  export type AgendaDoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter, which AgendaDoctors to fetch.
     */
    where?: AgendaDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AgendaDoctors to fetch.
     */
    orderBy?: AgendaDoctorOrderByWithRelationInput | AgendaDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AgendaDoctors.
     */
    cursor?: AgendaDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AgendaDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AgendaDoctors.
     */
    skip?: number
    distinct?: AgendaDoctorScalarFieldEnum | AgendaDoctorScalarFieldEnum[]
  }

  /**
   * AgendaDoctor create
   */
  export type AgendaDoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a AgendaDoctor.
     */
    data: XOR<AgendaDoctorCreateInput, AgendaDoctorUncheckedCreateInput>
  }

  /**
   * AgendaDoctor createMany
   */
  export type AgendaDoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AgendaDoctors.
     */
    data: AgendaDoctorCreateManyInput | AgendaDoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AgendaDoctor createManyAndReturn
   */
  export type AgendaDoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * The data used to create many AgendaDoctors.
     */
    data: AgendaDoctorCreateManyInput | AgendaDoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgendaDoctor update
   */
  export type AgendaDoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a AgendaDoctor.
     */
    data: XOR<AgendaDoctorUpdateInput, AgendaDoctorUncheckedUpdateInput>
    /**
     * Choose, which AgendaDoctor to update.
     */
    where: AgendaDoctorWhereUniqueInput
  }

  /**
   * AgendaDoctor updateMany
   */
  export type AgendaDoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AgendaDoctors.
     */
    data: XOR<AgendaDoctorUpdateManyMutationInput, AgendaDoctorUncheckedUpdateManyInput>
    /**
     * Filter which AgendaDoctors to update
     */
    where?: AgendaDoctorWhereInput
    /**
     * Limit how many AgendaDoctors to update.
     */
    limit?: number
  }

  /**
   * AgendaDoctor updateManyAndReturn
   */
  export type AgendaDoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * The data used to update AgendaDoctors.
     */
    data: XOR<AgendaDoctorUpdateManyMutationInput, AgendaDoctorUncheckedUpdateManyInput>
    /**
     * Filter which AgendaDoctors to update
     */
    where?: AgendaDoctorWhereInput
    /**
     * Limit how many AgendaDoctors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AgendaDoctor upsert
   */
  export type AgendaDoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the AgendaDoctor to update in case it exists.
     */
    where: AgendaDoctorWhereUniqueInput
    /**
     * In case the AgendaDoctor found by the `where` argument doesn't exist, create a new AgendaDoctor with this data.
     */
    create: XOR<AgendaDoctorCreateInput, AgendaDoctorUncheckedCreateInput>
    /**
     * In case the AgendaDoctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgendaDoctorUpdateInput, AgendaDoctorUncheckedUpdateInput>
  }

  /**
   * AgendaDoctor delete
   */
  export type AgendaDoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
    /**
     * Filter which AgendaDoctor to delete.
     */
    where: AgendaDoctorWhereUniqueInput
  }

  /**
   * AgendaDoctor deleteMany
   */
  export type AgendaDoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AgendaDoctors to delete
     */
    where?: AgendaDoctorWhereInput
    /**
     * Limit how many AgendaDoctors to delete.
     */
    limit?: number
  }

  /**
   * AgendaDoctor.consultorio
   */
  export type AgendaDoctor$consultorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    where?: ConsultorioWhereInput
  }

  /**
   * AgendaDoctor without action
   */
  export type AgendaDoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgendaDoctor
     */
    select?: AgendaDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AgendaDoctor
     */
    omit?: AgendaDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AgendaDoctorInclude<ExtArgs> | null
  }


  /**
   * Model TipoTurnoDoctor
   */

  export type AggregateTipoTurnoDoctor = {
    _count: TipoTurnoDoctorCountAggregateOutputType | null
    _min: TipoTurnoDoctorMinAggregateOutputType | null
    _max: TipoTurnoDoctorMaxAggregateOutputType | null
  }

  export type TipoTurnoDoctorMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nombre: string | null
    duracion: string | null
    habilitado: boolean | null
    publico: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TipoTurnoDoctorMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    nombre: string | null
    duracion: string | null
    habilitado: boolean | null
    publico: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TipoTurnoDoctorCountAggregateOutputType = {
    id: number
    doctorId: number
    nombre: number
    duracion: number
    habilitado: number
    publico: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TipoTurnoDoctorMinAggregateInputType = {
    id?: true
    doctorId?: true
    nombre?: true
    duracion?: true
    habilitado?: true
    publico?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TipoTurnoDoctorMaxAggregateInputType = {
    id?: true
    doctorId?: true
    nombre?: true
    duracion?: true
    habilitado?: true
    publico?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TipoTurnoDoctorCountAggregateInputType = {
    id?: true
    doctorId?: true
    nombre?: true
    duracion?: true
    habilitado?: true
    publico?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TipoTurnoDoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoTurnoDoctor to aggregate.
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoTurnoDoctors to fetch.
     */
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TipoTurnoDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoTurnoDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoTurnoDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TipoTurnoDoctors
    **/
    _count?: true | TipoTurnoDoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TipoTurnoDoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TipoTurnoDoctorMaxAggregateInputType
  }

  export type GetTipoTurnoDoctorAggregateType<T extends TipoTurnoDoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateTipoTurnoDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTipoTurnoDoctor[P]>
      : GetScalarType<T[P], AggregateTipoTurnoDoctor[P]>
  }




  export type TipoTurnoDoctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TipoTurnoDoctorWhereInput
    orderBy?: TipoTurnoDoctorOrderByWithAggregationInput | TipoTurnoDoctorOrderByWithAggregationInput[]
    by: TipoTurnoDoctorScalarFieldEnum[] | TipoTurnoDoctorScalarFieldEnum
    having?: TipoTurnoDoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TipoTurnoDoctorCountAggregateInputType | true
    _min?: TipoTurnoDoctorMinAggregateInputType
    _max?: TipoTurnoDoctorMaxAggregateInputType
  }

  export type TipoTurnoDoctorGroupByOutputType = {
    id: string
    doctorId: string
    nombre: string
    duracion: string
    habilitado: boolean
    publico: boolean
    createdAt: Date
    updatedAt: Date
    _count: TipoTurnoDoctorCountAggregateOutputType | null
    _min: TipoTurnoDoctorMinAggregateOutputType | null
    _max: TipoTurnoDoctorMaxAggregateOutputType | null
  }

  type GetTipoTurnoDoctorGroupByPayload<T extends TipoTurnoDoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TipoTurnoDoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TipoTurnoDoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TipoTurnoDoctorGroupByOutputType[P]>
            : GetScalarType<T[P], TipoTurnoDoctorGroupByOutputType[P]>
        }
      >
    >


  export type TipoTurnoDoctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nombre?: boolean
    duracion?: boolean
    habilitado?: boolean
    publico?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorios?: boolean | TipoTurnoDoctor$consultoriosArgs<ExtArgs>
    turnos?: boolean | TipoTurnoDoctor$turnosArgs<ExtArgs>
    _count?: boolean | TipoTurnoDoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoTurnoDoctor"]>

  export type TipoTurnoDoctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nombre?: boolean
    duracion?: boolean
    habilitado?: boolean
    publico?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoTurnoDoctor"]>

  export type TipoTurnoDoctorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    nombre?: boolean
    duracion?: boolean
    habilitado?: boolean
    publico?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tipoTurnoDoctor"]>

  export type TipoTurnoDoctorSelectScalar = {
    id?: boolean
    doctorId?: boolean
    nombre?: boolean
    duracion?: boolean
    habilitado?: boolean
    publico?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TipoTurnoDoctorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "doctorId" | "nombre" | "duracion" | "habilitado" | "publico" | "createdAt" | "updatedAt", ExtArgs["result"]["tipoTurnoDoctor"]>
  export type TipoTurnoDoctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    consultorios?: boolean | TipoTurnoDoctor$consultoriosArgs<ExtArgs>
    turnos?: boolean | TipoTurnoDoctor$turnosArgs<ExtArgs>
    _count?: boolean | TipoTurnoDoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TipoTurnoDoctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }
  export type TipoTurnoDoctorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
  }

  export type $TipoTurnoDoctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TipoTurnoDoctor"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      consultorios: Prisma.$ConsultorioPayload<ExtArgs>[]
      turnos: Prisma.$TurnoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      doctorId: string
      nombre: string
      duracion: string
      habilitado: boolean
      publico: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tipoTurnoDoctor"]>
    composites: {}
  }

  type TipoTurnoDoctorGetPayload<S extends boolean | null | undefined | TipoTurnoDoctorDefaultArgs> = $Result.GetResult<Prisma.$TipoTurnoDoctorPayload, S>

  type TipoTurnoDoctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TipoTurnoDoctorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TipoTurnoDoctorCountAggregateInputType | true
    }

  export interface TipoTurnoDoctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TipoTurnoDoctor'], meta: { name: 'TipoTurnoDoctor' } }
    /**
     * Find zero or one TipoTurnoDoctor that matches the filter.
     * @param {TipoTurnoDoctorFindUniqueArgs} args - Arguments to find a TipoTurnoDoctor
     * @example
     * // Get one TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TipoTurnoDoctorFindUniqueArgs>(args: SelectSubset<T, TipoTurnoDoctorFindUniqueArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TipoTurnoDoctor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TipoTurnoDoctorFindUniqueOrThrowArgs} args - Arguments to find a TipoTurnoDoctor
     * @example
     * // Get one TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TipoTurnoDoctorFindUniqueOrThrowArgs>(args: SelectSubset<T, TipoTurnoDoctorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TipoTurnoDoctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorFindFirstArgs} args - Arguments to find a TipoTurnoDoctor
     * @example
     * // Get one TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TipoTurnoDoctorFindFirstArgs>(args?: SelectSubset<T, TipoTurnoDoctorFindFirstArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TipoTurnoDoctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorFindFirstOrThrowArgs} args - Arguments to find a TipoTurnoDoctor
     * @example
     * // Get one TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TipoTurnoDoctorFindFirstOrThrowArgs>(args?: SelectSubset<T, TipoTurnoDoctorFindFirstOrThrowArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TipoTurnoDoctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TipoTurnoDoctors
     * const tipoTurnoDoctors = await prisma.tipoTurnoDoctor.findMany()
     * 
     * // Get first 10 TipoTurnoDoctors
     * const tipoTurnoDoctors = await prisma.tipoTurnoDoctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tipoTurnoDoctorWithIdOnly = await prisma.tipoTurnoDoctor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TipoTurnoDoctorFindManyArgs>(args?: SelectSubset<T, TipoTurnoDoctorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TipoTurnoDoctor.
     * @param {TipoTurnoDoctorCreateArgs} args - Arguments to create a TipoTurnoDoctor.
     * @example
     * // Create one TipoTurnoDoctor
     * const TipoTurnoDoctor = await prisma.tipoTurnoDoctor.create({
     *   data: {
     *     // ... data to create a TipoTurnoDoctor
     *   }
     * })
     * 
     */
    create<T extends TipoTurnoDoctorCreateArgs>(args: SelectSubset<T, TipoTurnoDoctorCreateArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TipoTurnoDoctors.
     * @param {TipoTurnoDoctorCreateManyArgs} args - Arguments to create many TipoTurnoDoctors.
     * @example
     * // Create many TipoTurnoDoctors
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TipoTurnoDoctorCreateManyArgs>(args?: SelectSubset<T, TipoTurnoDoctorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TipoTurnoDoctors and returns the data saved in the database.
     * @param {TipoTurnoDoctorCreateManyAndReturnArgs} args - Arguments to create many TipoTurnoDoctors.
     * @example
     * // Create many TipoTurnoDoctors
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TipoTurnoDoctors and only return the `id`
     * const tipoTurnoDoctorWithIdOnly = await prisma.tipoTurnoDoctor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TipoTurnoDoctorCreateManyAndReturnArgs>(args?: SelectSubset<T, TipoTurnoDoctorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TipoTurnoDoctor.
     * @param {TipoTurnoDoctorDeleteArgs} args - Arguments to delete one TipoTurnoDoctor.
     * @example
     * // Delete one TipoTurnoDoctor
     * const TipoTurnoDoctor = await prisma.tipoTurnoDoctor.delete({
     *   where: {
     *     // ... filter to delete one TipoTurnoDoctor
     *   }
     * })
     * 
     */
    delete<T extends TipoTurnoDoctorDeleteArgs>(args: SelectSubset<T, TipoTurnoDoctorDeleteArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TipoTurnoDoctor.
     * @param {TipoTurnoDoctorUpdateArgs} args - Arguments to update one TipoTurnoDoctor.
     * @example
     * // Update one TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TipoTurnoDoctorUpdateArgs>(args: SelectSubset<T, TipoTurnoDoctorUpdateArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TipoTurnoDoctors.
     * @param {TipoTurnoDoctorDeleteManyArgs} args - Arguments to filter TipoTurnoDoctors to delete.
     * @example
     * // Delete a few TipoTurnoDoctors
     * const { count } = await prisma.tipoTurnoDoctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TipoTurnoDoctorDeleteManyArgs>(args?: SelectSubset<T, TipoTurnoDoctorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoTurnoDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TipoTurnoDoctors
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TipoTurnoDoctorUpdateManyArgs>(args: SelectSubset<T, TipoTurnoDoctorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TipoTurnoDoctors and returns the data updated in the database.
     * @param {TipoTurnoDoctorUpdateManyAndReturnArgs} args - Arguments to update many TipoTurnoDoctors.
     * @example
     * // Update many TipoTurnoDoctors
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TipoTurnoDoctors and only return the `id`
     * const tipoTurnoDoctorWithIdOnly = await prisma.tipoTurnoDoctor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TipoTurnoDoctorUpdateManyAndReturnArgs>(args: SelectSubset<T, TipoTurnoDoctorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TipoTurnoDoctor.
     * @param {TipoTurnoDoctorUpsertArgs} args - Arguments to update or create a TipoTurnoDoctor.
     * @example
     * // Update or create a TipoTurnoDoctor
     * const tipoTurnoDoctor = await prisma.tipoTurnoDoctor.upsert({
     *   create: {
     *     // ... data to create a TipoTurnoDoctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TipoTurnoDoctor we want to update
     *   }
     * })
     */
    upsert<T extends TipoTurnoDoctorUpsertArgs>(args: SelectSubset<T, TipoTurnoDoctorUpsertArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TipoTurnoDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorCountArgs} args - Arguments to filter TipoTurnoDoctors to count.
     * @example
     * // Count the number of TipoTurnoDoctors
     * const count = await prisma.tipoTurnoDoctor.count({
     *   where: {
     *     // ... the filter for the TipoTurnoDoctors we want to count
     *   }
     * })
    **/
    count<T extends TipoTurnoDoctorCountArgs>(
      args?: Subset<T, TipoTurnoDoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TipoTurnoDoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TipoTurnoDoctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TipoTurnoDoctorAggregateArgs>(args: Subset<T, TipoTurnoDoctorAggregateArgs>): Prisma.PrismaPromise<GetTipoTurnoDoctorAggregateType<T>>

    /**
     * Group by TipoTurnoDoctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TipoTurnoDoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TipoTurnoDoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TipoTurnoDoctorGroupByArgs['orderBy'] }
        : { orderBy?: TipoTurnoDoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TipoTurnoDoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTipoTurnoDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TipoTurnoDoctor model
   */
  readonly fields: TipoTurnoDoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TipoTurnoDoctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TipoTurnoDoctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    consultorios<T extends TipoTurnoDoctor$consultoriosArgs<ExtArgs> = {}>(args?: Subset<T, TipoTurnoDoctor$consultoriosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    turnos<T extends TipoTurnoDoctor$turnosArgs<ExtArgs> = {}>(args?: Subset<T, TipoTurnoDoctor$turnosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TipoTurnoDoctor model
   */
  interface TipoTurnoDoctorFieldRefs {
    readonly id: FieldRef<"TipoTurnoDoctor", 'String'>
    readonly doctorId: FieldRef<"TipoTurnoDoctor", 'String'>
    readonly nombre: FieldRef<"TipoTurnoDoctor", 'String'>
    readonly duracion: FieldRef<"TipoTurnoDoctor", 'String'>
    readonly habilitado: FieldRef<"TipoTurnoDoctor", 'Boolean'>
    readonly publico: FieldRef<"TipoTurnoDoctor", 'Boolean'>
    readonly createdAt: FieldRef<"TipoTurnoDoctor", 'DateTime'>
    readonly updatedAt: FieldRef<"TipoTurnoDoctor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TipoTurnoDoctor findUnique
   */
  export type TipoTurnoDoctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter, which TipoTurnoDoctor to fetch.
     */
    where: TipoTurnoDoctorWhereUniqueInput
  }

  /**
   * TipoTurnoDoctor findUniqueOrThrow
   */
  export type TipoTurnoDoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter, which TipoTurnoDoctor to fetch.
     */
    where: TipoTurnoDoctorWhereUniqueInput
  }

  /**
   * TipoTurnoDoctor findFirst
   */
  export type TipoTurnoDoctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter, which TipoTurnoDoctor to fetch.
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoTurnoDoctors to fetch.
     */
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoTurnoDoctors.
     */
    cursor?: TipoTurnoDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoTurnoDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoTurnoDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoTurnoDoctors.
     */
    distinct?: TipoTurnoDoctorScalarFieldEnum | TipoTurnoDoctorScalarFieldEnum[]
  }

  /**
   * TipoTurnoDoctor findFirstOrThrow
   */
  export type TipoTurnoDoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter, which TipoTurnoDoctor to fetch.
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoTurnoDoctors to fetch.
     */
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TipoTurnoDoctors.
     */
    cursor?: TipoTurnoDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoTurnoDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoTurnoDoctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TipoTurnoDoctors.
     */
    distinct?: TipoTurnoDoctorScalarFieldEnum | TipoTurnoDoctorScalarFieldEnum[]
  }

  /**
   * TipoTurnoDoctor findMany
   */
  export type TipoTurnoDoctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter, which TipoTurnoDoctors to fetch.
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TipoTurnoDoctors to fetch.
     */
    orderBy?: TipoTurnoDoctorOrderByWithRelationInput | TipoTurnoDoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TipoTurnoDoctors.
     */
    cursor?: TipoTurnoDoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TipoTurnoDoctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TipoTurnoDoctors.
     */
    skip?: number
    distinct?: TipoTurnoDoctorScalarFieldEnum | TipoTurnoDoctorScalarFieldEnum[]
  }

  /**
   * TipoTurnoDoctor create
   */
  export type TipoTurnoDoctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a TipoTurnoDoctor.
     */
    data: XOR<TipoTurnoDoctorCreateInput, TipoTurnoDoctorUncheckedCreateInput>
  }

  /**
   * TipoTurnoDoctor createMany
   */
  export type TipoTurnoDoctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TipoTurnoDoctors.
     */
    data: TipoTurnoDoctorCreateManyInput | TipoTurnoDoctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TipoTurnoDoctor createManyAndReturn
   */
  export type TipoTurnoDoctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * The data used to create many TipoTurnoDoctors.
     */
    data: TipoTurnoDoctorCreateManyInput | TipoTurnoDoctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TipoTurnoDoctor update
   */
  export type TipoTurnoDoctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a TipoTurnoDoctor.
     */
    data: XOR<TipoTurnoDoctorUpdateInput, TipoTurnoDoctorUncheckedUpdateInput>
    /**
     * Choose, which TipoTurnoDoctor to update.
     */
    where: TipoTurnoDoctorWhereUniqueInput
  }

  /**
   * TipoTurnoDoctor updateMany
   */
  export type TipoTurnoDoctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TipoTurnoDoctors.
     */
    data: XOR<TipoTurnoDoctorUpdateManyMutationInput, TipoTurnoDoctorUncheckedUpdateManyInput>
    /**
     * Filter which TipoTurnoDoctors to update
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * Limit how many TipoTurnoDoctors to update.
     */
    limit?: number
  }

  /**
   * TipoTurnoDoctor updateManyAndReturn
   */
  export type TipoTurnoDoctorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * The data used to update TipoTurnoDoctors.
     */
    data: XOR<TipoTurnoDoctorUpdateManyMutationInput, TipoTurnoDoctorUncheckedUpdateManyInput>
    /**
     * Filter which TipoTurnoDoctors to update
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * Limit how many TipoTurnoDoctors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TipoTurnoDoctor upsert
   */
  export type TipoTurnoDoctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the TipoTurnoDoctor to update in case it exists.
     */
    where: TipoTurnoDoctorWhereUniqueInput
    /**
     * In case the TipoTurnoDoctor found by the `where` argument doesn't exist, create a new TipoTurnoDoctor with this data.
     */
    create: XOR<TipoTurnoDoctorCreateInput, TipoTurnoDoctorUncheckedCreateInput>
    /**
     * In case the TipoTurnoDoctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TipoTurnoDoctorUpdateInput, TipoTurnoDoctorUncheckedUpdateInput>
  }

  /**
   * TipoTurnoDoctor delete
   */
  export type TipoTurnoDoctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    /**
     * Filter which TipoTurnoDoctor to delete.
     */
    where: TipoTurnoDoctorWhereUniqueInput
  }

  /**
   * TipoTurnoDoctor deleteMany
   */
  export type TipoTurnoDoctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TipoTurnoDoctors to delete
     */
    where?: TipoTurnoDoctorWhereInput
    /**
     * Limit how many TipoTurnoDoctors to delete.
     */
    limit?: number
  }

  /**
   * TipoTurnoDoctor.consultorios
   */
  export type TipoTurnoDoctor$consultoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Consultorio
     */
    select?: ConsultorioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Consultorio
     */
    omit?: ConsultorioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsultorioInclude<ExtArgs> | null
    where?: ConsultorioWhereInput
    orderBy?: ConsultorioOrderByWithRelationInput | ConsultorioOrderByWithRelationInput[]
    cursor?: ConsultorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultorioScalarFieldEnum | ConsultorioScalarFieldEnum[]
  }

  /**
   * TipoTurnoDoctor.turnos
   */
  export type TipoTurnoDoctor$turnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * TipoTurnoDoctor without action
   */
  export type TipoTurnoDoctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
  }


  /**
   * Model Paciente
   */

  export type AggregatePaciente = {
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  export type PacienteMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    apellido: string | null
    dni: string | null
    celular: string | null
    email: string | null
    cobertura: string | null
    coberturaMedicaId: string | null
    observaciones: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PacienteMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    apellido: string | null
    dni: string | null
    celular: string | null
    email: string | null
    cobertura: string | null
    coberturaMedicaId: string | null
    observaciones: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PacienteCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    dni: number
    celular: number
    email: number
    cobertura: number
    coberturaMedicaId: number
    observaciones: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PacienteMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    dni?: true
    celular?: true
    email?: true
    cobertura?: true
    coberturaMedicaId?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PacienteMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    dni?: true
    celular?: true
    email?: true
    cobertura?: true
    coberturaMedicaId?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PacienteCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    dni?: true
    celular?: true
    email?: true
    cobertura?: true
    coberturaMedicaId?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PacienteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Paciente to aggregate.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pacientes
    **/
    _count?: true | PacienteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PacienteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PacienteMaxAggregateInputType
  }

  export type GetPacienteAggregateType<T extends PacienteAggregateArgs> = {
        [P in keyof T & keyof AggregatePaciente]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaciente[P]>
      : GetScalarType<T[P], AggregatePaciente[P]>
  }




  export type PacienteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithAggregationInput | PacienteOrderByWithAggregationInput[]
    by: PacienteScalarFieldEnum[] | PacienteScalarFieldEnum
    having?: PacienteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PacienteCountAggregateInputType | true
    _min?: PacienteMinAggregateInputType
    _max?: PacienteMaxAggregateInputType
  }

  export type PacienteGroupByOutputType = {
    id: string
    nombre: string
    apellido: string | null
    dni: string | null
    celular: string
    email: string | null
    cobertura: string | null
    coberturaMedicaId: string | null
    observaciones: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PacienteCountAggregateOutputType | null
    _min: PacienteMinAggregateOutputType | null
    _max: PacienteMaxAggregateOutputType | null
  }

  type GetPacienteGroupByPayload<T extends PacienteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PacienteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PacienteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PacienteGroupByOutputType[P]>
            : GetScalarType<T[P], PacienteGroupByOutputType[P]>
        }
      >
    >


  export type PacienteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    dni?: boolean
    celular?: boolean
    email?: boolean
    cobertura?: boolean
    coberturaMedicaId?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    turnos?: boolean | Paciente$turnosArgs<ExtArgs>
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    dni?: boolean
    celular?: boolean
    email?: boolean
    cobertura?: boolean
    coberturaMedicaId?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    dni?: boolean
    celular?: boolean
    email?: boolean
    cobertura?: boolean
    coberturaMedicaId?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["paciente"]>

  export type PacienteSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    dni?: boolean
    celular?: boolean
    email?: boolean
    cobertura?: boolean
    coberturaMedicaId?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PacienteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "apellido" | "dni" | "celular" | "email" | "cobertura" | "coberturaMedicaId" | "observaciones" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["paciente"]>
  export type PacienteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turnos?: boolean | Paciente$turnosArgs<ExtArgs>
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
    _count?: boolean | PacienteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PacienteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
  }
  export type PacienteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coberturaMedica?: boolean | Paciente$coberturaMedicaArgs<ExtArgs>
    createdBy?: boolean | Paciente$createdByArgs<ExtArgs>
    updatedBy?: boolean | Paciente$updatedByArgs<ExtArgs>
  }

  export type $PacientePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Paciente"
    objects: {
      turnos: Prisma.$TurnoPayload<ExtArgs>[]
      coberturaMedica: Prisma.$CoberturaMedicaPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      apellido: string | null
      dni: string | null
      celular: string
      email: string | null
      cobertura: string | null
      coberturaMedicaId: string | null
      observaciones: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["paciente"]>
    composites: {}
  }

  type PacienteGetPayload<S extends boolean | null | undefined | PacienteDefaultArgs> = $Result.GetResult<Prisma.$PacientePayload, S>

  type PacienteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PacienteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PacienteCountAggregateInputType | true
    }

  export interface PacienteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Paciente'], meta: { name: 'Paciente' } }
    /**
     * Find zero or one Paciente that matches the filter.
     * @param {PacienteFindUniqueArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PacienteFindUniqueArgs>(args: SelectSubset<T, PacienteFindUniqueArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paciente that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PacienteFindUniqueOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PacienteFindUniqueOrThrowArgs>(args: SelectSubset<T, PacienteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PacienteFindFirstArgs>(args?: SelectSubset<T, PacienteFindFirstArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paciente that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindFirstOrThrowArgs} args - Arguments to find a Paciente
     * @example
     * // Get one Paciente
     * const paciente = await prisma.paciente.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PacienteFindFirstOrThrowArgs>(args?: SelectSubset<T, PacienteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pacientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pacientes
     * const pacientes = await prisma.paciente.findMany()
     * 
     * // Get first 10 Pacientes
     * const pacientes = await prisma.paciente.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pacienteWithIdOnly = await prisma.paciente.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PacienteFindManyArgs>(args?: SelectSubset<T, PacienteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paciente.
     * @param {PacienteCreateArgs} args - Arguments to create a Paciente.
     * @example
     * // Create one Paciente
     * const Paciente = await prisma.paciente.create({
     *   data: {
     *     // ... data to create a Paciente
     *   }
     * })
     * 
     */
    create<T extends PacienteCreateArgs>(args: SelectSubset<T, PacienteCreateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pacientes.
     * @param {PacienteCreateManyArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PacienteCreateManyArgs>(args?: SelectSubset<T, PacienteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pacientes and returns the data saved in the database.
     * @param {PacienteCreateManyAndReturnArgs} args - Arguments to create many Pacientes.
     * @example
     * // Create many Pacientes
     * const paciente = await prisma.paciente.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PacienteCreateManyAndReturnArgs>(args?: SelectSubset<T, PacienteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Paciente.
     * @param {PacienteDeleteArgs} args - Arguments to delete one Paciente.
     * @example
     * // Delete one Paciente
     * const Paciente = await prisma.paciente.delete({
     *   where: {
     *     // ... filter to delete one Paciente
     *   }
     * })
     * 
     */
    delete<T extends PacienteDeleteArgs>(args: SelectSubset<T, PacienteDeleteArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paciente.
     * @param {PacienteUpdateArgs} args - Arguments to update one Paciente.
     * @example
     * // Update one Paciente
     * const paciente = await prisma.paciente.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PacienteUpdateArgs>(args: SelectSubset<T, PacienteUpdateArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pacientes.
     * @param {PacienteDeleteManyArgs} args - Arguments to filter Pacientes to delete.
     * @example
     * // Delete a few Pacientes
     * const { count } = await prisma.paciente.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PacienteDeleteManyArgs>(args?: SelectSubset<T, PacienteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PacienteUpdateManyArgs>(args: SelectSubset<T, PacienteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pacientes and returns the data updated in the database.
     * @param {PacienteUpdateManyAndReturnArgs} args - Arguments to update many Pacientes.
     * @example
     * // Update many Pacientes
     * const paciente = await prisma.paciente.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pacientes and only return the `id`
     * const pacienteWithIdOnly = await prisma.paciente.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PacienteUpdateManyAndReturnArgs>(args: SelectSubset<T, PacienteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Paciente.
     * @param {PacienteUpsertArgs} args - Arguments to update or create a Paciente.
     * @example
     * // Update or create a Paciente
     * const paciente = await prisma.paciente.upsert({
     *   create: {
     *     // ... data to create a Paciente
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paciente we want to update
     *   }
     * })
     */
    upsert<T extends PacienteUpsertArgs>(args: SelectSubset<T, PacienteUpsertArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pacientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteCountArgs} args - Arguments to filter Pacientes to count.
     * @example
     * // Count the number of Pacientes
     * const count = await prisma.paciente.count({
     *   where: {
     *     // ... the filter for the Pacientes we want to count
     *   }
     * })
    **/
    count<T extends PacienteCountArgs>(
      args?: Subset<T, PacienteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PacienteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PacienteAggregateArgs>(args: Subset<T, PacienteAggregateArgs>): Prisma.PrismaPromise<GetPacienteAggregateType<T>>

    /**
     * Group by Paciente.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PacienteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PacienteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PacienteGroupByArgs['orderBy'] }
        : { orderBy?: PacienteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PacienteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPacienteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Paciente model
   */
  readonly fields: PacienteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Paciente.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PacienteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    turnos<T extends Paciente$turnosArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$turnosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coberturaMedica<T extends Paciente$coberturaMedicaArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$coberturaMedicaArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Paciente$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Paciente$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Paciente$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Paciente model
   */
  interface PacienteFieldRefs {
    readonly id: FieldRef<"Paciente", 'String'>
    readonly nombre: FieldRef<"Paciente", 'String'>
    readonly apellido: FieldRef<"Paciente", 'String'>
    readonly dni: FieldRef<"Paciente", 'String'>
    readonly celular: FieldRef<"Paciente", 'String'>
    readonly email: FieldRef<"Paciente", 'String'>
    readonly cobertura: FieldRef<"Paciente", 'String'>
    readonly coberturaMedicaId: FieldRef<"Paciente", 'String'>
    readonly observaciones: FieldRef<"Paciente", 'String'>
    readonly createdAt: FieldRef<"Paciente", 'DateTime'>
    readonly updatedAt: FieldRef<"Paciente", 'DateTime'>
    readonly createdById: FieldRef<"Paciente", 'String'>
    readonly updatedById: FieldRef<"Paciente", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Paciente findUnique
   */
  export type PacienteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findUniqueOrThrow
   */
  export type PacienteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente findFirst
   */
  export type PacienteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findFirstOrThrow
   */
  export type PacienteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Paciente to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pacientes.
     */
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente findMany
   */
  export type PacienteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter, which Pacientes to fetch.
     */
    where?: PacienteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pacientes to fetch.
     */
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pacientes.
     */
    cursor?: PacienteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pacientes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pacientes.
     */
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * Paciente create
   */
  export type PacienteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to create a Paciente.
     */
    data: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
  }

  /**
   * Paciente createMany
   */
  export type PacienteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Paciente createManyAndReturn
   */
  export type PacienteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to create many Pacientes.
     */
    data: PacienteCreateManyInput | PacienteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Paciente update
   */
  export type PacienteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The data needed to update a Paciente.
     */
    data: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
    /**
     * Choose, which Paciente to update.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente updateMany
   */
  export type PacienteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
  }

  /**
   * Paciente updateManyAndReturn
   */
  export type PacienteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * The data used to update Pacientes.
     */
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyInput>
    /**
     * Filter which Pacientes to update
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Paciente upsert
   */
  export type PacienteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * The filter to search for the Paciente to update in case it exists.
     */
    where: PacienteWhereUniqueInput
    /**
     * In case the Paciente found by the `where` argument doesn't exist, create a new Paciente with this data.
     */
    create: XOR<PacienteCreateInput, PacienteUncheckedCreateInput>
    /**
     * In case the Paciente was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PacienteUpdateInput, PacienteUncheckedUpdateInput>
  }

  /**
   * Paciente delete
   */
  export type PacienteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    /**
     * Filter which Paciente to delete.
     */
    where: PacienteWhereUniqueInput
  }

  /**
   * Paciente deleteMany
   */
  export type PacienteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pacientes to delete
     */
    where?: PacienteWhereInput
    /**
     * Limit how many Pacientes to delete.
     */
    limit?: number
  }

  /**
   * Paciente.turnos
   */
  export type Paciente$turnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Paciente.coberturaMedica
   */
  export type Paciente$coberturaMedicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    where?: CoberturaMedicaWhereInput
  }

  /**
   * Paciente.createdBy
   */
  export type Paciente$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Paciente.updatedBy
   */
  export type Paciente$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Paciente without action
   */
  export type PacienteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
  }


  /**
   * Model Turno
   */

  export type AggregateTurno = {
    _count: TurnoCountAggregateOutputType | null
    _avg: TurnoAvgAggregateOutputType | null
    _sum: TurnoSumAggregateOutputType | null
    _min: TurnoMinAggregateOutputType | null
    _max: TurnoMaxAggregateOutputType | null
  }

  export type TurnoAvgAggregateOutputType = {
    duracion: number | null
  }

  export type TurnoSumAggregateOutputType = {
    duracion: number | null
  }

  export type TurnoMinAggregateOutputType = {
    id: string | null
    desde: Date | null
    hasta: Date | null
    servicio: string | null
    duracion: number | null
    pacienteId: string | null
    confirmado: boolean | null
    estado: string | null
    fhCambioEstado: Date | null
    hsAviso: string | null
    penal: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    consultorioId: string | null
    doctorId: string | null
    observaciones: string | null
    token: string | null
    coberturaMedicaId: string | null
    tipoDeTurnoId: string | null
  }

  export type TurnoMaxAggregateOutputType = {
    id: string | null
    desde: Date | null
    hasta: Date | null
    servicio: string | null
    duracion: number | null
    pacienteId: string | null
    confirmado: boolean | null
    estado: string | null
    fhCambioEstado: Date | null
    hsAviso: string | null
    penal: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    consultorioId: string | null
    doctorId: string | null
    observaciones: string | null
    token: string | null
    coberturaMedicaId: string | null
    tipoDeTurnoId: string | null
  }

  export type TurnoCountAggregateOutputType = {
    id: number
    desde: number
    hasta: number
    servicio: number
    duracion: number
    pacienteId: number
    confirmado: number
    estado: number
    fhCambioEstado: number
    hsAviso: number
    penal: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    consultorioId: number
    doctorId: number
    observaciones: number
    token: number
    coberturaMedicaId: number
    tipoDeTurnoId: number
    _all: number
  }


  export type TurnoAvgAggregateInputType = {
    duracion?: true
  }

  export type TurnoSumAggregateInputType = {
    duracion?: true
  }

  export type TurnoMinAggregateInputType = {
    id?: true
    desde?: true
    hasta?: true
    servicio?: true
    duracion?: true
    pacienteId?: true
    confirmado?: true
    estado?: true
    fhCambioEstado?: true
    hsAviso?: true
    penal?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    consultorioId?: true
    doctorId?: true
    observaciones?: true
    token?: true
    coberturaMedicaId?: true
    tipoDeTurnoId?: true
  }

  export type TurnoMaxAggregateInputType = {
    id?: true
    desde?: true
    hasta?: true
    servicio?: true
    duracion?: true
    pacienteId?: true
    confirmado?: true
    estado?: true
    fhCambioEstado?: true
    hsAviso?: true
    penal?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    consultorioId?: true
    doctorId?: true
    observaciones?: true
    token?: true
    coberturaMedicaId?: true
    tipoDeTurnoId?: true
  }

  export type TurnoCountAggregateInputType = {
    id?: true
    desde?: true
    hasta?: true
    servicio?: true
    duracion?: true
    pacienteId?: true
    confirmado?: true
    estado?: true
    fhCambioEstado?: true
    hsAviso?: true
    penal?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    consultorioId?: true
    doctorId?: true
    observaciones?: true
    token?: true
    coberturaMedicaId?: true
    tipoDeTurnoId?: true
    _all?: true
  }

  export type TurnoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turno to aggregate.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turnos
    **/
    _count?: true | TurnoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurnoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurnoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurnoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurnoMaxAggregateInputType
  }

  export type GetTurnoAggregateType<T extends TurnoAggregateArgs> = {
        [P in keyof T & keyof AggregateTurno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurno[P]>
      : GetScalarType<T[P], AggregateTurno[P]>
  }




  export type TurnoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithAggregationInput | TurnoOrderByWithAggregationInput[]
    by: TurnoScalarFieldEnum[] | TurnoScalarFieldEnum
    having?: TurnoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurnoCountAggregateInputType | true
    _avg?: TurnoAvgAggregateInputType
    _sum?: TurnoSumAggregateInputType
    _min?: TurnoMinAggregateInputType
    _max?: TurnoMaxAggregateInputType
  }

  export type TurnoGroupByOutputType = {
    id: string
    desde: Date
    hasta: Date
    servicio: string
    duracion: number
    pacienteId: string
    confirmado: boolean
    estado: string | null
    fhCambioEstado: Date | null
    hsAviso: string | null
    penal: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    consultorioId: string
    doctorId: string
    observaciones: string | null
    token: string | null
    coberturaMedicaId: string | null
    tipoDeTurnoId: string | null
    _count: TurnoCountAggregateOutputType | null
    _avg: TurnoAvgAggregateOutputType | null
    _sum: TurnoSumAggregateOutputType | null
    _min: TurnoMinAggregateOutputType | null
    _max: TurnoMaxAggregateOutputType | null
  }

  type GetTurnoGroupByPayload<T extends TurnoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurnoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurnoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurnoGroupByOutputType[P]>
            : GetScalarType<T[P], TurnoGroupByOutputType[P]>
        }
      >
    >


  export type TurnoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desde?: boolean
    hasta?: boolean
    servicio?: boolean
    duracion?: boolean
    pacienteId?: boolean
    confirmado?: boolean
    estado?: boolean
    fhCambioEstado?: boolean
    hsAviso?: boolean
    penal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    consultorioId?: boolean
    doctorId?: boolean
    observaciones?: boolean
    token?: boolean
    coberturaMedicaId?: boolean
    tipoDeTurnoId?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["turno"]>

  export type TurnoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desde?: boolean
    hasta?: boolean
    servicio?: boolean
    duracion?: boolean
    pacienteId?: boolean
    confirmado?: boolean
    estado?: boolean
    fhCambioEstado?: boolean
    hsAviso?: boolean
    penal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    consultorioId?: boolean
    doctorId?: boolean
    observaciones?: boolean
    token?: boolean
    coberturaMedicaId?: boolean
    tipoDeTurnoId?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["turno"]>

  export type TurnoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desde?: boolean
    hasta?: boolean
    servicio?: boolean
    duracion?: boolean
    pacienteId?: boolean
    confirmado?: boolean
    estado?: boolean
    fhCambioEstado?: boolean
    hsAviso?: boolean
    penal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    consultorioId?: boolean
    doctorId?: boolean
    observaciones?: boolean
    token?: boolean
    coberturaMedicaId?: boolean
    tipoDeTurnoId?: boolean
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["turno"]>

  export type TurnoSelectScalar = {
    id?: boolean
    desde?: boolean
    hasta?: boolean
    servicio?: boolean
    duracion?: boolean
    pacienteId?: boolean
    confirmado?: boolean
    estado?: boolean
    fhCambioEstado?: boolean
    hsAviso?: boolean
    penal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    consultorioId?: boolean
    doctorId?: boolean
    observaciones?: boolean
    token?: boolean
    coberturaMedicaId?: boolean
    tipoDeTurnoId?: boolean
  }

  export type TurnoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "desde" | "hasta" | "servicio" | "duracion" | "pacienteId" | "confirmado" | "estado" | "fhCambioEstado" | "hsAviso" | "penal" | "createdAt" | "updatedAt" | "createdById" | "updatedById" | "consultorioId" | "doctorId" | "observaciones" | "token" | "coberturaMedicaId" | "tipoDeTurnoId", ExtArgs["result"]["turno"]>
  export type TurnoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }
  export type TurnoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }
  export type TurnoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consultorio?: boolean | ConsultorioDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    paciente?: boolean | PacienteDefaultArgs<ExtArgs>
    coberturaMedica?: boolean | Turno$coberturaMedicaArgs<ExtArgs>
    tipoDeTurno?: boolean | Turno$tipoDeTurnoArgs<ExtArgs>
    createdBy?: boolean | Turno$createdByArgs<ExtArgs>
    updatedBy?: boolean | Turno$updatedByArgs<ExtArgs>
  }

  export type $TurnoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turno"
    objects: {
      consultorio: Prisma.$ConsultorioPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      paciente: Prisma.$PacientePayload<ExtArgs>
      coberturaMedica: Prisma.$CoberturaMedicaPayload<ExtArgs> | null
      tipoDeTurno: Prisma.$TipoTurnoDoctorPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      desde: Date
      hasta: Date
      servicio: string
      duracion: number
      pacienteId: string
      confirmado: boolean
      estado: string | null
      fhCambioEstado: Date | null
      hsAviso: string | null
      penal: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
      consultorioId: string
      doctorId: string
      observaciones: string | null
      token: string | null
      coberturaMedicaId: string | null
      tipoDeTurnoId: string | null
    }, ExtArgs["result"]["turno"]>
    composites: {}
  }

  type TurnoGetPayload<S extends boolean | null | undefined | TurnoDefaultArgs> = $Result.GetResult<Prisma.$TurnoPayload, S>

  type TurnoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TurnoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TurnoCountAggregateInputType | true
    }

  export interface TurnoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turno'], meta: { name: 'Turno' } }
    /**
     * Find zero or one Turno that matches the filter.
     * @param {TurnoFindUniqueArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurnoFindUniqueArgs>(args: SelectSubset<T, TurnoFindUniqueArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Turno that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TurnoFindUniqueOrThrowArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurnoFindUniqueOrThrowArgs>(args: SelectSubset<T, TurnoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindFirstArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurnoFindFirstArgs>(args?: SelectSubset<T, TurnoFindFirstArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Turno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindFirstOrThrowArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurnoFindFirstOrThrowArgs>(args?: SelectSubset<T, TurnoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Turnos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turnos
     * const turnos = await prisma.turno.findMany()
     * 
     * // Get first 10 Turnos
     * const turnos = await prisma.turno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turnoWithIdOnly = await prisma.turno.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurnoFindManyArgs>(args?: SelectSubset<T, TurnoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Turno.
     * @param {TurnoCreateArgs} args - Arguments to create a Turno.
     * @example
     * // Create one Turno
     * const Turno = await prisma.turno.create({
     *   data: {
     *     // ... data to create a Turno
     *   }
     * })
     * 
     */
    create<T extends TurnoCreateArgs>(args: SelectSubset<T, TurnoCreateArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Turnos.
     * @param {TurnoCreateManyArgs} args - Arguments to create many Turnos.
     * @example
     * // Create many Turnos
     * const turno = await prisma.turno.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurnoCreateManyArgs>(args?: SelectSubset<T, TurnoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Turnos and returns the data saved in the database.
     * @param {TurnoCreateManyAndReturnArgs} args - Arguments to create many Turnos.
     * @example
     * // Create many Turnos
     * const turno = await prisma.turno.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Turnos and only return the `id`
     * const turnoWithIdOnly = await prisma.turno.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurnoCreateManyAndReturnArgs>(args?: SelectSubset<T, TurnoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Turno.
     * @param {TurnoDeleteArgs} args - Arguments to delete one Turno.
     * @example
     * // Delete one Turno
     * const Turno = await prisma.turno.delete({
     *   where: {
     *     // ... filter to delete one Turno
     *   }
     * })
     * 
     */
    delete<T extends TurnoDeleteArgs>(args: SelectSubset<T, TurnoDeleteArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Turno.
     * @param {TurnoUpdateArgs} args - Arguments to update one Turno.
     * @example
     * // Update one Turno
     * const turno = await prisma.turno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurnoUpdateArgs>(args: SelectSubset<T, TurnoUpdateArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Turnos.
     * @param {TurnoDeleteManyArgs} args - Arguments to filter Turnos to delete.
     * @example
     * // Delete a few Turnos
     * const { count } = await prisma.turno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurnoDeleteManyArgs>(args?: SelectSubset<T, TurnoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turnos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turnos
     * const turno = await prisma.turno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurnoUpdateManyArgs>(args: SelectSubset<T, TurnoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turnos and returns the data updated in the database.
     * @param {TurnoUpdateManyAndReturnArgs} args - Arguments to update many Turnos.
     * @example
     * // Update many Turnos
     * const turno = await prisma.turno.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Turnos and only return the `id`
     * const turnoWithIdOnly = await prisma.turno.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TurnoUpdateManyAndReturnArgs>(args: SelectSubset<T, TurnoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Turno.
     * @param {TurnoUpsertArgs} args - Arguments to update or create a Turno.
     * @example
     * // Update or create a Turno
     * const turno = await prisma.turno.upsert({
     *   create: {
     *     // ... data to create a Turno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turno we want to update
     *   }
     * })
     */
    upsert<T extends TurnoUpsertArgs>(args: SelectSubset<T, TurnoUpsertArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Turnos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoCountArgs} args - Arguments to filter Turnos to count.
     * @example
     * // Count the number of Turnos
     * const count = await prisma.turno.count({
     *   where: {
     *     // ... the filter for the Turnos we want to count
     *   }
     * })
    **/
    count<T extends TurnoCountArgs>(
      args?: Subset<T, TurnoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurnoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurnoAggregateArgs>(args: Subset<T, TurnoAggregateArgs>): Prisma.PrismaPromise<GetTurnoAggregateType<T>>

    /**
     * Group by Turno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurnoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurnoGroupByArgs['orderBy'] }
        : { orderBy?: TurnoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurnoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurnoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turno model
   */
  readonly fields: TurnoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurnoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    consultorio<T extends ConsultorioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultorioDefaultArgs<ExtArgs>>): Prisma__ConsultorioClient<$Result.GetResult<Prisma.$ConsultorioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    paciente<T extends PacienteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PacienteDefaultArgs<ExtArgs>>): Prisma__PacienteClient<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    coberturaMedica<T extends Turno$coberturaMedicaArgs<ExtArgs> = {}>(args?: Subset<T, Turno$coberturaMedicaArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tipoDeTurno<T extends Turno$tipoDeTurnoArgs<ExtArgs> = {}>(args?: Subset<T, Turno$tipoDeTurnoArgs<ExtArgs>>): Prisma__TipoTurnoDoctorClient<$Result.GetResult<Prisma.$TipoTurnoDoctorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Turno$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Turno$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Turno$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Turno$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Turno model
   */
  interface TurnoFieldRefs {
    readonly id: FieldRef<"Turno", 'String'>
    readonly desde: FieldRef<"Turno", 'DateTime'>
    readonly hasta: FieldRef<"Turno", 'DateTime'>
    readonly servicio: FieldRef<"Turno", 'String'>
    readonly duracion: FieldRef<"Turno", 'Int'>
    readonly pacienteId: FieldRef<"Turno", 'String'>
    readonly confirmado: FieldRef<"Turno", 'Boolean'>
    readonly estado: FieldRef<"Turno", 'String'>
    readonly fhCambioEstado: FieldRef<"Turno", 'DateTime'>
    readonly hsAviso: FieldRef<"Turno", 'String'>
    readonly penal: FieldRef<"Turno", 'String'>
    readonly createdAt: FieldRef<"Turno", 'DateTime'>
    readonly updatedAt: FieldRef<"Turno", 'DateTime'>
    readonly createdById: FieldRef<"Turno", 'String'>
    readonly updatedById: FieldRef<"Turno", 'String'>
    readonly consultorioId: FieldRef<"Turno", 'String'>
    readonly doctorId: FieldRef<"Turno", 'String'>
    readonly observaciones: FieldRef<"Turno", 'String'>
    readonly token: FieldRef<"Turno", 'String'>
    readonly coberturaMedicaId: FieldRef<"Turno", 'String'>
    readonly tipoDeTurnoId: FieldRef<"Turno", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Turno findUnique
   */
  export type TurnoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno findUniqueOrThrow
   */
  export type TurnoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno findFirst
   */
  export type TurnoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turnos.
     */
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno findFirstOrThrow
   */
  export type TurnoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turnos.
     */
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno findMany
   */
  export type TurnoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turnos to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno create
   */
  export type TurnoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The data needed to create a Turno.
     */
    data: XOR<TurnoCreateInput, TurnoUncheckedCreateInput>
  }

  /**
   * Turno createMany
   */
  export type TurnoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turnos.
     */
    data: TurnoCreateManyInput | TurnoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turno createManyAndReturn
   */
  export type TurnoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * The data used to create many Turnos.
     */
    data: TurnoCreateManyInput | TurnoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Turno update
   */
  export type TurnoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The data needed to update a Turno.
     */
    data: XOR<TurnoUpdateInput, TurnoUncheckedUpdateInput>
    /**
     * Choose, which Turno to update.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno updateMany
   */
  export type TurnoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turnos.
     */
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyInput>
    /**
     * Filter which Turnos to update
     */
    where?: TurnoWhereInput
    /**
     * Limit how many Turnos to update.
     */
    limit?: number
  }

  /**
   * Turno updateManyAndReturn
   */
  export type TurnoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * The data used to update Turnos.
     */
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyInput>
    /**
     * Filter which Turnos to update
     */
    where?: TurnoWhereInput
    /**
     * Limit how many Turnos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Turno upsert
   */
  export type TurnoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The filter to search for the Turno to update in case it exists.
     */
    where: TurnoWhereUniqueInput
    /**
     * In case the Turno found by the `where` argument doesn't exist, create a new Turno with this data.
     */
    create: XOR<TurnoCreateInput, TurnoUncheckedCreateInput>
    /**
     * In case the Turno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurnoUpdateInput, TurnoUncheckedUpdateInput>
  }

  /**
   * Turno delete
   */
  export type TurnoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter which Turno to delete.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno deleteMany
   */
  export type TurnoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turnos to delete
     */
    where?: TurnoWhereInput
    /**
     * Limit how many Turnos to delete.
     */
    limit?: number
  }

  /**
   * Turno.coberturaMedica
   */
  export type Turno$coberturaMedicaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    where?: CoberturaMedicaWhereInput
  }

  /**
   * Turno.tipoDeTurno
   */
  export type Turno$tipoDeTurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TipoTurnoDoctor
     */
    select?: TipoTurnoDoctorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TipoTurnoDoctor
     */
    omit?: TipoTurnoDoctorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TipoTurnoDoctorInclude<ExtArgs> | null
    where?: TipoTurnoDoctorWhereInput
  }

  /**
   * Turno.createdBy
   */
  export type Turno$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Turno.updatedBy
   */
  export type Turno$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Turno without action
   */
  export type TurnoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
  }


  /**
   * Model EmailToken
   */

  export type AggregateEmailToken = {
    _count: EmailTokenCountAggregateOutputType | null
    _min: EmailTokenMinAggregateOutputType | null
    _max: EmailTokenMaxAggregateOutputType | null
  }

  export type EmailTokenMinAggregateOutputType = {
    email: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTokenMaxAggregateOutputType = {
    email: string | null
    token: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailTokenCountAggregateOutputType = {
    email: number
    token: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailTokenMinAggregateInputType = {
    email?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTokenMaxAggregateInputType = {
    email?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailTokenCountAggregateInputType = {
    email?: true
    token?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailToken to aggregate.
     */
    where?: EmailTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTokens to fetch.
     */
    orderBy?: EmailTokenOrderByWithRelationInput | EmailTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailTokens
    **/
    _count?: true | EmailTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailTokenMaxAggregateInputType
  }

  export type GetEmailTokenAggregateType<T extends EmailTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailToken[P]>
      : GetScalarType<T[P], AggregateEmailToken[P]>
  }




  export type EmailTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailTokenWhereInput
    orderBy?: EmailTokenOrderByWithAggregationInput | EmailTokenOrderByWithAggregationInput[]
    by: EmailTokenScalarFieldEnum[] | EmailTokenScalarFieldEnum
    having?: EmailTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailTokenCountAggregateInputType | true
    _min?: EmailTokenMinAggregateInputType
    _max?: EmailTokenMaxAggregateInputType
  }

  export type EmailTokenGroupByOutputType = {
    email: string
    token: string
    expires: Date
    createdAt: Date
    updatedAt: Date
    _count: EmailTokenCountAggregateOutputType | null
    _min: EmailTokenMinAggregateOutputType | null
    _max: EmailTokenMaxAggregateOutputType | null
  }

  type GetEmailTokenGroupByPayload<T extends EmailTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailTokenGroupByOutputType[P]>
            : GetScalarType<T[P], EmailTokenGroupByOutputType[P]>
        }
      >
    >


  export type EmailTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailToken"]>

  export type EmailTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailToken"]>

  export type EmailTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["emailToken"]>

  export type EmailTokenSelectScalar = {
    email?: boolean
    token?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"email" | "token" | "expires" | "createdAt" | "updatedAt", ExtArgs["result"]["emailToken"]>

  export type $EmailTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      email: string
      token: string
      expires: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailToken"]>
    composites: {}
  }

  type EmailTokenGetPayload<S extends boolean | null | undefined | EmailTokenDefaultArgs> = $Result.GetResult<Prisma.$EmailTokenPayload, S>

  type EmailTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailTokenCountAggregateInputType | true
    }

  export interface EmailTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailToken'], meta: { name: 'EmailToken' } }
    /**
     * Find zero or one EmailToken that matches the filter.
     * @param {EmailTokenFindUniqueArgs} args - Arguments to find a EmailToken
     * @example
     * // Get one EmailToken
     * const emailToken = await prisma.emailToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailTokenFindUniqueArgs>(args: SelectSubset<T, EmailTokenFindUniqueArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailTokenFindUniqueOrThrowArgs} args - Arguments to find a EmailToken
     * @example
     * // Get one EmailToken
     * const emailToken = await prisma.emailToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenFindFirstArgs} args - Arguments to find a EmailToken
     * @example
     * // Get one EmailToken
     * const emailToken = await prisma.emailToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailTokenFindFirstArgs>(args?: SelectSubset<T, EmailTokenFindFirstArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenFindFirstOrThrowArgs} args - Arguments to find a EmailToken
     * @example
     * // Get one EmailToken
     * const emailToken = await prisma.emailToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailTokens
     * const emailTokens = await prisma.emailToken.findMany()
     * 
     * // Get first 10 EmailTokens
     * const emailTokens = await prisma.emailToken.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const emailTokenWithEmailOnly = await prisma.emailToken.findMany({ select: { email: true } })
     * 
     */
    findMany<T extends EmailTokenFindManyArgs>(args?: SelectSubset<T, EmailTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailToken.
     * @param {EmailTokenCreateArgs} args - Arguments to create a EmailToken.
     * @example
     * // Create one EmailToken
     * const EmailToken = await prisma.emailToken.create({
     *   data: {
     *     // ... data to create a EmailToken
     *   }
     * })
     * 
     */
    create<T extends EmailTokenCreateArgs>(args: SelectSubset<T, EmailTokenCreateArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailTokens.
     * @param {EmailTokenCreateManyArgs} args - Arguments to create many EmailTokens.
     * @example
     * // Create many EmailTokens
     * const emailToken = await prisma.emailToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailTokenCreateManyArgs>(args?: SelectSubset<T, EmailTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailTokens and returns the data saved in the database.
     * @param {EmailTokenCreateManyAndReturnArgs} args - Arguments to create many EmailTokens.
     * @example
     * // Create many EmailTokens
     * const emailToken = await prisma.emailToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailTokens and only return the `email`
     * const emailTokenWithEmailOnly = await prisma.emailToken.createManyAndReturn({
     *   select: { email: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EmailToken.
     * @param {EmailTokenDeleteArgs} args - Arguments to delete one EmailToken.
     * @example
     * // Delete one EmailToken
     * const EmailToken = await prisma.emailToken.delete({
     *   where: {
     *     // ... filter to delete one EmailToken
     *   }
     * })
     * 
     */
    delete<T extends EmailTokenDeleteArgs>(args: SelectSubset<T, EmailTokenDeleteArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailToken.
     * @param {EmailTokenUpdateArgs} args - Arguments to update one EmailToken.
     * @example
     * // Update one EmailToken
     * const emailToken = await prisma.emailToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailTokenUpdateArgs>(args: SelectSubset<T, EmailTokenUpdateArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailTokens.
     * @param {EmailTokenDeleteManyArgs} args - Arguments to filter EmailTokens to delete.
     * @example
     * // Delete a few EmailTokens
     * const { count } = await prisma.emailToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailTokenDeleteManyArgs>(args?: SelectSubset<T, EmailTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailTokens
     * const emailToken = await prisma.emailToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailTokenUpdateManyArgs>(args: SelectSubset<T, EmailTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailTokens and returns the data updated in the database.
     * @param {EmailTokenUpdateManyAndReturnArgs} args - Arguments to update many EmailTokens.
     * @example
     * // Update many EmailTokens
     * const emailToken = await prisma.emailToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailTokens and only return the `email`
     * const emailTokenWithEmailOnly = await prisma.emailToken.updateManyAndReturn({
     *   select: { email: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EmailToken.
     * @param {EmailTokenUpsertArgs} args - Arguments to update or create a EmailToken.
     * @example
     * // Update or create a EmailToken
     * const emailToken = await prisma.emailToken.upsert({
     *   create: {
     *     // ... data to create a EmailToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailToken we want to update
     *   }
     * })
     */
    upsert<T extends EmailTokenUpsertArgs>(args: SelectSubset<T, EmailTokenUpsertArgs<ExtArgs>>): Prisma__EmailTokenClient<$Result.GetResult<Prisma.$EmailTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenCountArgs} args - Arguments to filter EmailTokens to count.
     * @example
     * // Count the number of EmailTokens
     * const count = await prisma.emailToken.count({
     *   where: {
     *     // ... the filter for the EmailTokens we want to count
     *   }
     * })
    **/
    count<T extends EmailTokenCountArgs>(
      args?: Subset<T, EmailTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailTokenAggregateArgs>(args: Subset<T, EmailTokenAggregateArgs>): Prisma.PrismaPromise<GetEmailTokenAggregateType<T>>

    /**
     * Group by EmailToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailTokenGroupByArgs['orderBy'] }
        : { orderBy?: EmailTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailToken model
   */
  readonly fields: EmailTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailToken model
   */
  interface EmailTokenFieldRefs {
    readonly email: FieldRef<"EmailToken", 'String'>
    readonly token: FieldRef<"EmailToken", 'String'>
    readonly expires: FieldRef<"EmailToken", 'DateTime'>
    readonly createdAt: FieldRef<"EmailToken", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailToken findUnique
   */
  export type EmailTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter, which EmailToken to fetch.
     */
    where: EmailTokenWhereUniqueInput
  }

  /**
   * EmailToken findUniqueOrThrow
   */
  export type EmailTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter, which EmailToken to fetch.
     */
    where: EmailTokenWhereUniqueInput
  }

  /**
   * EmailToken findFirst
   */
  export type EmailTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter, which EmailToken to fetch.
     */
    where?: EmailTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTokens to fetch.
     */
    orderBy?: EmailTokenOrderByWithRelationInput | EmailTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTokens.
     */
    cursor?: EmailTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTokens.
     */
    distinct?: EmailTokenScalarFieldEnum | EmailTokenScalarFieldEnum[]
  }

  /**
   * EmailToken findFirstOrThrow
   */
  export type EmailTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter, which EmailToken to fetch.
     */
    where?: EmailTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTokens to fetch.
     */
    orderBy?: EmailTokenOrderByWithRelationInput | EmailTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailTokens.
     */
    cursor?: EmailTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailTokens.
     */
    distinct?: EmailTokenScalarFieldEnum | EmailTokenScalarFieldEnum[]
  }

  /**
   * EmailToken findMany
   */
  export type EmailTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter, which EmailTokens to fetch.
     */
    where?: EmailTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailTokens to fetch.
     */
    orderBy?: EmailTokenOrderByWithRelationInput | EmailTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailTokens.
     */
    cursor?: EmailTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailTokens.
     */
    skip?: number
    distinct?: EmailTokenScalarFieldEnum | EmailTokenScalarFieldEnum[]
  }

  /**
   * EmailToken create
   */
  export type EmailTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a EmailToken.
     */
    data: XOR<EmailTokenCreateInput, EmailTokenUncheckedCreateInput>
  }

  /**
   * EmailToken createMany
   */
  export type EmailTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailTokens.
     */
    data: EmailTokenCreateManyInput | EmailTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailToken createManyAndReturn
   */
  export type EmailTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * The data used to create many EmailTokens.
     */
    data: EmailTokenCreateManyInput | EmailTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailToken update
   */
  export type EmailTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a EmailToken.
     */
    data: XOR<EmailTokenUpdateInput, EmailTokenUncheckedUpdateInput>
    /**
     * Choose, which EmailToken to update.
     */
    where: EmailTokenWhereUniqueInput
  }

  /**
   * EmailToken updateMany
   */
  export type EmailTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailTokens.
     */
    data: XOR<EmailTokenUpdateManyMutationInput, EmailTokenUncheckedUpdateManyInput>
    /**
     * Filter which EmailTokens to update
     */
    where?: EmailTokenWhereInput
    /**
     * Limit how many EmailTokens to update.
     */
    limit?: number
  }

  /**
   * EmailToken updateManyAndReturn
   */
  export type EmailTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * The data used to update EmailTokens.
     */
    data: XOR<EmailTokenUpdateManyMutationInput, EmailTokenUncheckedUpdateManyInput>
    /**
     * Filter which EmailTokens to update
     */
    where?: EmailTokenWhereInput
    /**
     * Limit how many EmailTokens to update.
     */
    limit?: number
  }

  /**
   * EmailToken upsert
   */
  export type EmailTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the EmailToken to update in case it exists.
     */
    where: EmailTokenWhereUniqueInput
    /**
     * In case the EmailToken found by the `where` argument doesn't exist, create a new EmailToken with this data.
     */
    create: XOR<EmailTokenCreateInput, EmailTokenUncheckedCreateInput>
    /**
     * In case the EmailToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailTokenUpdateInput, EmailTokenUncheckedUpdateInput>
  }

  /**
   * EmailToken delete
   */
  export type EmailTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
    /**
     * Filter which EmailToken to delete.
     */
    where: EmailTokenWhereUniqueInput
  }

  /**
   * EmailToken deleteMany
   */
  export type EmailTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailTokens to delete
     */
    where?: EmailTokenWhereInput
    /**
     * Limit how many EmailTokens to delete.
     */
    limit?: number
  }

  /**
   * EmailToken without action
   */
  export type EmailTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailToken
     */
    select?: EmailTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailToken
     */
    omit?: EmailTokenOmit<ExtArgs> | null
  }


  /**
   * Model CoberturaMedica
   */

  export type AggregateCoberturaMedica = {
    _count: CoberturaMedicaCountAggregateOutputType | null
    _min: CoberturaMedicaMinAggregateOutputType | null
    _max: CoberturaMedicaMaxAggregateOutputType | null
  }

  export type CoberturaMedicaMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    codigo: string | null
    habilitado: boolean | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoberturaMedicaMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    codigo: string | null
    habilitado: boolean | null
    color: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoberturaMedicaCountAggregateOutputType = {
    id: number
    nombre: number
    codigo: number
    habilitado: number
    color: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoberturaMedicaMinAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    habilitado?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoberturaMedicaMaxAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    habilitado?: true
    color?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoberturaMedicaCountAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    habilitado?: true
    color?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoberturaMedicaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoberturaMedica to aggregate.
     */
    where?: CoberturaMedicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoberturaMedicas to fetch.
     */
    orderBy?: CoberturaMedicaOrderByWithRelationInput | CoberturaMedicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoberturaMedicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoberturaMedicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoberturaMedicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoberturaMedicas
    **/
    _count?: true | CoberturaMedicaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoberturaMedicaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoberturaMedicaMaxAggregateInputType
  }

  export type GetCoberturaMedicaAggregateType<T extends CoberturaMedicaAggregateArgs> = {
        [P in keyof T & keyof AggregateCoberturaMedica]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoberturaMedica[P]>
      : GetScalarType<T[P], AggregateCoberturaMedica[P]>
  }




  export type CoberturaMedicaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoberturaMedicaWhereInput
    orderBy?: CoberturaMedicaOrderByWithAggregationInput | CoberturaMedicaOrderByWithAggregationInput[]
    by: CoberturaMedicaScalarFieldEnum[] | CoberturaMedicaScalarFieldEnum
    having?: CoberturaMedicaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoberturaMedicaCountAggregateInputType | true
    _min?: CoberturaMedicaMinAggregateInputType
    _max?: CoberturaMedicaMaxAggregateInputType
  }

  export type CoberturaMedicaGroupByOutputType = {
    id: string
    nombre: string
    codigo: string | null
    habilitado: boolean
    color: string | null
    createdAt: Date
    updatedAt: Date
    _count: CoberturaMedicaCountAggregateOutputType | null
    _min: CoberturaMedicaMinAggregateOutputType | null
    _max: CoberturaMedicaMaxAggregateOutputType | null
  }

  type GetCoberturaMedicaGroupByPayload<T extends CoberturaMedicaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoberturaMedicaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoberturaMedicaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoberturaMedicaGroupByOutputType[P]>
            : GetScalarType<T[P], CoberturaMedicaGroupByOutputType[P]>
        }
      >
    >


  export type CoberturaMedicaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    habilitado?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pacientes?: boolean | CoberturaMedica$pacientesArgs<ExtArgs>
    turnos?: boolean | CoberturaMedica$turnosArgs<ExtArgs>
    _count?: boolean | CoberturaMedicaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coberturaMedica"]>

  export type CoberturaMedicaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    habilitado?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coberturaMedica"]>

  export type CoberturaMedicaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    habilitado?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["coberturaMedica"]>

  export type CoberturaMedicaSelectScalar = {
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    habilitado?: boolean
    color?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoberturaMedicaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "codigo" | "habilitado" | "color" | "createdAt" | "updatedAt", ExtArgs["result"]["coberturaMedica"]>
  export type CoberturaMedicaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pacientes?: boolean | CoberturaMedica$pacientesArgs<ExtArgs>
    turnos?: boolean | CoberturaMedica$turnosArgs<ExtArgs>
    _count?: boolean | CoberturaMedicaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CoberturaMedicaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CoberturaMedicaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CoberturaMedicaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoberturaMedica"
    objects: {
      pacientes: Prisma.$PacientePayload<ExtArgs>[]
      turnos: Prisma.$TurnoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      codigo: string | null
      habilitado: boolean
      color: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coberturaMedica"]>
    composites: {}
  }

  type CoberturaMedicaGetPayload<S extends boolean | null | undefined | CoberturaMedicaDefaultArgs> = $Result.GetResult<Prisma.$CoberturaMedicaPayload, S>

  type CoberturaMedicaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoberturaMedicaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoberturaMedicaCountAggregateInputType | true
    }

  export interface CoberturaMedicaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoberturaMedica'], meta: { name: 'CoberturaMedica' } }
    /**
     * Find zero or one CoberturaMedica that matches the filter.
     * @param {CoberturaMedicaFindUniqueArgs} args - Arguments to find a CoberturaMedica
     * @example
     * // Get one CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoberturaMedicaFindUniqueArgs>(args: SelectSubset<T, CoberturaMedicaFindUniqueArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoberturaMedica that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoberturaMedicaFindUniqueOrThrowArgs} args - Arguments to find a CoberturaMedica
     * @example
     * // Get one CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoberturaMedicaFindUniqueOrThrowArgs>(args: SelectSubset<T, CoberturaMedicaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoberturaMedica that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaFindFirstArgs} args - Arguments to find a CoberturaMedica
     * @example
     * // Get one CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoberturaMedicaFindFirstArgs>(args?: SelectSubset<T, CoberturaMedicaFindFirstArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoberturaMedica that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaFindFirstOrThrowArgs} args - Arguments to find a CoberturaMedica
     * @example
     * // Get one CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoberturaMedicaFindFirstOrThrowArgs>(args?: SelectSubset<T, CoberturaMedicaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoberturaMedicas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoberturaMedicas
     * const coberturaMedicas = await prisma.coberturaMedica.findMany()
     * 
     * // Get first 10 CoberturaMedicas
     * const coberturaMedicas = await prisma.coberturaMedica.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coberturaMedicaWithIdOnly = await prisma.coberturaMedica.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoberturaMedicaFindManyArgs>(args?: SelectSubset<T, CoberturaMedicaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoberturaMedica.
     * @param {CoberturaMedicaCreateArgs} args - Arguments to create a CoberturaMedica.
     * @example
     * // Create one CoberturaMedica
     * const CoberturaMedica = await prisma.coberturaMedica.create({
     *   data: {
     *     // ... data to create a CoberturaMedica
     *   }
     * })
     * 
     */
    create<T extends CoberturaMedicaCreateArgs>(args: SelectSubset<T, CoberturaMedicaCreateArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoberturaMedicas.
     * @param {CoberturaMedicaCreateManyArgs} args - Arguments to create many CoberturaMedicas.
     * @example
     * // Create many CoberturaMedicas
     * const coberturaMedica = await prisma.coberturaMedica.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoberturaMedicaCreateManyArgs>(args?: SelectSubset<T, CoberturaMedicaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoberturaMedicas and returns the data saved in the database.
     * @param {CoberturaMedicaCreateManyAndReturnArgs} args - Arguments to create many CoberturaMedicas.
     * @example
     * // Create many CoberturaMedicas
     * const coberturaMedica = await prisma.coberturaMedica.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoberturaMedicas and only return the `id`
     * const coberturaMedicaWithIdOnly = await prisma.coberturaMedica.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoberturaMedicaCreateManyAndReturnArgs>(args?: SelectSubset<T, CoberturaMedicaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoberturaMedica.
     * @param {CoberturaMedicaDeleteArgs} args - Arguments to delete one CoberturaMedica.
     * @example
     * // Delete one CoberturaMedica
     * const CoberturaMedica = await prisma.coberturaMedica.delete({
     *   where: {
     *     // ... filter to delete one CoberturaMedica
     *   }
     * })
     * 
     */
    delete<T extends CoberturaMedicaDeleteArgs>(args: SelectSubset<T, CoberturaMedicaDeleteArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoberturaMedica.
     * @param {CoberturaMedicaUpdateArgs} args - Arguments to update one CoberturaMedica.
     * @example
     * // Update one CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoberturaMedicaUpdateArgs>(args: SelectSubset<T, CoberturaMedicaUpdateArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoberturaMedicas.
     * @param {CoberturaMedicaDeleteManyArgs} args - Arguments to filter CoberturaMedicas to delete.
     * @example
     * // Delete a few CoberturaMedicas
     * const { count } = await prisma.coberturaMedica.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoberturaMedicaDeleteManyArgs>(args?: SelectSubset<T, CoberturaMedicaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoberturaMedicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoberturaMedicas
     * const coberturaMedica = await prisma.coberturaMedica.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoberturaMedicaUpdateManyArgs>(args: SelectSubset<T, CoberturaMedicaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoberturaMedicas and returns the data updated in the database.
     * @param {CoberturaMedicaUpdateManyAndReturnArgs} args - Arguments to update many CoberturaMedicas.
     * @example
     * // Update many CoberturaMedicas
     * const coberturaMedica = await prisma.coberturaMedica.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoberturaMedicas and only return the `id`
     * const coberturaMedicaWithIdOnly = await prisma.coberturaMedica.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoberturaMedicaUpdateManyAndReturnArgs>(args: SelectSubset<T, CoberturaMedicaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoberturaMedica.
     * @param {CoberturaMedicaUpsertArgs} args - Arguments to update or create a CoberturaMedica.
     * @example
     * // Update or create a CoberturaMedica
     * const coberturaMedica = await prisma.coberturaMedica.upsert({
     *   create: {
     *     // ... data to create a CoberturaMedica
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoberturaMedica we want to update
     *   }
     * })
     */
    upsert<T extends CoberturaMedicaUpsertArgs>(args: SelectSubset<T, CoberturaMedicaUpsertArgs<ExtArgs>>): Prisma__CoberturaMedicaClient<$Result.GetResult<Prisma.$CoberturaMedicaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoberturaMedicas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaCountArgs} args - Arguments to filter CoberturaMedicas to count.
     * @example
     * // Count the number of CoberturaMedicas
     * const count = await prisma.coberturaMedica.count({
     *   where: {
     *     // ... the filter for the CoberturaMedicas we want to count
     *   }
     * })
    **/
    count<T extends CoberturaMedicaCountArgs>(
      args?: Subset<T, CoberturaMedicaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoberturaMedicaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoberturaMedica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoberturaMedicaAggregateArgs>(args: Subset<T, CoberturaMedicaAggregateArgs>): Prisma.PrismaPromise<GetCoberturaMedicaAggregateType<T>>

    /**
     * Group by CoberturaMedica.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoberturaMedicaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoberturaMedicaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoberturaMedicaGroupByArgs['orderBy'] }
        : { orderBy?: CoberturaMedicaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoberturaMedicaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoberturaMedicaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoberturaMedica model
   */
  readonly fields: CoberturaMedicaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoberturaMedica.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoberturaMedicaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pacientes<T extends CoberturaMedica$pacientesArgs<ExtArgs> = {}>(args?: Subset<T, CoberturaMedica$pacientesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PacientePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    turnos<T extends CoberturaMedica$turnosArgs<ExtArgs> = {}>(args?: Subset<T, CoberturaMedica$turnosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoberturaMedica model
   */
  interface CoberturaMedicaFieldRefs {
    readonly id: FieldRef<"CoberturaMedica", 'String'>
    readonly nombre: FieldRef<"CoberturaMedica", 'String'>
    readonly codigo: FieldRef<"CoberturaMedica", 'String'>
    readonly habilitado: FieldRef<"CoberturaMedica", 'Boolean'>
    readonly color: FieldRef<"CoberturaMedica", 'String'>
    readonly createdAt: FieldRef<"CoberturaMedica", 'DateTime'>
    readonly updatedAt: FieldRef<"CoberturaMedica", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoberturaMedica findUnique
   */
  export type CoberturaMedicaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter, which CoberturaMedica to fetch.
     */
    where: CoberturaMedicaWhereUniqueInput
  }

  /**
   * CoberturaMedica findUniqueOrThrow
   */
  export type CoberturaMedicaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter, which CoberturaMedica to fetch.
     */
    where: CoberturaMedicaWhereUniqueInput
  }

  /**
   * CoberturaMedica findFirst
   */
  export type CoberturaMedicaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter, which CoberturaMedica to fetch.
     */
    where?: CoberturaMedicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoberturaMedicas to fetch.
     */
    orderBy?: CoberturaMedicaOrderByWithRelationInput | CoberturaMedicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoberturaMedicas.
     */
    cursor?: CoberturaMedicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoberturaMedicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoberturaMedicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoberturaMedicas.
     */
    distinct?: CoberturaMedicaScalarFieldEnum | CoberturaMedicaScalarFieldEnum[]
  }

  /**
   * CoberturaMedica findFirstOrThrow
   */
  export type CoberturaMedicaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter, which CoberturaMedica to fetch.
     */
    where?: CoberturaMedicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoberturaMedicas to fetch.
     */
    orderBy?: CoberturaMedicaOrderByWithRelationInput | CoberturaMedicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoberturaMedicas.
     */
    cursor?: CoberturaMedicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoberturaMedicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoberturaMedicas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoberturaMedicas.
     */
    distinct?: CoberturaMedicaScalarFieldEnum | CoberturaMedicaScalarFieldEnum[]
  }

  /**
   * CoberturaMedica findMany
   */
  export type CoberturaMedicaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter, which CoberturaMedicas to fetch.
     */
    where?: CoberturaMedicaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoberturaMedicas to fetch.
     */
    orderBy?: CoberturaMedicaOrderByWithRelationInput | CoberturaMedicaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoberturaMedicas.
     */
    cursor?: CoberturaMedicaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoberturaMedicas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoberturaMedicas.
     */
    skip?: number
    distinct?: CoberturaMedicaScalarFieldEnum | CoberturaMedicaScalarFieldEnum[]
  }

  /**
   * CoberturaMedica create
   */
  export type CoberturaMedicaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * The data needed to create a CoberturaMedica.
     */
    data: XOR<CoberturaMedicaCreateInput, CoberturaMedicaUncheckedCreateInput>
  }

  /**
   * CoberturaMedica createMany
   */
  export type CoberturaMedicaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoberturaMedicas.
     */
    data: CoberturaMedicaCreateManyInput | CoberturaMedicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoberturaMedica createManyAndReturn
   */
  export type CoberturaMedicaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * The data used to create many CoberturaMedicas.
     */
    data: CoberturaMedicaCreateManyInput | CoberturaMedicaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoberturaMedica update
   */
  export type CoberturaMedicaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * The data needed to update a CoberturaMedica.
     */
    data: XOR<CoberturaMedicaUpdateInput, CoberturaMedicaUncheckedUpdateInput>
    /**
     * Choose, which CoberturaMedica to update.
     */
    where: CoberturaMedicaWhereUniqueInput
  }

  /**
   * CoberturaMedica updateMany
   */
  export type CoberturaMedicaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoberturaMedicas.
     */
    data: XOR<CoberturaMedicaUpdateManyMutationInput, CoberturaMedicaUncheckedUpdateManyInput>
    /**
     * Filter which CoberturaMedicas to update
     */
    where?: CoberturaMedicaWhereInput
    /**
     * Limit how many CoberturaMedicas to update.
     */
    limit?: number
  }

  /**
   * CoberturaMedica updateManyAndReturn
   */
  export type CoberturaMedicaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * The data used to update CoberturaMedicas.
     */
    data: XOR<CoberturaMedicaUpdateManyMutationInput, CoberturaMedicaUncheckedUpdateManyInput>
    /**
     * Filter which CoberturaMedicas to update
     */
    where?: CoberturaMedicaWhereInput
    /**
     * Limit how many CoberturaMedicas to update.
     */
    limit?: number
  }

  /**
   * CoberturaMedica upsert
   */
  export type CoberturaMedicaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * The filter to search for the CoberturaMedica to update in case it exists.
     */
    where: CoberturaMedicaWhereUniqueInput
    /**
     * In case the CoberturaMedica found by the `where` argument doesn't exist, create a new CoberturaMedica with this data.
     */
    create: XOR<CoberturaMedicaCreateInput, CoberturaMedicaUncheckedCreateInput>
    /**
     * In case the CoberturaMedica was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoberturaMedicaUpdateInput, CoberturaMedicaUncheckedUpdateInput>
  }

  /**
   * CoberturaMedica delete
   */
  export type CoberturaMedicaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
    /**
     * Filter which CoberturaMedica to delete.
     */
    where: CoberturaMedicaWhereUniqueInput
  }

  /**
   * CoberturaMedica deleteMany
   */
  export type CoberturaMedicaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoberturaMedicas to delete
     */
    where?: CoberturaMedicaWhereInput
    /**
     * Limit how many CoberturaMedicas to delete.
     */
    limit?: number
  }

  /**
   * CoberturaMedica.pacientes
   */
  export type CoberturaMedica$pacientesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Paciente
     */
    select?: PacienteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Paciente
     */
    omit?: PacienteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PacienteInclude<ExtArgs> | null
    where?: PacienteWhereInput
    orderBy?: PacienteOrderByWithRelationInput | PacienteOrderByWithRelationInput[]
    cursor?: PacienteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PacienteScalarFieldEnum | PacienteScalarFieldEnum[]
  }

  /**
   * CoberturaMedica.turnos
   */
  export type CoberturaMedica$turnosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Turno
     */
    omit?: TurnoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    cursor?: TurnoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * CoberturaMedica without action
   */
  export type CoberturaMedicaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoberturaMedica
     */
    select?: CoberturaMedicaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoberturaMedica
     */
    omit?: CoberturaMedicaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoberturaMedicaInclude<ExtArgs> | null
  }


  /**
   * Model CuentasWhatsapp
   */

  export type AggregateCuentasWhatsapp = {
    _count: CuentasWhatsappCountAggregateOutputType | null
    _min: CuentasWhatsappMinAggregateOutputType | null
    _max: CuentasWhatsappMaxAggregateOutputType | null
  }

  export type CuentasWhatsappMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    url: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuentasWhatsappMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    url: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CuentasWhatsappCountAggregateOutputType = {
    id: number
    nombre: number
    url: number
    token: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CuentasWhatsappMinAggregateInputType = {
    id?: true
    nombre?: true
    url?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuentasWhatsappMaxAggregateInputType = {
    id?: true
    nombre?: true
    url?: true
    token?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CuentasWhatsappCountAggregateInputType = {
    id?: true
    nombre?: true
    url?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CuentasWhatsappAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuentasWhatsapp to aggregate.
     */
    where?: CuentasWhatsappWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuentasWhatsapps to fetch.
     */
    orderBy?: CuentasWhatsappOrderByWithRelationInput | CuentasWhatsappOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CuentasWhatsappWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuentasWhatsapps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuentasWhatsapps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CuentasWhatsapps
    **/
    _count?: true | CuentasWhatsappCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CuentasWhatsappMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CuentasWhatsappMaxAggregateInputType
  }

  export type GetCuentasWhatsappAggregateType<T extends CuentasWhatsappAggregateArgs> = {
        [P in keyof T & keyof AggregateCuentasWhatsapp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCuentasWhatsapp[P]>
      : GetScalarType<T[P], AggregateCuentasWhatsapp[P]>
  }




  export type CuentasWhatsappGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CuentasWhatsappWhereInput
    orderBy?: CuentasWhatsappOrderByWithAggregationInput | CuentasWhatsappOrderByWithAggregationInput[]
    by: CuentasWhatsappScalarFieldEnum[] | CuentasWhatsappScalarFieldEnum
    having?: CuentasWhatsappScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CuentasWhatsappCountAggregateInputType | true
    _min?: CuentasWhatsappMinAggregateInputType
    _max?: CuentasWhatsappMaxAggregateInputType
  }

  export type CuentasWhatsappGroupByOutputType = {
    id: string
    nombre: string
    url: string
    token: string
    createdAt: Date
    updatedAt: Date
    _count: CuentasWhatsappCountAggregateOutputType | null
    _min: CuentasWhatsappMinAggregateOutputType | null
    _max: CuentasWhatsappMaxAggregateOutputType | null
  }

  type GetCuentasWhatsappGroupByPayload<T extends CuentasWhatsappGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CuentasWhatsappGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CuentasWhatsappGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CuentasWhatsappGroupByOutputType[P]>
            : GetScalarType<T[P], CuentasWhatsappGroupByOutputType[P]>
        }
      >
    >


  export type CuentasWhatsappSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    url?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["cuentasWhatsapp"]>

  export type CuentasWhatsappSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    url?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["cuentasWhatsapp"]>

  export type CuentasWhatsappSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    url?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["cuentasWhatsapp"]>

  export type CuentasWhatsappSelectScalar = {
    id?: boolean
    nombre?: boolean
    url?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CuentasWhatsappOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "url" | "token" | "createdAt" | "updatedAt", ExtArgs["result"]["cuentasWhatsapp"]>

  export type $CuentasWhatsappPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CuentasWhatsapp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      url: string
      token: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cuentasWhatsapp"]>
    composites: {}
  }

  type CuentasWhatsappGetPayload<S extends boolean | null | undefined | CuentasWhatsappDefaultArgs> = $Result.GetResult<Prisma.$CuentasWhatsappPayload, S>

  type CuentasWhatsappCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CuentasWhatsappFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CuentasWhatsappCountAggregateInputType | true
    }

  export interface CuentasWhatsappDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CuentasWhatsapp'], meta: { name: 'CuentasWhatsapp' } }
    /**
     * Find zero or one CuentasWhatsapp that matches the filter.
     * @param {CuentasWhatsappFindUniqueArgs} args - Arguments to find a CuentasWhatsapp
     * @example
     * // Get one CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CuentasWhatsappFindUniqueArgs>(args: SelectSubset<T, CuentasWhatsappFindUniqueArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CuentasWhatsapp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CuentasWhatsappFindUniqueOrThrowArgs} args - Arguments to find a CuentasWhatsapp
     * @example
     * // Get one CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CuentasWhatsappFindUniqueOrThrowArgs>(args: SelectSubset<T, CuentasWhatsappFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuentasWhatsapp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappFindFirstArgs} args - Arguments to find a CuentasWhatsapp
     * @example
     * // Get one CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CuentasWhatsappFindFirstArgs>(args?: SelectSubset<T, CuentasWhatsappFindFirstArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CuentasWhatsapp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappFindFirstOrThrowArgs} args - Arguments to find a CuentasWhatsapp
     * @example
     * // Get one CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CuentasWhatsappFindFirstOrThrowArgs>(args?: SelectSubset<T, CuentasWhatsappFindFirstOrThrowArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CuentasWhatsapps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CuentasWhatsapps
     * const cuentasWhatsapps = await prisma.cuentasWhatsapp.findMany()
     * 
     * // Get first 10 CuentasWhatsapps
     * const cuentasWhatsapps = await prisma.cuentasWhatsapp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cuentasWhatsappWithIdOnly = await prisma.cuentasWhatsapp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CuentasWhatsappFindManyArgs>(args?: SelectSubset<T, CuentasWhatsappFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CuentasWhatsapp.
     * @param {CuentasWhatsappCreateArgs} args - Arguments to create a CuentasWhatsapp.
     * @example
     * // Create one CuentasWhatsapp
     * const CuentasWhatsapp = await prisma.cuentasWhatsapp.create({
     *   data: {
     *     // ... data to create a CuentasWhatsapp
     *   }
     * })
     * 
     */
    create<T extends CuentasWhatsappCreateArgs>(args: SelectSubset<T, CuentasWhatsappCreateArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CuentasWhatsapps.
     * @param {CuentasWhatsappCreateManyArgs} args - Arguments to create many CuentasWhatsapps.
     * @example
     * // Create many CuentasWhatsapps
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CuentasWhatsappCreateManyArgs>(args?: SelectSubset<T, CuentasWhatsappCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CuentasWhatsapps and returns the data saved in the database.
     * @param {CuentasWhatsappCreateManyAndReturnArgs} args - Arguments to create many CuentasWhatsapps.
     * @example
     * // Create many CuentasWhatsapps
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CuentasWhatsapps and only return the `id`
     * const cuentasWhatsappWithIdOnly = await prisma.cuentasWhatsapp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CuentasWhatsappCreateManyAndReturnArgs>(args?: SelectSubset<T, CuentasWhatsappCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CuentasWhatsapp.
     * @param {CuentasWhatsappDeleteArgs} args - Arguments to delete one CuentasWhatsapp.
     * @example
     * // Delete one CuentasWhatsapp
     * const CuentasWhatsapp = await prisma.cuentasWhatsapp.delete({
     *   where: {
     *     // ... filter to delete one CuentasWhatsapp
     *   }
     * })
     * 
     */
    delete<T extends CuentasWhatsappDeleteArgs>(args: SelectSubset<T, CuentasWhatsappDeleteArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CuentasWhatsapp.
     * @param {CuentasWhatsappUpdateArgs} args - Arguments to update one CuentasWhatsapp.
     * @example
     * // Update one CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CuentasWhatsappUpdateArgs>(args: SelectSubset<T, CuentasWhatsappUpdateArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CuentasWhatsapps.
     * @param {CuentasWhatsappDeleteManyArgs} args - Arguments to filter CuentasWhatsapps to delete.
     * @example
     * // Delete a few CuentasWhatsapps
     * const { count } = await prisma.cuentasWhatsapp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CuentasWhatsappDeleteManyArgs>(args?: SelectSubset<T, CuentasWhatsappDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuentasWhatsapps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CuentasWhatsapps
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CuentasWhatsappUpdateManyArgs>(args: SelectSubset<T, CuentasWhatsappUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CuentasWhatsapps and returns the data updated in the database.
     * @param {CuentasWhatsappUpdateManyAndReturnArgs} args - Arguments to update many CuentasWhatsapps.
     * @example
     * // Update many CuentasWhatsapps
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CuentasWhatsapps and only return the `id`
     * const cuentasWhatsappWithIdOnly = await prisma.cuentasWhatsapp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CuentasWhatsappUpdateManyAndReturnArgs>(args: SelectSubset<T, CuentasWhatsappUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CuentasWhatsapp.
     * @param {CuentasWhatsappUpsertArgs} args - Arguments to update or create a CuentasWhatsapp.
     * @example
     * // Update or create a CuentasWhatsapp
     * const cuentasWhatsapp = await prisma.cuentasWhatsapp.upsert({
     *   create: {
     *     // ... data to create a CuentasWhatsapp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CuentasWhatsapp we want to update
     *   }
     * })
     */
    upsert<T extends CuentasWhatsappUpsertArgs>(args: SelectSubset<T, CuentasWhatsappUpsertArgs<ExtArgs>>): Prisma__CuentasWhatsappClient<$Result.GetResult<Prisma.$CuentasWhatsappPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CuentasWhatsapps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappCountArgs} args - Arguments to filter CuentasWhatsapps to count.
     * @example
     * // Count the number of CuentasWhatsapps
     * const count = await prisma.cuentasWhatsapp.count({
     *   where: {
     *     // ... the filter for the CuentasWhatsapps we want to count
     *   }
     * })
    **/
    count<T extends CuentasWhatsappCountArgs>(
      args?: Subset<T, CuentasWhatsappCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CuentasWhatsappCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CuentasWhatsapp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CuentasWhatsappAggregateArgs>(args: Subset<T, CuentasWhatsappAggregateArgs>): Prisma.PrismaPromise<GetCuentasWhatsappAggregateType<T>>

    /**
     * Group by CuentasWhatsapp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CuentasWhatsappGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CuentasWhatsappGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CuentasWhatsappGroupByArgs['orderBy'] }
        : { orderBy?: CuentasWhatsappGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CuentasWhatsappGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCuentasWhatsappGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CuentasWhatsapp model
   */
  readonly fields: CuentasWhatsappFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CuentasWhatsapp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CuentasWhatsappClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CuentasWhatsapp model
   */
  interface CuentasWhatsappFieldRefs {
    readonly id: FieldRef<"CuentasWhatsapp", 'String'>
    readonly nombre: FieldRef<"CuentasWhatsapp", 'String'>
    readonly url: FieldRef<"CuentasWhatsapp", 'String'>
    readonly token: FieldRef<"CuentasWhatsapp", 'String'>
    readonly createdAt: FieldRef<"CuentasWhatsapp", 'DateTime'>
    readonly updatedAt: FieldRef<"CuentasWhatsapp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CuentasWhatsapp findUnique
   */
  export type CuentasWhatsappFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter, which CuentasWhatsapp to fetch.
     */
    where: CuentasWhatsappWhereUniqueInput
  }

  /**
   * CuentasWhatsapp findUniqueOrThrow
   */
  export type CuentasWhatsappFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter, which CuentasWhatsapp to fetch.
     */
    where: CuentasWhatsappWhereUniqueInput
  }

  /**
   * CuentasWhatsapp findFirst
   */
  export type CuentasWhatsappFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter, which CuentasWhatsapp to fetch.
     */
    where?: CuentasWhatsappWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuentasWhatsapps to fetch.
     */
    orderBy?: CuentasWhatsappOrderByWithRelationInput | CuentasWhatsappOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuentasWhatsapps.
     */
    cursor?: CuentasWhatsappWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuentasWhatsapps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuentasWhatsapps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuentasWhatsapps.
     */
    distinct?: CuentasWhatsappScalarFieldEnum | CuentasWhatsappScalarFieldEnum[]
  }

  /**
   * CuentasWhatsapp findFirstOrThrow
   */
  export type CuentasWhatsappFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter, which CuentasWhatsapp to fetch.
     */
    where?: CuentasWhatsappWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuentasWhatsapps to fetch.
     */
    orderBy?: CuentasWhatsappOrderByWithRelationInput | CuentasWhatsappOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CuentasWhatsapps.
     */
    cursor?: CuentasWhatsappWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuentasWhatsapps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuentasWhatsapps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CuentasWhatsapps.
     */
    distinct?: CuentasWhatsappScalarFieldEnum | CuentasWhatsappScalarFieldEnum[]
  }

  /**
   * CuentasWhatsapp findMany
   */
  export type CuentasWhatsappFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter, which CuentasWhatsapps to fetch.
     */
    where?: CuentasWhatsappWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CuentasWhatsapps to fetch.
     */
    orderBy?: CuentasWhatsappOrderByWithRelationInput | CuentasWhatsappOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CuentasWhatsapps.
     */
    cursor?: CuentasWhatsappWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CuentasWhatsapps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CuentasWhatsapps.
     */
    skip?: number
    distinct?: CuentasWhatsappScalarFieldEnum | CuentasWhatsappScalarFieldEnum[]
  }

  /**
   * CuentasWhatsapp create
   */
  export type CuentasWhatsappCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * The data needed to create a CuentasWhatsapp.
     */
    data: XOR<CuentasWhatsappCreateInput, CuentasWhatsappUncheckedCreateInput>
  }

  /**
   * CuentasWhatsapp createMany
   */
  export type CuentasWhatsappCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CuentasWhatsapps.
     */
    data: CuentasWhatsappCreateManyInput | CuentasWhatsappCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CuentasWhatsapp createManyAndReturn
   */
  export type CuentasWhatsappCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * The data used to create many CuentasWhatsapps.
     */
    data: CuentasWhatsappCreateManyInput | CuentasWhatsappCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CuentasWhatsapp update
   */
  export type CuentasWhatsappUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * The data needed to update a CuentasWhatsapp.
     */
    data: XOR<CuentasWhatsappUpdateInput, CuentasWhatsappUncheckedUpdateInput>
    /**
     * Choose, which CuentasWhatsapp to update.
     */
    where: CuentasWhatsappWhereUniqueInput
  }

  /**
   * CuentasWhatsapp updateMany
   */
  export type CuentasWhatsappUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CuentasWhatsapps.
     */
    data: XOR<CuentasWhatsappUpdateManyMutationInput, CuentasWhatsappUncheckedUpdateManyInput>
    /**
     * Filter which CuentasWhatsapps to update
     */
    where?: CuentasWhatsappWhereInput
    /**
     * Limit how many CuentasWhatsapps to update.
     */
    limit?: number
  }

  /**
   * CuentasWhatsapp updateManyAndReturn
   */
  export type CuentasWhatsappUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * The data used to update CuentasWhatsapps.
     */
    data: XOR<CuentasWhatsappUpdateManyMutationInput, CuentasWhatsappUncheckedUpdateManyInput>
    /**
     * Filter which CuentasWhatsapps to update
     */
    where?: CuentasWhatsappWhereInput
    /**
     * Limit how many CuentasWhatsapps to update.
     */
    limit?: number
  }

  /**
   * CuentasWhatsapp upsert
   */
  export type CuentasWhatsappUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * The filter to search for the CuentasWhatsapp to update in case it exists.
     */
    where: CuentasWhatsappWhereUniqueInput
    /**
     * In case the CuentasWhatsapp found by the `where` argument doesn't exist, create a new CuentasWhatsapp with this data.
     */
    create: XOR<CuentasWhatsappCreateInput, CuentasWhatsappUncheckedCreateInput>
    /**
     * In case the CuentasWhatsapp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CuentasWhatsappUpdateInput, CuentasWhatsappUncheckedUpdateInput>
  }

  /**
   * CuentasWhatsapp delete
   */
  export type CuentasWhatsappDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
    /**
     * Filter which CuentasWhatsapp to delete.
     */
    where: CuentasWhatsappWhereUniqueInput
  }

  /**
   * CuentasWhatsapp deleteMany
   */
  export type CuentasWhatsappDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CuentasWhatsapps to delete
     */
    where?: CuentasWhatsappWhereInput
    /**
     * Limit how many CuentasWhatsapps to delete.
     */
    limit?: number
  }

  /**
   * CuentasWhatsapp without action
   */
  export type CuentasWhatsappDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CuentasWhatsapp
     */
    select?: CuentasWhatsappSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CuentasWhatsapp
     */
    omit?: CuentasWhatsappOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    enabled: 'enabled',
    token: 'token',
    tokenExpires: 'tokenExpires',
    perfil: 'perfil'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const ConfiguracionConsultorioScalarFieldEnum: {
    id: 'id',
    nombreConsultorio: 'nombreConsultorio',
    domicilio: 'domicilio',
    telefono: 'telefono',
    mail: 'mail',
    horarioAtencion: 'horarioAtencion',
    web: 'web',
    coberturas: 'coberturas',
    limite: 'limite',
    feriados: 'feriados',
    envio: 'envio',
    horaEnvio: 'horaEnvio',
    diasEnvio: 'diasEnvio',
    envioMail: 'envioMail',
    horaEnvioMail: 'horaEnvioMail',
    diasEnvioMail: 'diasEnvioMail',
    urlApp: 'urlApp',
    urlAppDev: 'urlAppDev',
    logoUrl: 'logoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConfiguracionConsultorioScalarFieldEnum = (typeof ConfiguracionConsultorioScalarFieldEnum)[keyof typeof ConfiguracionConsultorioScalarFieldEnum]


  export const ConsultorioScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    direccion: 'direccion',
    telefono: 'telefono',
    email: 'email',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsultorioScalarFieldEnum = (typeof ConsultorioScalarFieldEnum)[keyof typeof ConsultorioScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    emoji: 'emoji',
    feriados: 'feriados',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const AgendaDoctorScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    consultorioId: 'consultorioId',
    dia: 'dia',
    fecha: 'fecha',
    nombre: 'nombre',
    atencion: 'atencion',
    desde: 'desde',
    hasta: 'hasta',
    corteDesde: 'corteDesde',
    corteHasta: 'corteHasta',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AgendaDoctorScalarFieldEnum = (typeof AgendaDoctorScalarFieldEnum)[keyof typeof AgendaDoctorScalarFieldEnum]


  export const TipoTurnoDoctorScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    nombre: 'nombre',
    duracion: 'duracion',
    habilitado: 'habilitado',
    publico: 'publico',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TipoTurnoDoctorScalarFieldEnum = (typeof TipoTurnoDoctorScalarFieldEnum)[keyof typeof TipoTurnoDoctorScalarFieldEnum]


  export const PacienteScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    dni: 'dni',
    celular: 'celular',
    email: 'email',
    cobertura: 'cobertura',
    coberturaMedicaId: 'coberturaMedicaId',
    observaciones: 'observaciones',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PacienteScalarFieldEnum = (typeof PacienteScalarFieldEnum)[keyof typeof PacienteScalarFieldEnum]


  export const TurnoScalarFieldEnum: {
    id: 'id',
    desde: 'desde',
    hasta: 'hasta',
    servicio: 'servicio',
    duracion: 'duracion',
    pacienteId: 'pacienteId',
    confirmado: 'confirmado',
    estado: 'estado',
    fhCambioEstado: 'fhCambioEstado',
    hsAviso: 'hsAviso',
    penal: 'penal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    consultorioId: 'consultorioId',
    doctorId: 'doctorId',
    observaciones: 'observaciones',
    token: 'token',
    coberturaMedicaId: 'coberturaMedicaId',
    tipoDeTurnoId: 'tipoDeTurnoId'
  };

  export type TurnoScalarFieldEnum = (typeof TurnoScalarFieldEnum)[keyof typeof TurnoScalarFieldEnum]


  export const EmailTokenScalarFieldEnum: {
    email: 'email',
    token: 'token',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailTokenScalarFieldEnum = (typeof EmailTokenScalarFieldEnum)[keyof typeof EmailTokenScalarFieldEnum]


  export const CoberturaMedicaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    codigo: 'codigo',
    habilitado: 'habilitado',
    color: 'color',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoberturaMedicaScalarFieldEnum = (typeof CoberturaMedicaScalarFieldEnum)[keyof typeof CoberturaMedicaScalarFieldEnum]


  export const CuentasWhatsappScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    url: 'url',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CuentasWhatsappScalarFieldEnum = (typeof CuentasWhatsappScalarFieldEnum)[keyof typeof CuentasWhatsappScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    enabled?: BoolFilter<"User"> | boolean
    token?: StringNullableFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    perfil?: IntFilter<"User"> | number
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    pacientesCreados?: PacienteListRelationFilter
    pacientesEditados?: PacienteListRelationFilter
    turnosCreados?: TurnoListRelationFilter
    turnosEditados?: TurnoListRelationFilter
    doctores?: DoctorListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    enabled?: SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpires?: SortOrderInput | SortOrder
    perfil?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    pacientesCreados?: PacienteOrderByRelationAggregateInput
    pacientesEditados?: PacienteOrderByRelationAggregateInput
    turnosCreados?: TurnoOrderByRelationAggregateInput
    turnosEditados?: TurnoOrderByRelationAggregateInput
    doctores?: DoctorOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    enabled?: BoolFilter<"User"> | boolean
    token?: StringNullableFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    perfil?: IntFilter<"User"> | number
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    pacientesCreados?: PacienteListRelationFilter
    pacientesEditados?: PacienteListRelationFilter
    turnosCreados?: TurnoListRelationFilter
    turnosEditados?: TurnoListRelationFilter
    doctores?: DoctorListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    enabled?: SortOrder
    token?: SortOrderInput | SortOrder
    tokenExpires?: SortOrderInput | SortOrder
    perfil?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    enabled?: BoolWithAggregatesFilter<"User"> | boolean
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    perfil?: IntWithAggregatesFilter<"User"> | number
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type ConfiguracionConsultorioWhereInput = {
    AND?: ConfiguracionConsultorioWhereInput | ConfiguracionConsultorioWhereInput[]
    OR?: ConfiguracionConsultorioWhereInput[]
    NOT?: ConfiguracionConsultorioWhereInput | ConfiguracionConsultorioWhereInput[]
    id?: StringFilter<"ConfiguracionConsultorio"> | string
    nombreConsultorio?: StringFilter<"ConfiguracionConsultorio"> | string
    domicilio?: StringFilter<"ConfiguracionConsultorio"> | string
    telefono?: StringFilter<"ConfiguracionConsultorio"> | string
    mail?: StringFilter<"ConfiguracionConsultorio"> | string
    horarioAtencion?: StringFilter<"ConfiguracionConsultorio"> | string
    web?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    coberturas?: StringFilter<"ConfiguracionConsultorio"> | string
    limite?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
    feriados?: StringNullableListFilter<"ConfiguracionConsultorio">
    envio?: BoolFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvio?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvio?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    envioMail?: BoolFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvioMail?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvioMail?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    urlApp?: StringFilter<"ConfiguracionConsultorio"> | string
    urlAppDev?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    logoUrl?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    createdAt?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
    updatedAt?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
  }

  export type ConfiguracionConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    nombreConsultorio?: SortOrder
    domicilio?: SortOrder
    telefono?: SortOrder
    mail?: SortOrder
    horarioAtencion?: SortOrder
    web?: SortOrderInput | SortOrder
    coberturas?: SortOrder
    limite?: SortOrder
    feriados?: SortOrder
    envio?: SortOrder
    horaEnvio?: SortOrderInput | SortOrder
    diasEnvio?: SortOrderInput | SortOrder
    envioMail?: SortOrder
    horaEnvioMail?: SortOrderInput | SortOrder
    diasEnvioMail?: SortOrderInput | SortOrder
    urlApp?: SortOrder
    urlAppDev?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfiguracionConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConfiguracionConsultorioWhereInput | ConfiguracionConsultorioWhereInput[]
    OR?: ConfiguracionConsultorioWhereInput[]
    NOT?: ConfiguracionConsultorioWhereInput | ConfiguracionConsultorioWhereInput[]
    nombreConsultorio?: StringFilter<"ConfiguracionConsultorio"> | string
    domicilio?: StringFilter<"ConfiguracionConsultorio"> | string
    telefono?: StringFilter<"ConfiguracionConsultorio"> | string
    mail?: StringFilter<"ConfiguracionConsultorio"> | string
    horarioAtencion?: StringFilter<"ConfiguracionConsultorio"> | string
    web?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    coberturas?: StringFilter<"ConfiguracionConsultorio"> | string
    limite?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
    feriados?: StringNullableListFilter<"ConfiguracionConsultorio">
    envio?: BoolFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvio?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvio?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    envioMail?: BoolFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvioMail?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvioMail?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    urlApp?: StringFilter<"ConfiguracionConsultorio"> | string
    urlAppDev?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    logoUrl?: StringNullableFilter<"ConfiguracionConsultorio"> | string | null
    createdAt?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
    updatedAt?: DateTimeFilter<"ConfiguracionConsultorio"> | Date | string
  }, "id">

  export type ConfiguracionConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    nombreConsultorio?: SortOrder
    domicilio?: SortOrder
    telefono?: SortOrder
    mail?: SortOrder
    horarioAtencion?: SortOrder
    web?: SortOrderInput | SortOrder
    coberturas?: SortOrder
    limite?: SortOrder
    feriados?: SortOrder
    envio?: SortOrder
    horaEnvio?: SortOrderInput | SortOrder
    diasEnvio?: SortOrderInput | SortOrder
    envioMail?: SortOrder
    horaEnvioMail?: SortOrderInput | SortOrder
    diasEnvioMail?: SortOrderInput | SortOrder
    urlApp?: SortOrder
    urlAppDev?: SortOrderInput | SortOrder
    logoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConfiguracionConsultorioCountOrderByAggregateInput
    _max?: ConfiguracionConsultorioMaxOrderByAggregateInput
    _min?: ConfiguracionConsultorioMinOrderByAggregateInput
  }

  export type ConfiguracionConsultorioScalarWhereWithAggregatesInput = {
    AND?: ConfiguracionConsultorioScalarWhereWithAggregatesInput | ConfiguracionConsultorioScalarWhereWithAggregatesInput[]
    OR?: ConfiguracionConsultorioScalarWhereWithAggregatesInput[]
    NOT?: ConfiguracionConsultorioScalarWhereWithAggregatesInput | ConfiguracionConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    nombreConsultorio?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    domicilio?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    telefono?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    mail?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    horarioAtencion?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    web?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    coberturas?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    limite?: DateTimeWithAggregatesFilter<"ConfiguracionConsultorio"> | Date | string
    feriados?: StringNullableListFilter<"ConfiguracionConsultorio">
    envio?: BoolWithAggregatesFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvio?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvio?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    envioMail?: BoolWithAggregatesFilter<"ConfiguracionConsultorio"> | boolean
    horaEnvioMail?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    diasEnvioMail?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    urlApp?: StringWithAggregatesFilter<"ConfiguracionConsultorio"> | string
    urlAppDev?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    logoUrl?: StringNullableWithAggregatesFilter<"ConfiguracionConsultorio"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ConfiguracionConsultorio"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConfiguracionConsultorio"> | Date | string
  }

  export type ConsultorioWhereInput = {
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    id?: StringFilter<"Consultorio"> | string
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringNullableFilter<"Consultorio"> | string | null
    telefono?: StringNullableFilter<"Consultorio"> | string | null
    email?: StringNullableFilter<"Consultorio"> | string | null
    color?: StringNullableFilter<"Consultorio"> | string | null
    createdAt?: DateTimeFilter<"Consultorio"> | Date | string
    updatedAt?: DateTimeFilter<"Consultorio"> | Date | string
    turnos?: TurnoListRelationFilter
    agendaDoctor?: AgendaDoctorListRelationFilter
    tiposTurno?: TipoTurnoDoctorListRelationFilter
  }

  export type ConsultorioOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    turnos?: TurnoOrderByRelationAggregateInput
    agendaDoctor?: AgendaDoctorOrderByRelationAggregateInput
    tiposTurno?: TipoTurnoDoctorOrderByRelationAggregateInput
  }

  export type ConsultorioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsultorioWhereInput | ConsultorioWhereInput[]
    OR?: ConsultorioWhereInput[]
    NOT?: ConsultorioWhereInput | ConsultorioWhereInput[]
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringNullableFilter<"Consultorio"> | string | null
    telefono?: StringNullableFilter<"Consultorio"> | string | null
    email?: StringNullableFilter<"Consultorio"> | string | null
    color?: StringNullableFilter<"Consultorio"> | string | null
    createdAt?: DateTimeFilter<"Consultorio"> | Date | string
    updatedAt?: DateTimeFilter<"Consultorio"> | Date | string
    turnos?: TurnoListRelationFilter
    agendaDoctor?: AgendaDoctorListRelationFilter
    tiposTurno?: TipoTurnoDoctorListRelationFilter
  }, "id">

  export type ConsultorioOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrderInput | SortOrder
    telefono?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsultorioCountOrderByAggregateInput
    _max?: ConsultorioMaxOrderByAggregateInput
    _min?: ConsultorioMinOrderByAggregateInput
  }

  export type ConsultorioScalarWhereWithAggregatesInput = {
    AND?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    OR?: ConsultorioScalarWhereWithAggregatesInput[]
    NOT?: ConsultorioScalarWhereWithAggregatesInput | ConsultorioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Consultorio"> | string
    nombre?: StringWithAggregatesFilter<"Consultorio"> | string
    direccion?: StringNullableWithAggregatesFilter<"Consultorio"> | string | null
    telefono?: StringNullableWithAggregatesFilter<"Consultorio"> | string | null
    email?: StringNullableWithAggregatesFilter<"Consultorio"> | string | null
    color?: StringNullableWithAggregatesFilter<"Consultorio"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Consultorio"> | Date | string
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: StringFilter<"Doctor"> | string
    nombre?: StringFilter<"Doctor"> | string
    emoji?: StringFilter<"Doctor"> | string
    feriados?: StringNullableListFilter<"Doctor">
    color?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    AgendaDoctor?: AgendaDoctorListRelationFilter
    TipoTurnoDoctor?: TipoTurnoDoctorListRelationFilter
    Turno?: TurnoListRelationFilter
    usuarios?: UserListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    emoji?: SortOrder
    feriados?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    AgendaDoctor?: AgendaDoctorOrderByRelationAggregateInput
    TipoTurnoDoctor?: TipoTurnoDoctorOrderByRelationAggregateInput
    Turno?: TurnoOrderByRelationAggregateInput
    usuarios?: UserOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    nombre?: StringFilter<"Doctor"> | string
    emoji?: StringFilter<"Doctor"> | string
    feriados?: StringNullableListFilter<"Doctor">
    color?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    AgendaDoctor?: AgendaDoctorListRelationFilter
    TipoTurnoDoctor?: TipoTurnoDoctorListRelationFilter
    Turno?: TurnoListRelationFilter
    usuarios?: UserListRelationFilter
  }, "id">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    emoji?: SortOrder
    feriados?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctor"> | string
    nombre?: StringWithAggregatesFilter<"Doctor"> | string
    emoji?: StringWithAggregatesFilter<"Doctor"> | string
    feriados?: StringNullableListFilter<"Doctor">
    color?: StringNullableWithAggregatesFilter<"Doctor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
  }

  export type AgendaDoctorWhereInput = {
    AND?: AgendaDoctorWhereInput | AgendaDoctorWhereInput[]
    OR?: AgendaDoctorWhereInput[]
    NOT?: AgendaDoctorWhereInput | AgendaDoctorWhereInput[]
    id?: StringFilter<"AgendaDoctor"> | string
    doctorId?: StringFilter<"AgendaDoctor"> | string
    consultorioId?: StringNullableFilter<"AgendaDoctor"> | string | null
    dia?: IntFilter<"AgendaDoctor"> | number
    fecha?: DateTimeNullableFilter<"AgendaDoctor"> | Date | string | null
    nombre?: StringFilter<"AgendaDoctor"> | string
    atencion?: BoolFilter<"AgendaDoctor"> | boolean
    desde?: StringFilter<"AgendaDoctor"> | string
    hasta?: StringFilter<"AgendaDoctor"> | string
    corteDesde?: StringNullableFilter<"AgendaDoctor"> | string | null
    corteHasta?: StringNullableFilter<"AgendaDoctor"> | string | null
    createdAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    consultorio?: XOR<ConsultorioNullableScalarRelationFilter, ConsultorioWhereInput> | null
  }

  export type AgendaDoctorOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    consultorioId?: SortOrderInput | SortOrder
    dia?: SortOrder
    fecha?: SortOrderInput | SortOrder
    nombre?: SortOrder
    atencion?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    corteDesde?: SortOrderInput | SortOrder
    corteHasta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    consultorio?: ConsultorioOrderByWithRelationInput
  }

  export type AgendaDoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AgendaDoctorWhereInput | AgendaDoctorWhereInput[]
    OR?: AgendaDoctorWhereInput[]
    NOT?: AgendaDoctorWhereInput | AgendaDoctorWhereInput[]
    doctorId?: StringFilter<"AgendaDoctor"> | string
    consultorioId?: StringNullableFilter<"AgendaDoctor"> | string | null
    dia?: IntFilter<"AgendaDoctor"> | number
    fecha?: DateTimeNullableFilter<"AgendaDoctor"> | Date | string | null
    nombre?: StringFilter<"AgendaDoctor"> | string
    atencion?: BoolFilter<"AgendaDoctor"> | boolean
    desde?: StringFilter<"AgendaDoctor"> | string
    hasta?: StringFilter<"AgendaDoctor"> | string
    corteDesde?: StringNullableFilter<"AgendaDoctor"> | string | null
    corteHasta?: StringNullableFilter<"AgendaDoctor"> | string | null
    createdAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    consultorio?: XOR<ConsultorioNullableScalarRelationFilter, ConsultorioWhereInput> | null
  }, "id">

  export type AgendaDoctorOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    consultorioId?: SortOrderInput | SortOrder
    dia?: SortOrder
    fecha?: SortOrderInput | SortOrder
    nombre?: SortOrder
    atencion?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    corteDesde?: SortOrderInput | SortOrder
    corteHasta?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AgendaDoctorCountOrderByAggregateInput
    _avg?: AgendaDoctorAvgOrderByAggregateInput
    _max?: AgendaDoctorMaxOrderByAggregateInput
    _min?: AgendaDoctorMinOrderByAggregateInput
    _sum?: AgendaDoctorSumOrderByAggregateInput
  }

  export type AgendaDoctorScalarWhereWithAggregatesInput = {
    AND?: AgendaDoctorScalarWhereWithAggregatesInput | AgendaDoctorScalarWhereWithAggregatesInput[]
    OR?: AgendaDoctorScalarWhereWithAggregatesInput[]
    NOT?: AgendaDoctorScalarWhereWithAggregatesInput | AgendaDoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AgendaDoctor"> | string
    doctorId?: StringWithAggregatesFilter<"AgendaDoctor"> | string
    consultorioId?: StringNullableWithAggregatesFilter<"AgendaDoctor"> | string | null
    dia?: IntWithAggregatesFilter<"AgendaDoctor"> | number
    fecha?: DateTimeNullableWithAggregatesFilter<"AgendaDoctor"> | Date | string | null
    nombre?: StringWithAggregatesFilter<"AgendaDoctor"> | string
    atencion?: BoolWithAggregatesFilter<"AgendaDoctor"> | boolean
    desde?: StringWithAggregatesFilter<"AgendaDoctor"> | string
    hasta?: StringWithAggregatesFilter<"AgendaDoctor"> | string
    corteDesde?: StringNullableWithAggregatesFilter<"AgendaDoctor"> | string | null
    corteHasta?: StringNullableWithAggregatesFilter<"AgendaDoctor"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AgendaDoctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AgendaDoctor"> | Date | string
  }

  export type TipoTurnoDoctorWhereInput = {
    AND?: TipoTurnoDoctorWhereInput | TipoTurnoDoctorWhereInput[]
    OR?: TipoTurnoDoctorWhereInput[]
    NOT?: TipoTurnoDoctorWhereInput | TipoTurnoDoctorWhereInput[]
    id?: StringFilter<"TipoTurnoDoctor"> | string
    doctorId?: StringFilter<"TipoTurnoDoctor"> | string
    nombre?: StringFilter<"TipoTurnoDoctor"> | string
    duracion?: StringFilter<"TipoTurnoDoctor"> | string
    habilitado?: BoolFilter<"TipoTurnoDoctor"> | boolean
    publico?: BoolFilter<"TipoTurnoDoctor"> | boolean
    createdAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    consultorios?: ConsultorioListRelationFilter
    turnos?: TurnoListRelationFilter
  }

  export type TipoTurnoDoctorOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nombre?: SortOrder
    duracion?: SortOrder
    habilitado?: SortOrder
    publico?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    consultorios?: ConsultorioOrderByRelationAggregateInput
    turnos?: TurnoOrderByRelationAggregateInput
  }

  export type TipoTurnoDoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TipoTurnoDoctorWhereInput | TipoTurnoDoctorWhereInput[]
    OR?: TipoTurnoDoctorWhereInput[]
    NOT?: TipoTurnoDoctorWhereInput | TipoTurnoDoctorWhereInput[]
    doctorId?: StringFilter<"TipoTurnoDoctor"> | string
    nombre?: StringFilter<"TipoTurnoDoctor"> | string
    duracion?: StringFilter<"TipoTurnoDoctor"> | string
    habilitado?: BoolFilter<"TipoTurnoDoctor"> | boolean
    publico?: BoolFilter<"TipoTurnoDoctor"> | boolean
    createdAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    consultorios?: ConsultorioListRelationFilter
    turnos?: TurnoListRelationFilter
  }, "id">

  export type TipoTurnoDoctorOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nombre?: SortOrder
    duracion?: SortOrder
    habilitado?: SortOrder
    publico?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TipoTurnoDoctorCountOrderByAggregateInput
    _max?: TipoTurnoDoctorMaxOrderByAggregateInput
    _min?: TipoTurnoDoctorMinOrderByAggregateInput
  }

  export type TipoTurnoDoctorScalarWhereWithAggregatesInput = {
    AND?: TipoTurnoDoctorScalarWhereWithAggregatesInput | TipoTurnoDoctorScalarWhereWithAggregatesInput[]
    OR?: TipoTurnoDoctorScalarWhereWithAggregatesInput[]
    NOT?: TipoTurnoDoctorScalarWhereWithAggregatesInput | TipoTurnoDoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TipoTurnoDoctor"> | string
    doctorId?: StringWithAggregatesFilter<"TipoTurnoDoctor"> | string
    nombre?: StringWithAggregatesFilter<"TipoTurnoDoctor"> | string
    duracion?: StringWithAggregatesFilter<"TipoTurnoDoctor"> | string
    habilitado?: BoolWithAggregatesFilter<"TipoTurnoDoctor"> | boolean
    publico?: BoolWithAggregatesFilter<"TipoTurnoDoctor"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TipoTurnoDoctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TipoTurnoDoctor"> | Date | string
  }

  export type PacienteWhereInput = {
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    id?: StringFilter<"Paciente"> | string
    nombre?: StringFilter<"Paciente"> | string
    apellido?: StringNullableFilter<"Paciente"> | string | null
    dni?: StringNullableFilter<"Paciente"> | string | null
    celular?: StringFilter<"Paciente"> | string
    email?: StringNullableFilter<"Paciente"> | string | null
    cobertura?: StringNullableFilter<"Paciente"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Paciente"> | string | null
    observaciones?: StringNullableFilter<"Paciente"> | string | null
    createdAt?: DateTimeFilter<"Paciente"> | Date | string
    updatedAt?: DateTimeFilter<"Paciente"> | Date | string
    createdById?: StringNullableFilter<"Paciente"> | string | null
    updatedById?: StringNullableFilter<"Paciente"> | string | null
    turnos?: TurnoListRelationFilter
    coberturaMedica?: XOR<CoberturaMedicaNullableScalarRelationFilter, CoberturaMedicaWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type PacienteOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    celular?: SortOrder
    email?: SortOrderInput | SortOrder
    cobertura?: SortOrderInput | SortOrder
    coberturaMedicaId?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    turnos?: TurnoOrderByRelationAggregateInput
    coberturaMedica?: CoberturaMedicaOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type PacienteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    dni_celular?: PacienteDniCelularCompoundUniqueInput
    AND?: PacienteWhereInput | PacienteWhereInput[]
    OR?: PacienteWhereInput[]
    NOT?: PacienteWhereInput | PacienteWhereInput[]
    nombre?: StringFilter<"Paciente"> | string
    apellido?: StringNullableFilter<"Paciente"> | string | null
    dni?: StringNullableFilter<"Paciente"> | string | null
    celular?: StringFilter<"Paciente"> | string
    email?: StringNullableFilter<"Paciente"> | string | null
    cobertura?: StringNullableFilter<"Paciente"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Paciente"> | string | null
    observaciones?: StringNullableFilter<"Paciente"> | string | null
    createdAt?: DateTimeFilter<"Paciente"> | Date | string
    updatedAt?: DateTimeFilter<"Paciente"> | Date | string
    createdById?: StringNullableFilter<"Paciente"> | string | null
    updatedById?: StringNullableFilter<"Paciente"> | string | null
    turnos?: TurnoListRelationFilter
    coberturaMedica?: XOR<CoberturaMedicaNullableScalarRelationFilter, CoberturaMedicaWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "dni_celular">

  export type PacienteOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrderInput | SortOrder
    dni?: SortOrderInput | SortOrder
    celular?: SortOrder
    email?: SortOrderInput | SortOrder
    cobertura?: SortOrderInput | SortOrder
    coberturaMedicaId?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PacienteCountOrderByAggregateInput
    _max?: PacienteMaxOrderByAggregateInput
    _min?: PacienteMinOrderByAggregateInput
  }

  export type PacienteScalarWhereWithAggregatesInput = {
    AND?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    OR?: PacienteScalarWhereWithAggregatesInput[]
    NOT?: PacienteScalarWhereWithAggregatesInput | PacienteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Paciente"> | string
    nombre?: StringWithAggregatesFilter<"Paciente"> | string
    apellido?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    dni?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    celular?: StringWithAggregatesFilter<"Paciente"> | string
    email?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    cobertura?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    coberturaMedicaId?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Paciente"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Paciente"> | string | null
  }

  export type TurnoWhereInput = {
    AND?: TurnoWhereInput | TurnoWhereInput[]
    OR?: TurnoWhereInput[]
    NOT?: TurnoWhereInput | TurnoWhereInput[]
    id?: StringFilter<"Turno"> | string
    desde?: DateTimeFilter<"Turno"> | Date | string
    hasta?: DateTimeFilter<"Turno"> | Date | string
    servicio?: StringFilter<"Turno"> | string
    duracion?: IntFilter<"Turno"> | number
    pacienteId?: StringFilter<"Turno"> | string
    confirmado?: BoolFilter<"Turno"> | boolean
    estado?: StringNullableFilter<"Turno"> | string | null
    fhCambioEstado?: DateTimeNullableFilter<"Turno"> | Date | string | null
    hsAviso?: StringNullableFilter<"Turno"> | string | null
    penal?: StringNullableFilter<"Turno"> | string | null
    createdAt?: DateTimeFilter<"Turno"> | Date | string
    updatedAt?: DateTimeFilter<"Turno"> | Date | string
    createdById?: StringNullableFilter<"Turno"> | string | null
    updatedById?: StringNullableFilter<"Turno"> | string | null
    consultorioId?: StringFilter<"Turno"> | string
    doctorId?: StringFilter<"Turno"> | string
    observaciones?: StringNullableFilter<"Turno"> | string | null
    token?: StringNullableFilter<"Turno"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Turno"> | string | null
    tipoDeTurnoId?: StringNullableFilter<"Turno"> | string | null
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    coberturaMedica?: XOR<CoberturaMedicaNullableScalarRelationFilter, CoberturaMedicaWhereInput> | null
    tipoDeTurno?: XOR<TipoTurnoDoctorNullableScalarRelationFilter, TipoTurnoDoctorWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type TurnoOrderByWithRelationInput = {
    id?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    servicio?: SortOrder
    duracion?: SortOrder
    pacienteId?: SortOrder
    confirmado?: SortOrder
    estado?: SortOrderInput | SortOrder
    fhCambioEstado?: SortOrderInput | SortOrder
    hsAviso?: SortOrderInput | SortOrder
    penal?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    consultorioId?: SortOrder
    doctorId?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    coberturaMedicaId?: SortOrderInput | SortOrder
    tipoDeTurnoId?: SortOrderInput | SortOrder
    consultorio?: ConsultorioOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    paciente?: PacienteOrderByWithRelationInput
    coberturaMedica?: CoberturaMedicaOrderByWithRelationInput
    tipoDeTurno?: TipoTurnoDoctorOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type TurnoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: TurnoWhereInput | TurnoWhereInput[]
    OR?: TurnoWhereInput[]
    NOT?: TurnoWhereInput | TurnoWhereInput[]
    desde?: DateTimeFilter<"Turno"> | Date | string
    hasta?: DateTimeFilter<"Turno"> | Date | string
    servicio?: StringFilter<"Turno"> | string
    duracion?: IntFilter<"Turno"> | number
    pacienteId?: StringFilter<"Turno"> | string
    confirmado?: BoolFilter<"Turno"> | boolean
    estado?: StringNullableFilter<"Turno"> | string | null
    fhCambioEstado?: DateTimeNullableFilter<"Turno"> | Date | string | null
    hsAviso?: StringNullableFilter<"Turno"> | string | null
    penal?: StringNullableFilter<"Turno"> | string | null
    createdAt?: DateTimeFilter<"Turno"> | Date | string
    updatedAt?: DateTimeFilter<"Turno"> | Date | string
    createdById?: StringNullableFilter<"Turno"> | string | null
    updatedById?: StringNullableFilter<"Turno"> | string | null
    consultorioId?: StringFilter<"Turno"> | string
    doctorId?: StringFilter<"Turno"> | string
    observaciones?: StringNullableFilter<"Turno"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Turno"> | string | null
    tipoDeTurnoId?: StringNullableFilter<"Turno"> | string | null
    consultorio?: XOR<ConsultorioScalarRelationFilter, ConsultorioWhereInput>
    doctor?: XOR<DoctorScalarRelationFilter, DoctorWhereInput>
    paciente?: XOR<PacienteScalarRelationFilter, PacienteWhereInput>
    coberturaMedica?: XOR<CoberturaMedicaNullableScalarRelationFilter, CoberturaMedicaWhereInput> | null
    tipoDeTurno?: XOR<TipoTurnoDoctorNullableScalarRelationFilter, TipoTurnoDoctorWhereInput> | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "token">

  export type TurnoOrderByWithAggregationInput = {
    id?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    servicio?: SortOrder
    duracion?: SortOrder
    pacienteId?: SortOrder
    confirmado?: SortOrder
    estado?: SortOrderInput | SortOrder
    fhCambioEstado?: SortOrderInput | SortOrder
    hsAviso?: SortOrderInput | SortOrder
    penal?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    consultorioId?: SortOrder
    doctorId?: SortOrder
    observaciones?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    coberturaMedicaId?: SortOrderInput | SortOrder
    tipoDeTurnoId?: SortOrderInput | SortOrder
    _count?: TurnoCountOrderByAggregateInput
    _avg?: TurnoAvgOrderByAggregateInput
    _max?: TurnoMaxOrderByAggregateInput
    _min?: TurnoMinOrderByAggregateInput
    _sum?: TurnoSumOrderByAggregateInput
  }

  export type TurnoScalarWhereWithAggregatesInput = {
    AND?: TurnoScalarWhereWithAggregatesInput | TurnoScalarWhereWithAggregatesInput[]
    OR?: TurnoScalarWhereWithAggregatesInput[]
    NOT?: TurnoScalarWhereWithAggregatesInput | TurnoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Turno"> | string
    desde?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    hasta?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    servicio?: StringWithAggregatesFilter<"Turno"> | string
    duracion?: IntWithAggregatesFilter<"Turno"> | number
    pacienteId?: StringWithAggregatesFilter<"Turno"> | string
    confirmado?: BoolWithAggregatesFilter<"Turno"> | boolean
    estado?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    fhCambioEstado?: DateTimeNullableWithAggregatesFilter<"Turno"> | Date | string | null
    hsAviso?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    penal?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    consultorioId?: StringWithAggregatesFilter<"Turno"> | string
    doctorId?: StringWithAggregatesFilter<"Turno"> | string
    observaciones?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    token?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    coberturaMedicaId?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    tipoDeTurnoId?: StringNullableWithAggregatesFilter<"Turno"> | string | null
  }

  export type EmailTokenWhereInput = {
    AND?: EmailTokenWhereInput | EmailTokenWhereInput[]
    OR?: EmailTokenWhereInput[]
    NOT?: EmailTokenWhereInput | EmailTokenWhereInput[]
    email?: StringFilter<"EmailToken"> | string
    token?: StringFilter<"EmailToken"> | string
    expires?: DateTimeFilter<"EmailToken"> | Date | string
    createdAt?: DateTimeFilter<"EmailToken"> | Date | string
    updatedAt?: DateTimeFilter<"EmailToken"> | Date | string
  }

  export type EmailTokenOrderByWithRelationInput = {
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTokenWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    AND?: EmailTokenWhereInput | EmailTokenWhereInput[]
    OR?: EmailTokenWhereInput[]
    NOT?: EmailTokenWhereInput | EmailTokenWhereInput[]
    token?: StringFilter<"EmailToken"> | string
    expires?: DateTimeFilter<"EmailToken"> | Date | string
    createdAt?: DateTimeFilter<"EmailToken"> | Date | string
    updatedAt?: DateTimeFilter<"EmailToken"> | Date | string
  }, "email" | "email">

  export type EmailTokenOrderByWithAggregationInput = {
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailTokenCountOrderByAggregateInput
    _max?: EmailTokenMaxOrderByAggregateInput
    _min?: EmailTokenMinOrderByAggregateInput
  }

  export type EmailTokenScalarWhereWithAggregatesInput = {
    AND?: EmailTokenScalarWhereWithAggregatesInput | EmailTokenScalarWhereWithAggregatesInput[]
    OR?: EmailTokenScalarWhereWithAggregatesInput[]
    NOT?: EmailTokenScalarWhereWithAggregatesInput | EmailTokenScalarWhereWithAggregatesInput[]
    email?: StringWithAggregatesFilter<"EmailToken"> | string
    token?: StringWithAggregatesFilter<"EmailToken"> | string
    expires?: DateTimeWithAggregatesFilter<"EmailToken"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailToken"> | Date | string
  }

  export type CoberturaMedicaWhereInput = {
    AND?: CoberturaMedicaWhereInput | CoberturaMedicaWhereInput[]
    OR?: CoberturaMedicaWhereInput[]
    NOT?: CoberturaMedicaWhereInput | CoberturaMedicaWhereInput[]
    id?: StringFilter<"CoberturaMedica"> | string
    nombre?: StringFilter<"CoberturaMedica"> | string
    codigo?: StringNullableFilter<"CoberturaMedica"> | string | null
    habilitado?: BoolFilter<"CoberturaMedica"> | boolean
    color?: StringNullableFilter<"CoberturaMedica"> | string | null
    createdAt?: DateTimeFilter<"CoberturaMedica"> | Date | string
    updatedAt?: DateTimeFilter<"CoberturaMedica"> | Date | string
    pacientes?: PacienteListRelationFilter
    turnos?: TurnoListRelationFilter
  }

  export type CoberturaMedicaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrderInput | SortOrder
    habilitado?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pacientes?: PacienteOrderByRelationAggregateInput
    turnos?: TurnoOrderByRelationAggregateInput
  }

  export type CoberturaMedicaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoberturaMedicaWhereInput | CoberturaMedicaWhereInput[]
    OR?: CoberturaMedicaWhereInput[]
    NOT?: CoberturaMedicaWhereInput | CoberturaMedicaWhereInput[]
    nombre?: StringFilter<"CoberturaMedica"> | string
    codigo?: StringNullableFilter<"CoberturaMedica"> | string | null
    habilitado?: BoolFilter<"CoberturaMedica"> | boolean
    color?: StringNullableFilter<"CoberturaMedica"> | string | null
    createdAt?: DateTimeFilter<"CoberturaMedica"> | Date | string
    updatedAt?: DateTimeFilter<"CoberturaMedica"> | Date | string
    pacientes?: PacienteListRelationFilter
    turnos?: TurnoListRelationFilter
  }, "id">

  export type CoberturaMedicaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrderInput | SortOrder
    habilitado?: SortOrder
    color?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoberturaMedicaCountOrderByAggregateInput
    _max?: CoberturaMedicaMaxOrderByAggregateInput
    _min?: CoberturaMedicaMinOrderByAggregateInput
  }

  export type CoberturaMedicaScalarWhereWithAggregatesInput = {
    AND?: CoberturaMedicaScalarWhereWithAggregatesInput | CoberturaMedicaScalarWhereWithAggregatesInput[]
    OR?: CoberturaMedicaScalarWhereWithAggregatesInput[]
    NOT?: CoberturaMedicaScalarWhereWithAggregatesInput | CoberturaMedicaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoberturaMedica"> | string
    nombre?: StringWithAggregatesFilter<"CoberturaMedica"> | string
    codigo?: StringNullableWithAggregatesFilter<"CoberturaMedica"> | string | null
    habilitado?: BoolWithAggregatesFilter<"CoberturaMedica"> | boolean
    color?: StringNullableWithAggregatesFilter<"CoberturaMedica"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CoberturaMedica"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoberturaMedica"> | Date | string
  }

  export type CuentasWhatsappWhereInput = {
    AND?: CuentasWhatsappWhereInput | CuentasWhatsappWhereInput[]
    OR?: CuentasWhatsappWhereInput[]
    NOT?: CuentasWhatsappWhereInput | CuentasWhatsappWhereInput[]
    id?: StringFilter<"CuentasWhatsapp"> | string
    nombre?: StringFilter<"CuentasWhatsapp"> | string
    url?: StringFilter<"CuentasWhatsapp"> | string
    token?: StringFilter<"CuentasWhatsapp"> | string
    createdAt?: DateTimeFilter<"CuentasWhatsapp"> | Date | string
    updatedAt?: DateTimeFilter<"CuentasWhatsapp"> | Date | string
  }

  export type CuentasWhatsappOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    url?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuentasWhatsappWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CuentasWhatsappWhereInput | CuentasWhatsappWhereInput[]
    OR?: CuentasWhatsappWhereInput[]
    NOT?: CuentasWhatsappWhereInput | CuentasWhatsappWhereInput[]
    nombre?: StringFilter<"CuentasWhatsapp"> | string
    url?: StringFilter<"CuentasWhatsapp"> | string
    token?: StringFilter<"CuentasWhatsapp"> | string
    createdAt?: DateTimeFilter<"CuentasWhatsapp"> | Date | string
    updatedAt?: DateTimeFilter<"CuentasWhatsapp"> | Date | string
  }, "id">

  export type CuentasWhatsappOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    url?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CuentasWhatsappCountOrderByAggregateInput
    _max?: CuentasWhatsappMaxOrderByAggregateInput
    _min?: CuentasWhatsappMinOrderByAggregateInput
  }

  export type CuentasWhatsappScalarWhereWithAggregatesInput = {
    AND?: CuentasWhatsappScalarWhereWithAggregatesInput | CuentasWhatsappScalarWhereWithAggregatesInput[]
    OR?: CuentasWhatsappScalarWhereWithAggregatesInput[]
    NOT?: CuentasWhatsappScalarWhereWithAggregatesInput | CuentasWhatsappScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CuentasWhatsapp"> | string
    nombre?: StringWithAggregatesFilter<"CuentasWhatsapp"> | string
    url?: StringWithAggregatesFilter<"CuentasWhatsapp"> | string
    token?: StringWithAggregatesFilter<"CuentasWhatsapp"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CuentasWhatsapp"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CuentasWhatsapp"> | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfiguracionConsultorioCreateInput = {
    id?: string
    nombreConsultorio: string
    domicilio: string
    telefono: string
    mail: string
    horarioAtencion: string
    web?: string | null
    coberturas: string
    limite: Date | string
    feriados?: ConfiguracionConsultorioCreateferiadosInput | string[]
    envio?: boolean
    horaEnvio?: string | null
    diasEnvio?: string | null
    envioMail?: boolean
    horaEnvioMail?: string | null
    diasEnvioMail?: string | null
    urlApp: string
    urlAppDev?: string | null
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfiguracionConsultorioUncheckedCreateInput = {
    id?: string
    nombreConsultorio: string
    domicilio: string
    telefono: string
    mail: string
    horarioAtencion: string
    web?: string | null
    coberturas: string
    limite: Date | string
    feriados?: ConfiguracionConsultorioCreateferiadosInput | string[]
    envio?: boolean
    horaEnvio?: string | null
    diasEnvio?: string | null
    envioMail?: boolean
    horaEnvioMail?: string | null
    diasEnvioMail?: string | null
    urlApp: string
    urlAppDev?: string | null
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfiguracionConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombreConsultorio?: StringFieldUpdateOperationsInput | string
    domicilio?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    horarioAtencion?: StringFieldUpdateOperationsInput | string
    web?: NullableStringFieldUpdateOperationsInput | string | null
    coberturas?: StringFieldUpdateOperationsInput | string
    limite?: DateTimeFieldUpdateOperationsInput | Date | string
    feriados?: ConfiguracionConsultorioUpdateferiadosInput | string[]
    envio?: BoolFieldUpdateOperationsInput | boolean
    horaEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    envioMail?: BoolFieldUpdateOperationsInput | boolean
    horaEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    urlApp?: StringFieldUpdateOperationsInput | string
    urlAppDev?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfiguracionConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombreConsultorio?: StringFieldUpdateOperationsInput | string
    domicilio?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    horarioAtencion?: StringFieldUpdateOperationsInput | string
    web?: NullableStringFieldUpdateOperationsInput | string | null
    coberturas?: StringFieldUpdateOperationsInput | string
    limite?: DateTimeFieldUpdateOperationsInput | Date | string
    feriados?: ConfiguracionConsultorioUpdateferiadosInput | string[]
    envio?: BoolFieldUpdateOperationsInput | boolean
    horaEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    envioMail?: BoolFieldUpdateOperationsInput | boolean
    horaEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    urlApp?: StringFieldUpdateOperationsInput | string
    urlAppDev?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfiguracionConsultorioCreateManyInput = {
    id?: string
    nombreConsultorio: string
    domicilio: string
    telefono: string
    mail: string
    horarioAtencion: string
    web?: string | null
    coberturas: string
    limite: Date | string
    feriados?: ConfiguracionConsultorioCreateferiadosInput | string[]
    envio?: boolean
    horaEnvio?: string | null
    diasEnvio?: string | null
    envioMail?: boolean
    horaEnvioMail?: string | null
    diasEnvioMail?: string | null
    urlApp: string
    urlAppDev?: string | null
    logoUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConfiguracionConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombreConsultorio?: StringFieldUpdateOperationsInput | string
    domicilio?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    horarioAtencion?: StringFieldUpdateOperationsInput | string
    web?: NullableStringFieldUpdateOperationsInput | string | null
    coberturas?: StringFieldUpdateOperationsInput | string
    limite?: DateTimeFieldUpdateOperationsInput | Date | string
    feriados?: ConfiguracionConsultorioUpdateferiadosInput | string[]
    envio?: BoolFieldUpdateOperationsInput | boolean
    horaEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    envioMail?: BoolFieldUpdateOperationsInput | boolean
    horaEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    urlApp?: StringFieldUpdateOperationsInput | string
    urlAppDev?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConfiguracionConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombreConsultorio?: StringFieldUpdateOperationsInput | string
    domicilio?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    mail?: StringFieldUpdateOperationsInput | string
    horarioAtencion?: StringFieldUpdateOperationsInput | string
    web?: NullableStringFieldUpdateOperationsInput | string | null
    coberturas?: StringFieldUpdateOperationsInput | string
    limite?: DateTimeFieldUpdateOperationsInput | Date | string
    feriados?: ConfiguracionConsultorioUpdateferiadosInput | string[]
    envio?: BoolFieldUpdateOperationsInput | boolean
    horaEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvio?: NullableStringFieldUpdateOperationsInput | string | null
    envioMail?: BoolFieldUpdateOperationsInput | boolean
    horaEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    diasEnvioMail?: NullableStringFieldUpdateOperationsInput | string | null
    urlApp?: StringFieldUpdateOperationsInput | string
    urlAppDev?: NullableStringFieldUpdateOperationsInput | string | null
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultorioCreateInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutConsultorioInput
    agendaDoctor?: AgendaDoctorCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioUncheckedCreateInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoUncheckedCreateNestedManyWithoutConsultorioInput
    agendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutConsultorioNestedInput
    agendaDoctor?: AgendaDoctorUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUpdateManyWithoutConsultoriosNestedInput
  }

  export type ConsultorioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUncheckedUpdateManyWithoutConsultorioNestedInput
    agendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosNestedInput
  }

  export type ConsultorioCreateManyInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsultorioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsultorioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorCreateNestedManyWithoutDoctorInput
    Turno?: TurnoCreateNestedManyWithoutDoctorInput
    usuarios?: UserCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutDoctorInput
    Turno?: TurnoUncheckedCreateNestedManyWithoutDoctorInput
    usuarios?: UserUncheckedCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUpdateManyWithoutDoctoresNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUncheckedUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUncheckedUpdateManyWithoutDoctoresNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorCreateInput = {
    id?: string
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutAgendaDoctorInput
    consultorio?: ConsultorioCreateNestedOneWithoutAgendaDoctorInput
  }

  export type AgendaDoctorUncheckedCreateInput = {
    id?: string
    doctorId: string
    consultorioId?: string | null
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaDoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutAgendaDoctorNestedInput
    consultorio?: ConsultorioUpdateOneWithoutAgendaDoctorNestedInput
  }

  export type AgendaDoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    consultorioId?: NullableStringFieldUpdateOperationsInput | string | null
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorCreateManyInput = {
    id?: string
    doctorId: string
    consultorioId?: string | null
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaDoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    consultorioId?: NullableStringFieldUpdateOperationsInput | string | null
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoTurnoDoctorCreateInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutTipoTurnoDoctorInput
    consultorios?: ConsultorioCreateNestedManyWithoutTiposTurnoInput
    turnos?: TurnoCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorUncheckedCreateInput = {
    id?: string
    doctorId: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorios?: ConsultorioUncheckedCreateNestedManyWithoutTiposTurnoInput
    turnos?: TurnoUncheckedCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutTipoTurnoDoctorNestedInput
    consultorios?: ConsultorioUpdateManyWithoutTiposTurnoNestedInput
    turnos?: TurnoUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUncheckedUpdateManyWithoutTiposTurnoNestedInput
    turnos?: TurnoUncheckedUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorCreateManyInput = {
    id?: string
    doctorId: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TipoTurnoDoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoTurnoDoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PacienteCreateInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutPacienteInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutPacientesInput
    createdBy?: UserCreateNestedOneWithoutPacientesCreadosInput
    updatedBy?: UserCreateNestedOneWithoutPacientesEditadosInput
  }

  export type PacienteUncheckedCreateInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    turnos?: TurnoUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutPacienteNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutPacientesNestedInput
    createdBy?: UserUpdateOneWithoutPacientesCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutPacientesEditadosNestedInput
  }

  export type PacienteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    turnos?: TurnoUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteCreateManyInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PacienteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PacienteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoCreateInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoCreateManyInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EmailTokenCreateInput = {
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTokenUncheckedCreateInput = {
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTokenUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTokenUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTokenCreateManyInput = {
    email: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailTokenUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailTokenUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoberturaMedicaCreateInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pacientes?: PacienteCreateNestedManyWithoutCoberturaMedicaInput
    turnos?: TurnoCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaUncheckedCreateInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pacientes?: PacienteUncheckedCreateNestedManyWithoutCoberturaMedicaInput
    turnos?: TurnoUncheckedCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pacientes?: PacienteUpdateManyWithoutCoberturaMedicaNestedInput
    turnos?: TurnoUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type CoberturaMedicaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pacientes?: PacienteUncheckedUpdateManyWithoutCoberturaMedicaNestedInput
    turnos?: TurnoUncheckedUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type CoberturaMedicaCreateManyInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoberturaMedicaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoberturaMedicaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuentasWhatsappCreateInput = {
    id?: string
    nombre: string
    url: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuentasWhatsappUncheckedCreateInput = {
    id?: string
    nombre: string
    url: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuentasWhatsappUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuentasWhatsappUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuentasWhatsappCreateManyInput = {
    id?: string
    nombre: string
    url: string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CuentasWhatsappUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CuentasWhatsappUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type PacienteListRelationFilter = {
    every?: PacienteWhereInput
    some?: PacienteWhereInput
    none?: PacienteWhereInput
  }

  export type TurnoListRelationFilter = {
    every?: TurnoWhereInput
    some?: TurnoWhereInput
    none?: TurnoWhereInput
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PacienteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurnoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    enabled?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    perfil?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    perfil?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    enabled?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    perfil?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    enabled?: SortOrder
    token?: SortOrder
    tokenExpires?: SortOrder
    perfil?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    perfil?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ConfiguracionConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    nombreConsultorio?: SortOrder
    domicilio?: SortOrder
    telefono?: SortOrder
    mail?: SortOrder
    horarioAtencion?: SortOrder
    web?: SortOrder
    coberturas?: SortOrder
    limite?: SortOrder
    feriados?: SortOrder
    envio?: SortOrder
    horaEnvio?: SortOrder
    diasEnvio?: SortOrder
    envioMail?: SortOrder
    horaEnvioMail?: SortOrder
    diasEnvioMail?: SortOrder
    urlApp?: SortOrder
    urlAppDev?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfiguracionConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombreConsultorio?: SortOrder
    domicilio?: SortOrder
    telefono?: SortOrder
    mail?: SortOrder
    horarioAtencion?: SortOrder
    web?: SortOrder
    coberturas?: SortOrder
    limite?: SortOrder
    envio?: SortOrder
    horaEnvio?: SortOrder
    diasEnvio?: SortOrder
    envioMail?: SortOrder
    horaEnvioMail?: SortOrder
    diasEnvioMail?: SortOrder
    urlApp?: SortOrder
    urlAppDev?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConfiguracionConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    nombreConsultorio?: SortOrder
    domicilio?: SortOrder
    telefono?: SortOrder
    mail?: SortOrder
    horarioAtencion?: SortOrder
    web?: SortOrder
    coberturas?: SortOrder
    limite?: SortOrder
    envio?: SortOrder
    horaEnvio?: SortOrder
    diasEnvio?: SortOrder
    envioMail?: SortOrder
    horaEnvioMail?: SortOrder
    diasEnvioMail?: SortOrder
    urlApp?: SortOrder
    urlAppDev?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaDoctorListRelationFilter = {
    every?: AgendaDoctorWhereInput
    some?: AgendaDoctorWhereInput
    none?: AgendaDoctorWhereInput
  }

  export type TipoTurnoDoctorListRelationFilter = {
    every?: TipoTurnoDoctorWhereInput
    some?: TipoTurnoDoctorWhereInput
    none?: TipoTurnoDoctorWhereInput
  }

  export type AgendaDoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TipoTurnoDoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsultorioCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsultorioMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsultorioMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    direccion?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    emoji?: SortOrder
    feriados?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    emoji?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    emoji?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoctorScalarRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type ConsultorioNullableScalarRelationFilter = {
    is?: ConsultorioWhereInput | null
    isNot?: ConsultorioWhereInput | null
  }

  export type AgendaDoctorCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    consultorioId?: SortOrder
    dia?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    atencion?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    corteDesde?: SortOrder
    corteHasta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaDoctorAvgOrderByAggregateInput = {
    dia?: SortOrder
  }

  export type AgendaDoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    consultorioId?: SortOrder
    dia?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    atencion?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    corteDesde?: SortOrder
    corteHasta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaDoctorMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    consultorioId?: SortOrder
    dia?: SortOrder
    fecha?: SortOrder
    nombre?: SortOrder
    atencion?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    corteDesde?: SortOrder
    corteHasta?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AgendaDoctorSumOrderByAggregateInput = {
    dia?: SortOrder
  }

  export type ConsultorioListRelationFilter = {
    every?: ConsultorioWhereInput
    some?: ConsultorioWhereInput
    none?: ConsultorioWhereInput
  }

  export type ConsultorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TipoTurnoDoctorCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nombre?: SortOrder
    duracion?: SortOrder
    habilitado?: SortOrder
    publico?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TipoTurnoDoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nombre?: SortOrder
    duracion?: SortOrder
    habilitado?: SortOrder
    publico?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TipoTurnoDoctorMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    nombre?: SortOrder
    duracion?: SortOrder
    habilitado?: SortOrder
    publico?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoberturaMedicaNullableScalarRelationFilter = {
    is?: CoberturaMedicaWhereInput | null
    isNot?: CoberturaMedicaWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type PacienteDniCelularCompoundUniqueInput = {
    dni: string
    celular: string
  }

  export type PacienteCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    dni?: SortOrder
    celular?: SortOrder
    email?: SortOrder
    cobertura?: SortOrder
    coberturaMedicaId?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PacienteMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    dni?: SortOrder
    celular?: SortOrder
    email?: SortOrder
    cobertura?: SortOrder
    coberturaMedicaId?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PacienteMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    dni?: SortOrder
    celular?: SortOrder
    email?: SortOrder
    cobertura?: SortOrder
    coberturaMedicaId?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ConsultorioScalarRelationFilter = {
    is?: ConsultorioWhereInput
    isNot?: ConsultorioWhereInput
  }

  export type PacienteScalarRelationFilter = {
    is?: PacienteWhereInput
    isNot?: PacienteWhereInput
  }

  export type TipoTurnoDoctorNullableScalarRelationFilter = {
    is?: TipoTurnoDoctorWhereInput | null
    isNot?: TipoTurnoDoctorWhereInput | null
  }

  export type TurnoCountOrderByAggregateInput = {
    id?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    servicio?: SortOrder
    duracion?: SortOrder
    pacienteId?: SortOrder
    confirmado?: SortOrder
    estado?: SortOrder
    fhCambioEstado?: SortOrder
    hsAviso?: SortOrder
    penal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    consultorioId?: SortOrder
    doctorId?: SortOrder
    observaciones?: SortOrder
    token?: SortOrder
    coberturaMedicaId?: SortOrder
    tipoDeTurnoId?: SortOrder
  }

  export type TurnoAvgOrderByAggregateInput = {
    duracion?: SortOrder
  }

  export type TurnoMaxOrderByAggregateInput = {
    id?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    servicio?: SortOrder
    duracion?: SortOrder
    pacienteId?: SortOrder
    confirmado?: SortOrder
    estado?: SortOrder
    fhCambioEstado?: SortOrder
    hsAviso?: SortOrder
    penal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    consultorioId?: SortOrder
    doctorId?: SortOrder
    observaciones?: SortOrder
    token?: SortOrder
    coberturaMedicaId?: SortOrder
    tipoDeTurnoId?: SortOrder
  }

  export type TurnoMinOrderByAggregateInput = {
    id?: SortOrder
    desde?: SortOrder
    hasta?: SortOrder
    servicio?: SortOrder
    duracion?: SortOrder
    pacienteId?: SortOrder
    confirmado?: SortOrder
    estado?: SortOrder
    fhCambioEstado?: SortOrder
    hsAviso?: SortOrder
    penal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    consultorioId?: SortOrder
    doctorId?: SortOrder
    observaciones?: SortOrder
    token?: SortOrder
    coberturaMedicaId?: SortOrder
    tipoDeTurnoId?: SortOrder
  }

  export type TurnoSumOrderByAggregateInput = {
    duracion?: SortOrder
  }

  export type EmailTokenCountOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTokenMaxOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailTokenMinOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoberturaMedicaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    habilitado?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoberturaMedicaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    habilitado?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoberturaMedicaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    habilitado?: SortOrder
    color?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuentasWhatsappCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    url?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuentasWhatsappMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    url?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CuentasWhatsappMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    url?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PacienteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput> | PacienteCreateWithoutCreatedByInput[] | PacienteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCreatedByInput | PacienteCreateOrConnectWithoutCreatedByInput[]
    createMany?: PacienteCreateManyCreatedByInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type PacienteCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput> | PacienteCreateWithoutUpdatedByInput[] | PacienteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutUpdatedByInput | PacienteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PacienteCreateManyUpdatedByInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type TurnoCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput> | TurnoCreateWithoutCreatedByInput[] | TurnoUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCreatedByInput | TurnoCreateOrConnectWithoutCreatedByInput[]
    createMany?: TurnoCreateManyCreatedByInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type TurnoCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput> | TurnoCreateWithoutUpdatedByInput[] | TurnoUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutUpdatedByInput | TurnoCreateOrConnectWithoutUpdatedByInput[]
    createMany?: TurnoCreateManyUpdatedByInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type DoctorCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput> | DoctorCreateWithoutUsuariosInput[] | DoctorUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUsuariosInput | DoctorCreateOrConnectWithoutUsuariosInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type PacienteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput> | PacienteCreateWithoutCreatedByInput[] | PacienteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCreatedByInput | PacienteCreateOrConnectWithoutCreatedByInput[]
    createMany?: PacienteCreateManyCreatedByInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type PacienteUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput> | PacienteCreateWithoutUpdatedByInput[] | PacienteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutUpdatedByInput | PacienteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PacienteCreateManyUpdatedByInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput> | TurnoCreateWithoutCreatedByInput[] | TurnoUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCreatedByInput | TurnoCreateOrConnectWithoutCreatedByInput[]
    createMany?: TurnoCreateManyCreatedByInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput> | TurnoCreateWithoutUpdatedByInput[] | TurnoUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutUpdatedByInput | TurnoCreateOrConnectWithoutUpdatedByInput[]
    createMany?: TurnoCreateManyUpdatedByInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutUsuariosInput = {
    create?: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput> | DoctorCreateWithoutUsuariosInput[] | DoctorUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUsuariosInput | DoctorCreateOrConnectWithoutUsuariosInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PacienteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput> | PacienteCreateWithoutCreatedByInput[] | PacienteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCreatedByInput | PacienteCreateOrConnectWithoutCreatedByInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutCreatedByInput | PacienteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PacienteCreateManyCreatedByInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutCreatedByInput | PacienteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutCreatedByInput | PacienteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type PacienteUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput> | PacienteCreateWithoutUpdatedByInput[] | PacienteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutUpdatedByInput | PacienteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutUpdatedByInput | PacienteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PacienteCreateManyUpdatedByInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutUpdatedByInput | PacienteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutUpdatedByInput | PacienteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type TurnoUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput> | TurnoCreateWithoutCreatedByInput[] | TurnoUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCreatedByInput | TurnoCreateOrConnectWithoutCreatedByInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutCreatedByInput | TurnoUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TurnoCreateManyCreatedByInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutCreatedByInput | TurnoUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutCreatedByInput | TurnoUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type TurnoUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput> | TurnoCreateWithoutUpdatedByInput[] | TurnoUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutUpdatedByInput | TurnoCreateOrConnectWithoutUpdatedByInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutUpdatedByInput | TurnoUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: TurnoCreateManyUpdatedByInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutUpdatedByInput | TurnoUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutUpdatedByInput | TurnoUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type DoctorUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput> | DoctorCreateWithoutUsuariosInput[] | DoctorUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUsuariosInput | DoctorCreateOrConnectWithoutUsuariosInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutUsuariosInput | DoctorUpsertWithWhereUniqueWithoutUsuariosInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutUsuariosInput | DoctorUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutUsuariosInput | DoctorUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type PacienteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput> | PacienteCreateWithoutCreatedByInput[] | PacienteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCreatedByInput | PacienteCreateOrConnectWithoutCreatedByInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutCreatedByInput | PacienteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PacienteCreateManyCreatedByInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutCreatedByInput | PacienteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutCreatedByInput | PacienteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput> | PacienteCreateWithoutUpdatedByInput[] | PacienteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutUpdatedByInput | PacienteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutUpdatedByInput | PacienteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PacienteCreateManyUpdatedByInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutUpdatedByInput | PacienteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutUpdatedByInput | PacienteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput> | TurnoCreateWithoutCreatedByInput[] | TurnoUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCreatedByInput | TurnoCreateOrConnectWithoutCreatedByInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutCreatedByInput | TurnoUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TurnoCreateManyCreatedByInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutCreatedByInput | TurnoUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutCreatedByInput | TurnoUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput> | TurnoCreateWithoutUpdatedByInput[] | TurnoUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutUpdatedByInput | TurnoCreateOrConnectWithoutUpdatedByInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutUpdatedByInput | TurnoUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: TurnoCreateManyUpdatedByInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutUpdatedByInput | TurnoUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutUpdatedByInput | TurnoUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutUsuariosNestedInput = {
    create?: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput> | DoctorCreateWithoutUsuariosInput[] | DoctorUncheckedCreateWithoutUsuariosInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUsuariosInput | DoctorCreateOrConnectWithoutUsuariosInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutUsuariosInput | DoctorUpsertWithWhereUniqueWithoutUsuariosInput[]
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutUsuariosInput | DoctorUpdateWithWhereUniqueWithoutUsuariosInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutUsuariosInput | DoctorUpdateManyWithWhereWithoutUsuariosInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type ConfiguracionConsultorioCreateferiadosInput = {
    set: string[]
  }

  export type ConfiguracionConsultorioUpdateferiadosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TurnoCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput> | TurnoCreateWithoutConsultorioInput[] | TurnoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutConsultorioInput | TurnoCreateOrConnectWithoutConsultorioInput[]
    createMany?: TurnoCreateManyConsultorioInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type AgendaDoctorCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput> | AgendaDoctorCreateWithoutConsultorioInput[] | AgendaDoctorUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutConsultorioInput | AgendaDoctorCreateOrConnectWithoutConsultorioInput[]
    createMany?: AgendaDoctorCreateManyConsultorioInputEnvelope
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
  }

  export type TipoTurnoDoctorCreateNestedManyWithoutConsultoriosInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput> | TipoTurnoDoctorCreateWithoutConsultoriosInput[] | TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput | TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput> | TurnoCreateWithoutConsultorioInput[] | TurnoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutConsultorioInput | TurnoCreateOrConnectWithoutConsultorioInput[]
    createMany?: TurnoCreateManyConsultorioInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type AgendaDoctorUncheckedCreateNestedManyWithoutConsultorioInput = {
    create?: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput> | AgendaDoctorCreateWithoutConsultorioInput[] | AgendaDoctorUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutConsultorioInput | AgendaDoctorCreateOrConnectWithoutConsultorioInput[]
    createMany?: AgendaDoctorCreateManyConsultorioInputEnvelope
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
  }

  export type TipoTurnoDoctorUncheckedCreateNestedManyWithoutConsultoriosInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput> | TipoTurnoDoctorCreateWithoutConsultoriosInput[] | TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput | TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
  }

  export type TurnoUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput> | TurnoCreateWithoutConsultorioInput[] | TurnoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutConsultorioInput | TurnoCreateOrConnectWithoutConsultorioInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutConsultorioInput | TurnoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: TurnoCreateManyConsultorioInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutConsultorioInput | TurnoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutConsultorioInput | TurnoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type AgendaDoctorUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput> | AgendaDoctorCreateWithoutConsultorioInput[] | AgendaDoctorUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutConsultorioInput | AgendaDoctorCreateOrConnectWithoutConsultorioInput[]
    upsert?: AgendaDoctorUpsertWithWhereUniqueWithoutConsultorioInput | AgendaDoctorUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: AgendaDoctorCreateManyConsultorioInputEnvelope
    set?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    disconnect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    delete?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    update?: AgendaDoctorUpdateWithWhereUniqueWithoutConsultorioInput | AgendaDoctorUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: AgendaDoctorUpdateManyWithWhereWithoutConsultorioInput | AgendaDoctorUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
  }

  export type TipoTurnoDoctorUpdateManyWithoutConsultoriosNestedInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput> | TipoTurnoDoctorCreateWithoutConsultoriosInput[] | TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput | TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput[]
    upsert?: TipoTurnoDoctorUpsertWithWhereUniqueWithoutConsultoriosInput | TipoTurnoDoctorUpsertWithWhereUniqueWithoutConsultoriosInput[]
    set?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    disconnect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    delete?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    update?: TipoTurnoDoctorUpdateWithWhereUniqueWithoutConsultoriosInput | TipoTurnoDoctorUpdateWithWhereUniqueWithoutConsultoriosInput[]
    updateMany?: TipoTurnoDoctorUpdateManyWithWhereWithoutConsultoriosInput | TipoTurnoDoctorUpdateManyWithWhereWithoutConsultoriosInput[]
    deleteMany?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput> | TurnoCreateWithoutConsultorioInput[] | TurnoUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutConsultorioInput | TurnoCreateOrConnectWithoutConsultorioInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutConsultorioInput | TurnoUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: TurnoCreateManyConsultorioInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutConsultorioInput | TurnoUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutConsultorioInput | TurnoUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type AgendaDoctorUncheckedUpdateManyWithoutConsultorioNestedInput = {
    create?: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput> | AgendaDoctorCreateWithoutConsultorioInput[] | AgendaDoctorUncheckedCreateWithoutConsultorioInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutConsultorioInput | AgendaDoctorCreateOrConnectWithoutConsultorioInput[]
    upsert?: AgendaDoctorUpsertWithWhereUniqueWithoutConsultorioInput | AgendaDoctorUpsertWithWhereUniqueWithoutConsultorioInput[]
    createMany?: AgendaDoctorCreateManyConsultorioInputEnvelope
    set?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    disconnect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    delete?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    update?: AgendaDoctorUpdateWithWhereUniqueWithoutConsultorioInput | AgendaDoctorUpdateWithWhereUniqueWithoutConsultorioInput[]
    updateMany?: AgendaDoctorUpdateManyWithWhereWithoutConsultorioInput | AgendaDoctorUpdateManyWithWhereWithoutConsultorioInput[]
    deleteMany?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
  }

  export type TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosNestedInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput> | TipoTurnoDoctorCreateWithoutConsultoriosInput[] | TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput | TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput[]
    upsert?: TipoTurnoDoctorUpsertWithWhereUniqueWithoutConsultoriosInput | TipoTurnoDoctorUpsertWithWhereUniqueWithoutConsultoriosInput[]
    set?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    disconnect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    delete?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    update?: TipoTurnoDoctorUpdateWithWhereUniqueWithoutConsultoriosInput | TipoTurnoDoctorUpdateWithWhereUniqueWithoutConsultoriosInput[]
    updateMany?: TipoTurnoDoctorUpdateManyWithWhereWithoutConsultoriosInput | TipoTurnoDoctorUpdateManyWithWhereWithoutConsultoriosInput[]
    deleteMany?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
  }

  export type DoctorCreateferiadosInput = {
    set: string[]
  }

  export type AgendaDoctorCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput> | AgendaDoctorCreateWithoutDoctorInput[] | AgendaDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutDoctorInput | AgendaDoctorCreateOrConnectWithoutDoctorInput[]
    createMany?: AgendaDoctorCreateManyDoctorInputEnvelope
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
  }

  export type TipoTurnoDoctorCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput> | TipoTurnoDoctorCreateWithoutDoctorInput[] | TipoTurnoDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutDoctorInput | TipoTurnoDoctorCreateOrConnectWithoutDoctorInput[]
    createMany?: TipoTurnoDoctorCreateManyDoctorInputEnvelope
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
  }

  export type TurnoCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput> | TurnoCreateWithoutDoctorInput[] | TurnoUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutDoctorInput | TurnoCreateOrConnectWithoutDoctorInput[]
    createMany?: TurnoCreateManyDoctorInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDoctoresInput = {
    create?: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput> | UserCreateWithoutDoctoresInput[] | UserUncheckedCreateWithoutDoctoresInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctoresInput | UserCreateOrConnectWithoutDoctoresInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type AgendaDoctorUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput> | AgendaDoctorCreateWithoutDoctorInput[] | AgendaDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutDoctorInput | AgendaDoctorCreateOrConnectWithoutDoctorInput[]
    createMany?: AgendaDoctorCreateManyDoctorInputEnvelope
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
  }

  export type TipoTurnoDoctorUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput> | TipoTurnoDoctorCreateWithoutDoctorInput[] | TipoTurnoDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutDoctorInput | TipoTurnoDoctorCreateOrConnectWithoutDoctorInput[]
    createMany?: TipoTurnoDoctorCreateManyDoctorInputEnvelope
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput> | TurnoCreateWithoutDoctorInput[] | TurnoUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutDoctorInput | TurnoCreateOrConnectWithoutDoctorInput[]
    createMany?: TurnoCreateManyDoctorInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDoctoresInput = {
    create?: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput> | UserCreateWithoutDoctoresInput[] | UserUncheckedCreateWithoutDoctoresInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctoresInput | UserCreateOrConnectWithoutDoctoresInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DoctorUpdateferiadosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AgendaDoctorUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput> | AgendaDoctorCreateWithoutDoctorInput[] | AgendaDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutDoctorInput | AgendaDoctorCreateOrConnectWithoutDoctorInput[]
    upsert?: AgendaDoctorUpsertWithWhereUniqueWithoutDoctorInput | AgendaDoctorUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AgendaDoctorCreateManyDoctorInputEnvelope
    set?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    disconnect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    delete?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    update?: AgendaDoctorUpdateWithWhereUniqueWithoutDoctorInput | AgendaDoctorUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AgendaDoctorUpdateManyWithWhereWithoutDoctorInput | AgendaDoctorUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
  }

  export type TipoTurnoDoctorUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput> | TipoTurnoDoctorCreateWithoutDoctorInput[] | TipoTurnoDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutDoctorInput | TipoTurnoDoctorCreateOrConnectWithoutDoctorInput[]
    upsert?: TipoTurnoDoctorUpsertWithWhereUniqueWithoutDoctorInput | TipoTurnoDoctorUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TipoTurnoDoctorCreateManyDoctorInputEnvelope
    set?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    disconnect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    delete?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    update?: TipoTurnoDoctorUpdateWithWhereUniqueWithoutDoctorInput | TipoTurnoDoctorUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TipoTurnoDoctorUpdateManyWithWhereWithoutDoctorInput | TipoTurnoDoctorUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
  }

  export type TurnoUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput> | TurnoCreateWithoutDoctorInput[] | TurnoUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutDoctorInput | TurnoCreateOrConnectWithoutDoctorInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutDoctorInput | TurnoUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TurnoCreateManyDoctorInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutDoctorInput | TurnoUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutDoctorInput | TurnoUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDoctoresNestedInput = {
    create?: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput> | UserCreateWithoutDoctoresInput[] | UserUncheckedCreateWithoutDoctoresInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctoresInput | UserCreateOrConnectWithoutDoctoresInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDoctoresInput | UserUpsertWithWhereUniqueWithoutDoctoresInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDoctoresInput | UserUpdateWithWhereUniqueWithoutDoctoresInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDoctoresInput | UserUpdateManyWithWhereWithoutDoctoresInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type AgendaDoctorUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput> | AgendaDoctorCreateWithoutDoctorInput[] | AgendaDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AgendaDoctorCreateOrConnectWithoutDoctorInput | AgendaDoctorCreateOrConnectWithoutDoctorInput[]
    upsert?: AgendaDoctorUpsertWithWhereUniqueWithoutDoctorInput | AgendaDoctorUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AgendaDoctorCreateManyDoctorInputEnvelope
    set?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    disconnect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    delete?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    connect?: AgendaDoctorWhereUniqueInput | AgendaDoctorWhereUniqueInput[]
    update?: AgendaDoctorUpdateWithWhereUniqueWithoutDoctorInput | AgendaDoctorUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AgendaDoctorUpdateManyWithWhereWithoutDoctorInput | AgendaDoctorUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
  }

  export type TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput> | TipoTurnoDoctorCreateWithoutDoctorInput[] | TipoTurnoDoctorUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutDoctorInput | TipoTurnoDoctorCreateOrConnectWithoutDoctorInput[]
    upsert?: TipoTurnoDoctorUpsertWithWhereUniqueWithoutDoctorInput | TipoTurnoDoctorUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TipoTurnoDoctorCreateManyDoctorInputEnvelope
    set?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    disconnect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    delete?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    connect?: TipoTurnoDoctorWhereUniqueInput | TipoTurnoDoctorWhereUniqueInput[]
    update?: TipoTurnoDoctorUpdateWithWhereUniqueWithoutDoctorInput | TipoTurnoDoctorUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TipoTurnoDoctorUpdateManyWithWhereWithoutDoctorInput | TipoTurnoDoctorUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput> | TurnoCreateWithoutDoctorInput[] | TurnoUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutDoctorInput | TurnoCreateOrConnectWithoutDoctorInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutDoctorInput | TurnoUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: TurnoCreateManyDoctorInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutDoctorInput | TurnoUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutDoctorInput | TurnoUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDoctoresNestedInput = {
    create?: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput> | UserCreateWithoutDoctoresInput[] | UserUncheckedCreateWithoutDoctoresInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDoctoresInput | UserCreateOrConnectWithoutDoctoresInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDoctoresInput | UserUpsertWithWhereUniqueWithoutDoctoresInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDoctoresInput | UserUpdateWithWhereUniqueWithoutDoctoresInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDoctoresInput | UserUpdateManyWithWhereWithoutDoctoresInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutAgendaDoctorInput = {
    create?: XOR<DoctorCreateWithoutAgendaDoctorInput, DoctorUncheckedCreateWithoutAgendaDoctorInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAgendaDoctorInput
    connect?: DoctorWhereUniqueInput
  }

  export type ConsultorioCreateNestedOneWithoutAgendaDoctorInput = {
    create?: XOR<ConsultorioCreateWithoutAgendaDoctorInput, ConsultorioUncheckedCreateWithoutAgendaDoctorInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutAgendaDoctorInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutAgendaDoctorNestedInput = {
    create?: XOR<DoctorCreateWithoutAgendaDoctorInput, DoctorUncheckedCreateWithoutAgendaDoctorInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAgendaDoctorInput
    upsert?: DoctorUpsertWithoutAgendaDoctorInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutAgendaDoctorInput, DoctorUpdateWithoutAgendaDoctorInput>, DoctorUncheckedUpdateWithoutAgendaDoctorInput>
  }

  export type ConsultorioUpdateOneWithoutAgendaDoctorNestedInput = {
    create?: XOR<ConsultorioCreateWithoutAgendaDoctorInput, ConsultorioUncheckedCreateWithoutAgendaDoctorInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutAgendaDoctorInput
    upsert?: ConsultorioUpsertWithoutAgendaDoctorInput
    disconnect?: ConsultorioWhereInput | boolean
    delete?: ConsultorioWhereInput | boolean
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutAgendaDoctorInput, ConsultorioUpdateWithoutAgendaDoctorInput>, ConsultorioUncheckedUpdateWithoutAgendaDoctorInput>
  }

  export type DoctorCreateNestedOneWithoutTipoTurnoDoctorInput = {
    create?: XOR<DoctorCreateWithoutTipoTurnoDoctorInput, DoctorUncheckedCreateWithoutTipoTurnoDoctorInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTipoTurnoDoctorInput
    connect?: DoctorWhereUniqueInput
  }

  export type ConsultorioCreateNestedManyWithoutTiposTurnoInput = {
    create?: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput> | ConsultorioCreateWithoutTiposTurnoInput[] | ConsultorioUncheckedCreateWithoutTiposTurnoInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTiposTurnoInput | ConsultorioCreateOrConnectWithoutTiposTurnoInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
  }

  export type TurnoCreateNestedManyWithoutTipoDeTurnoInput = {
    create?: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput> | TurnoCreateWithoutTipoDeTurnoInput[] | TurnoUncheckedCreateWithoutTipoDeTurnoInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutTipoDeTurnoInput | TurnoCreateOrConnectWithoutTipoDeTurnoInput[]
    createMany?: TurnoCreateManyTipoDeTurnoInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type ConsultorioUncheckedCreateNestedManyWithoutTiposTurnoInput = {
    create?: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput> | ConsultorioCreateWithoutTiposTurnoInput[] | ConsultorioUncheckedCreateWithoutTiposTurnoInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTiposTurnoInput | ConsultorioCreateOrConnectWithoutTiposTurnoInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutTipoDeTurnoInput = {
    create?: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput> | TurnoCreateWithoutTipoDeTurnoInput[] | TurnoUncheckedCreateWithoutTipoDeTurnoInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutTipoDeTurnoInput | TurnoCreateOrConnectWithoutTipoDeTurnoInput[]
    createMany?: TurnoCreateManyTipoDeTurnoInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type DoctorUpdateOneRequiredWithoutTipoTurnoDoctorNestedInput = {
    create?: XOR<DoctorCreateWithoutTipoTurnoDoctorInput, DoctorUncheckedCreateWithoutTipoTurnoDoctorInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTipoTurnoDoctorInput
    upsert?: DoctorUpsertWithoutTipoTurnoDoctorInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutTipoTurnoDoctorInput, DoctorUpdateWithoutTipoTurnoDoctorInput>, DoctorUncheckedUpdateWithoutTipoTurnoDoctorInput>
  }

  export type ConsultorioUpdateManyWithoutTiposTurnoNestedInput = {
    create?: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput> | ConsultorioCreateWithoutTiposTurnoInput[] | ConsultorioUncheckedCreateWithoutTiposTurnoInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTiposTurnoInput | ConsultorioCreateOrConnectWithoutTiposTurnoInput[]
    upsert?: ConsultorioUpsertWithWhereUniqueWithoutTiposTurnoInput | ConsultorioUpsertWithWhereUniqueWithoutTiposTurnoInput[]
    set?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    disconnect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    delete?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    update?: ConsultorioUpdateWithWhereUniqueWithoutTiposTurnoInput | ConsultorioUpdateWithWhereUniqueWithoutTiposTurnoInput[]
    updateMany?: ConsultorioUpdateManyWithWhereWithoutTiposTurnoInput | ConsultorioUpdateManyWithWhereWithoutTiposTurnoInput[]
    deleteMany?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
  }

  export type TurnoUpdateManyWithoutTipoDeTurnoNestedInput = {
    create?: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput> | TurnoCreateWithoutTipoDeTurnoInput[] | TurnoUncheckedCreateWithoutTipoDeTurnoInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutTipoDeTurnoInput | TurnoCreateOrConnectWithoutTipoDeTurnoInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutTipoDeTurnoInput | TurnoUpsertWithWhereUniqueWithoutTipoDeTurnoInput[]
    createMany?: TurnoCreateManyTipoDeTurnoInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutTipoDeTurnoInput | TurnoUpdateWithWhereUniqueWithoutTipoDeTurnoInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutTipoDeTurnoInput | TurnoUpdateManyWithWhereWithoutTipoDeTurnoInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type ConsultorioUncheckedUpdateManyWithoutTiposTurnoNestedInput = {
    create?: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput> | ConsultorioCreateWithoutTiposTurnoInput[] | ConsultorioUncheckedCreateWithoutTiposTurnoInput[]
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTiposTurnoInput | ConsultorioCreateOrConnectWithoutTiposTurnoInput[]
    upsert?: ConsultorioUpsertWithWhereUniqueWithoutTiposTurnoInput | ConsultorioUpsertWithWhereUniqueWithoutTiposTurnoInput[]
    set?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    disconnect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    delete?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    connect?: ConsultorioWhereUniqueInput | ConsultorioWhereUniqueInput[]
    update?: ConsultorioUpdateWithWhereUniqueWithoutTiposTurnoInput | ConsultorioUpdateWithWhereUniqueWithoutTiposTurnoInput[]
    updateMany?: ConsultorioUpdateManyWithWhereWithoutTiposTurnoInput | ConsultorioUpdateManyWithWhereWithoutTiposTurnoInput[]
    deleteMany?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutTipoDeTurnoNestedInput = {
    create?: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput> | TurnoCreateWithoutTipoDeTurnoInput[] | TurnoUncheckedCreateWithoutTipoDeTurnoInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutTipoDeTurnoInput | TurnoCreateOrConnectWithoutTipoDeTurnoInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutTipoDeTurnoInput | TurnoUpsertWithWhereUniqueWithoutTipoDeTurnoInput[]
    createMany?: TurnoCreateManyTipoDeTurnoInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutTipoDeTurnoInput | TurnoUpdateWithWhereUniqueWithoutTipoDeTurnoInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutTipoDeTurnoInput | TurnoUpdateManyWithWhereWithoutTipoDeTurnoInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type TurnoCreateNestedManyWithoutPacienteInput = {
    create?: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput> | TurnoCreateWithoutPacienteInput[] | TurnoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutPacienteInput | TurnoCreateOrConnectWithoutPacienteInput[]
    createMany?: TurnoCreateManyPacienteInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type CoberturaMedicaCreateNestedOneWithoutPacientesInput = {
    create?: XOR<CoberturaMedicaCreateWithoutPacientesInput, CoberturaMedicaUncheckedCreateWithoutPacientesInput>
    connectOrCreate?: CoberturaMedicaCreateOrConnectWithoutPacientesInput
    connect?: CoberturaMedicaWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPacientesCreadosInput = {
    create?: XOR<UserCreateWithoutPacientesCreadosInput, UserUncheckedCreateWithoutPacientesCreadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPacientesCreadosInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPacientesEditadosInput = {
    create?: XOR<UserCreateWithoutPacientesEditadosInput, UserUncheckedCreateWithoutPacientesEditadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPacientesEditadosInput
    connect?: UserWhereUniqueInput
  }

  export type TurnoUncheckedCreateNestedManyWithoutPacienteInput = {
    create?: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput> | TurnoCreateWithoutPacienteInput[] | TurnoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutPacienteInput | TurnoCreateOrConnectWithoutPacienteInput[]
    createMany?: TurnoCreateManyPacienteInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type TurnoUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput> | TurnoCreateWithoutPacienteInput[] | TurnoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutPacienteInput | TurnoCreateOrConnectWithoutPacienteInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutPacienteInput | TurnoUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: TurnoCreateManyPacienteInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutPacienteInput | TurnoUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutPacienteInput | TurnoUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type CoberturaMedicaUpdateOneWithoutPacientesNestedInput = {
    create?: XOR<CoberturaMedicaCreateWithoutPacientesInput, CoberturaMedicaUncheckedCreateWithoutPacientesInput>
    connectOrCreate?: CoberturaMedicaCreateOrConnectWithoutPacientesInput
    upsert?: CoberturaMedicaUpsertWithoutPacientesInput
    disconnect?: CoberturaMedicaWhereInput | boolean
    delete?: CoberturaMedicaWhereInput | boolean
    connect?: CoberturaMedicaWhereUniqueInput
    update?: XOR<XOR<CoberturaMedicaUpdateToOneWithWhereWithoutPacientesInput, CoberturaMedicaUpdateWithoutPacientesInput>, CoberturaMedicaUncheckedUpdateWithoutPacientesInput>
  }

  export type UserUpdateOneWithoutPacientesCreadosNestedInput = {
    create?: XOR<UserCreateWithoutPacientesCreadosInput, UserUncheckedCreateWithoutPacientesCreadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPacientesCreadosInput
    upsert?: UserUpsertWithoutPacientesCreadosInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPacientesCreadosInput, UserUpdateWithoutPacientesCreadosInput>, UserUncheckedUpdateWithoutPacientesCreadosInput>
  }

  export type UserUpdateOneWithoutPacientesEditadosNestedInput = {
    create?: XOR<UserCreateWithoutPacientesEditadosInput, UserUncheckedCreateWithoutPacientesEditadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPacientesEditadosInput
    upsert?: UserUpsertWithoutPacientesEditadosInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPacientesEditadosInput, UserUpdateWithoutPacientesEditadosInput>, UserUncheckedUpdateWithoutPacientesEditadosInput>
  }

  export type TurnoUncheckedUpdateManyWithoutPacienteNestedInput = {
    create?: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput> | TurnoCreateWithoutPacienteInput[] | TurnoUncheckedCreateWithoutPacienteInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutPacienteInput | TurnoCreateOrConnectWithoutPacienteInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutPacienteInput | TurnoUpsertWithWhereUniqueWithoutPacienteInput[]
    createMany?: TurnoCreateManyPacienteInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutPacienteInput | TurnoUpdateWithWhereUniqueWithoutPacienteInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutPacienteInput | TurnoUpdateManyWithWhereWithoutPacienteInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type ConsultorioCreateNestedOneWithoutTurnosInput = {
    create?: XOR<ConsultorioCreateWithoutTurnosInput, ConsultorioUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTurnosInput
    connect?: ConsultorioWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutTurnoInput = {
    create?: XOR<DoctorCreateWithoutTurnoInput, DoctorUncheckedCreateWithoutTurnoInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTurnoInput
    connect?: DoctorWhereUniqueInput
  }

  export type PacienteCreateNestedOneWithoutTurnosInput = {
    create?: XOR<PacienteCreateWithoutTurnosInput, PacienteUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutTurnosInput
    connect?: PacienteWhereUniqueInput
  }

  export type CoberturaMedicaCreateNestedOneWithoutTurnosInput = {
    create?: XOR<CoberturaMedicaCreateWithoutTurnosInput, CoberturaMedicaUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: CoberturaMedicaCreateOrConnectWithoutTurnosInput
    connect?: CoberturaMedicaWhereUniqueInput
  }

  export type TipoTurnoDoctorCreateNestedOneWithoutTurnosInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutTurnosInput, TipoTurnoDoctorUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutTurnosInput
    connect?: TipoTurnoDoctorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTurnosCreadosInput = {
    create?: XOR<UserCreateWithoutTurnosCreadosInput, UserUncheckedCreateWithoutTurnosCreadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTurnosCreadosInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTurnosEditadosInput = {
    create?: XOR<UserCreateWithoutTurnosEditadosInput, UserUncheckedCreateWithoutTurnosEditadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTurnosEditadosInput
    connect?: UserWhereUniqueInput
  }

  export type ConsultorioUpdateOneRequiredWithoutTurnosNestedInput = {
    create?: XOR<ConsultorioCreateWithoutTurnosInput, ConsultorioUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: ConsultorioCreateOrConnectWithoutTurnosInput
    upsert?: ConsultorioUpsertWithoutTurnosInput
    connect?: ConsultorioWhereUniqueInput
    update?: XOR<XOR<ConsultorioUpdateToOneWithWhereWithoutTurnosInput, ConsultorioUpdateWithoutTurnosInput>, ConsultorioUncheckedUpdateWithoutTurnosInput>
  }

  export type DoctorUpdateOneRequiredWithoutTurnoNestedInput = {
    create?: XOR<DoctorCreateWithoutTurnoInput, DoctorUncheckedCreateWithoutTurnoInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutTurnoInput
    upsert?: DoctorUpsertWithoutTurnoInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutTurnoInput, DoctorUpdateWithoutTurnoInput>, DoctorUncheckedUpdateWithoutTurnoInput>
  }

  export type PacienteUpdateOneRequiredWithoutTurnosNestedInput = {
    create?: XOR<PacienteCreateWithoutTurnosInput, PacienteUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: PacienteCreateOrConnectWithoutTurnosInput
    upsert?: PacienteUpsertWithoutTurnosInput
    connect?: PacienteWhereUniqueInput
    update?: XOR<XOR<PacienteUpdateToOneWithWhereWithoutTurnosInput, PacienteUpdateWithoutTurnosInput>, PacienteUncheckedUpdateWithoutTurnosInput>
  }

  export type CoberturaMedicaUpdateOneWithoutTurnosNestedInput = {
    create?: XOR<CoberturaMedicaCreateWithoutTurnosInput, CoberturaMedicaUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: CoberturaMedicaCreateOrConnectWithoutTurnosInput
    upsert?: CoberturaMedicaUpsertWithoutTurnosInput
    disconnect?: CoberturaMedicaWhereInput | boolean
    delete?: CoberturaMedicaWhereInput | boolean
    connect?: CoberturaMedicaWhereUniqueInput
    update?: XOR<XOR<CoberturaMedicaUpdateToOneWithWhereWithoutTurnosInput, CoberturaMedicaUpdateWithoutTurnosInput>, CoberturaMedicaUncheckedUpdateWithoutTurnosInput>
  }

  export type TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput = {
    create?: XOR<TipoTurnoDoctorCreateWithoutTurnosInput, TipoTurnoDoctorUncheckedCreateWithoutTurnosInput>
    connectOrCreate?: TipoTurnoDoctorCreateOrConnectWithoutTurnosInput
    upsert?: TipoTurnoDoctorUpsertWithoutTurnosInput
    disconnect?: TipoTurnoDoctorWhereInput | boolean
    delete?: TipoTurnoDoctorWhereInput | boolean
    connect?: TipoTurnoDoctorWhereUniqueInput
    update?: XOR<XOR<TipoTurnoDoctorUpdateToOneWithWhereWithoutTurnosInput, TipoTurnoDoctorUpdateWithoutTurnosInput>, TipoTurnoDoctorUncheckedUpdateWithoutTurnosInput>
  }

  export type UserUpdateOneWithoutTurnosCreadosNestedInput = {
    create?: XOR<UserCreateWithoutTurnosCreadosInput, UserUncheckedCreateWithoutTurnosCreadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTurnosCreadosInput
    upsert?: UserUpsertWithoutTurnosCreadosInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTurnosCreadosInput, UserUpdateWithoutTurnosCreadosInput>, UserUncheckedUpdateWithoutTurnosCreadosInput>
  }

  export type UserUpdateOneWithoutTurnosEditadosNestedInput = {
    create?: XOR<UserCreateWithoutTurnosEditadosInput, UserUncheckedCreateWithoutTurnosEditadosInput>
    connectOrCreate?: UserCreateOrConnectWithoutTurnosEditadosInput
    upsert?: UserUpsertWithoutTurnosEditadosInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTurnosEditadosInput, UserUpdateWithoutTurnosEditadosInput>, UserUncheckedUpdateWithoutTurnosEditadosInput>
  }

  export type PacienteCreateNestedManyWithoutCoberturaMedicaInput = {
    create?: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput> | PacienteCreateWithoutCoberturaMedicaInput[] | PacienteUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCoberturaMedicaInput | PacienteCreateOrConnectWithoutCoberturaMedicaInput[]
    createMany?: PacienteCreateManyCoberturaMedicaInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type TurnoCreateNestedManyWithoutCoberturaMedicaInput = {
    create?: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput> | TurnoCreateWithoutCoberturaMedicaInput[] | TurnoUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCoberturaMedicaInput | TurnoCreateOrConnectWithoutCoberturaMedicaInput[]
    createMany?: TurnoCreateManyCoberturaMedicaInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type PacienteUncheckedCreateNestedManyWithoutCoberturaMedicaInput = {
    create?: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput> | PacienteCreateWithoutCoberturaMedicaInput[] | PacienteUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCoberturaMedicaInput | PacienteCreateOrConnectWithoutCoberturaMedicaInput[]
    createMany?: PacienteCreateManyCoberturaMedicaInputEnvelope
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
  }

  export type TurnoUncheckedCreateNestedManyWithoutCoberturaMedicaInput = {
    create?: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput> | TurnoCreateWithoutCoberturaMedicaInput[] | TurnoUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCoberturaMedicaInput | TurnoCreateOrConnectWithoutCoberturaMedicaInput[]
    createMany?: TurnoCreateManyCoberturaMedicaInputEnvelope
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
  }

  export type PacienteUpdateManyWithoutCoberturaMedicaNestedInput = {
    create?: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput> | PacienteCreateWithoutCoberturaMedicaInput[] | PacienteUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCoberturaMedicaInput | PacienteCreateOrConnectWithoutCoberturaMedicaInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutCoberturaMedicaInput | PacienteUpsertWithWhereUniqueWithoutCoberturaMedicaInput[]
    createMany?: PacienteCreateManyCoberturaMedicaInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutCoberturaMedicaInput | PacienteUpdateWithWhereUniqueWithoutCoberturaMedicaInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutCoberturaMedicaInput | PacienteUpdateManyWithWhereWithoutCoberturaMedicaInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type TurnoUpdateManyWithoutCoberturaMedicaNestedInput = {
    create?: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput> | TurnoCreateWithoutCoberturaMedicaInput[] | TurnoUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCoberturaMedicaInput | TurnoCreateOrConnectWithoutCoberturaMedicaInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutCoberturaMedicaInput | TurnoUpsertWithWhereUniqueWithoutCoberturaMedicaInput[]
    createMany?: TurnoCreateManyCoberturaMedicaInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutCoberturaMedicaInput | TurnoUpdateWithWhereUniqueWithoutCoberturaMedicaInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutCoberturaMedicaInput | TurnoUpdateManyWithWhereWithoutCoberturaMedicaInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type PacienteUncheckedUpdateManyWithoutCoberturaMedicaNestedInput = {
    create?: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput> | PacienteCreateWithoutCoberturaMedicaInput[] | PacienteUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: PacienteCreateOrConnectWithoutCoberturaMedicaInput | PacienteCreateOrConnectWithoutCoberturaMedicaInput[]
    upsert?: PacienteUpsertWithWhereUniqueWithoutCoberturaMedicaInput | PacienteUpsertWithWhereUniqueWithoutCoberturaMedicaInput[]
    createMany?: PacienteCreateManyCoberturaMedicaInputEnvelope
    set?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    disconnect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    delete?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    connect?: PacienteWhereUniqueInput | PacienteWhereUniqueInput[]
    update?: PacienteUpdateWithWhereUniqueWithoutCoberturaMedicaInput | PacienteUpdateWithWhereUniqueWithoutCoberturaMedicaInput[]
    updateMany?: PacienteUpdateManyWithWhereWithoutCoberturaMedicaInput | PacienteUpdateManyWithWhereWithoutCoberturaMedicaInput[]
    deleteMany?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
  }

  export type TurnoUncheckedUpdateManyWithoutCoberturaMedicaNestedInput = {
    create?: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput> | TurnoCreateWithoutCoberturaMedicaInput[] | TurnoUncheckedCreateWithoutCoberturaMedicaInput[]
    connectOrCreate?: TurnoCreateOrConnectWithoutCoberturaMedicaInput | TurnoCreateOrConnectWithoutCoberturaMedicaInput[]
    upsert?: TurnoUpsertWithWhereUniqueWithoutCoberturaMedicaInput | TurnoUpsertWithWhereUniqueWithoutCoberturaMedicaInput[]
    createMany?: TurnoCreateManyCoberturaMedicaInputEnvelope
    set?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    disconnect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    delete?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    connect?: TurnoWhereUniqueInput | TurnoWhereUniqueInput[]
    update?: TurnoUpdateWithWhereUniqueWithoutCoberturaMedicaInput | TurnoUpdateWithWhereUniqueWithoutCoberturaMedicaInput[]
    updateMany?: TurnoUpdateManyWithWhereWithoutCoberturaMedicaInput | TurnoUpdateManyWithWhereWithoutCoberturaMedicaInput[]
    deleteMany?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PacienteCreateWithoutCreatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutPacienteInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutPacientesInput
    updatedBy?: UserCreateNestedOneWithoutPacientesEditadosInput
  }

  export type PacienteUncheckedCreateWithoutCreatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    turnos?: TurnoUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCreatedByInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput>
  }

  export type PacienteCreateManyCreatedByInputEnvelope = {
    data: PacienteCreateManyCreatedByInput | PacienteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PacienteCreateWithoutUpdatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutPacienteInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutPacientesInput
    createdBy?: UserCreateNestedOneWithoutPacientesCreadosInput
  }

  export type PacienteUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    turnos?: TurnoUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutUpdatedByInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput>
  }

  export type PacienteCreateManyUpdatedByInputEnvelope = {
    data: PacienteCreateManyUpdatedByInput | PacienteCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type TurnoCreateWithoutCreatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutCreatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutCreatedByInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput>
  }

  export type TurnoCreateManyCreatedByInputEnvelope = {
    data: TurnoCreateManyCreatedByInput | TurnoCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TurnoCreateWithoutUpdatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
  }

  export type TurnoUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutUpdatedByInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput>
  }

  export type TurnoCreateManyUpdatedByInputEnvelope = {
    data: TurnoCreateManyUpdatedByInput | TurnoCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutUsuariosInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorCreateNestedManyWithoutDoctorInput
    Turno?: TurnoCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutUsuariosInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutDoctorInput
    Turno?: TurnoUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutUsuariosInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type PacienteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PacienteWhereUniqueInput
    update: XOR<PacienteUpdateWithoutCreatedByInput, PacienteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PacienteCreateWithoutCreatedByInput, PacienteUncheckedCreateWithoutCreatedByInput>
  }

  export type PacienteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PacienteWhereUniqueInput
    data: XOR<PacienteUpdateWithoutCreatedByInput, PacienteUncheckedUpdateWithoutCreatedByInput>
  }

  export type PacienteUpdateManyWithWhereWithoutCreatedByInput = {
    where: PacienteScalarWhereInput
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PacienteScalarWhereInput = {
    AND?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
    OR?: PacienteScalarWhereInput[]
    NOT?: PacienteScalarWhereInput | PacienteScalarWhereInput[]
    id?: StringFilter<"Paciente"> | string
    nombre?: StringFilter<"Paciente"> | string
    apellido?: StringNullableFilter<"Paciente"> | string | null
    dni?: StringNullableFilter<"Paciente"> | string | null
    celular?: StringFilter<"Paciente"> | string
    email?: StringNullableFilter<"Paciente"> | string | null
    cobertura?: StringNullableFilter<"Paciente"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Paciente"> | string | null
    observaciones?: StringNullableFilter<"Paciente"> | string | null
    createdAt?: DateTimeFilter<"Paciente"> | Date | string
    updatedAt?: DateTimeFilter<"Paciente"> | Date | string
    createdById?: StringNullableFilter<"Paciente"> | string | null
    updatedById?: StringNullableFilter<"Paciente"> | string | null
  }

  export type PacienteUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PacienteWhereUniqueInput
    update: XOR<PacienteUpdateWithoutUpdatedByInput, PacienteUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PacienteCreateWithoutUpdatedByInput, PacienteUncheckedCreateWithoutUpdatedByInput>
  }

  export type PacienteUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PacienteWhereUniqueInput
    data: XOR<PacienteUpdateWithoutUpdatedByInput, PacienteUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PacienteUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PacienteScalarWhereInput
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type TurnoUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutCreatedByInput, TurnoUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TurnoCreateWithoutCreatedByInput, TurnoUncheckedCreateWithoutCreatedByInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutCreatedByInput, TurnoUncheckedUpdateWithoutCreatedByInput>
  }

  export type TurnoUpdateManyWithWhereWithoutCreatedByInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TurnoScalarWhereInput = {
    AND?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
    OR?: TurnoScalarWhereInput[]
    NOT?: TurnoScalarWhereInput | TurnoScalarWhereInput[]
    id?: StringFilter<"Turno"> | string
    desde?: DateTimeFilter<"Turno"> | Date | string
    hasta?: DateTimeFilter<"Turno"> | Date | string
    servicio?: StringFilter<"Turno"> | string
    duracion?: IntFilter<"Turno"> | number
    pacienteId?: StringFilter<"Turno"> | string
    confirmado?: BoolFilter<"Turno"> | boolean
    estado?: StringNullableFilter<"Turno"> | string | null
    fhCambioEstado?: DateTimeNullableFilter<"Turno"> | Date | string | null
    hsAviso?: StringNullableFilter<"Turno"> | string | null
    penal?: StringNullableFilter<"Turno"> | string | null
    createdAt?: DateTimeFilter<"Turno"> | Date | string
    updatedAt?: DateTimeFilter<"Turno"> | Date | string
    createdById?: StringNullableFilter<"Turno"> | string | null
    updatedById?: StringNullableFilter<"Turno"> | string | null
    consultorioId?: StringFilter<"Turno"> | string
    doctorId?: StringFilter<"Turno"> | string
    observaciones?: StringNullableFilter<"Turno"> | string | null
    token?: StringNullableFilter<"Turno"> | string | null
    coberturaMedicaId?: StringNullableFilter<"Turno"> | string | null
    tipoDeTurnoId?: StringNullableFilter<"Turno"> | string | null
  }

  export type TurnoUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutUpdatedByInput, TurnoUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<TurnoCreateWithoutUpdatedByInput, TurnoUncheckedCreateWithoutUpdatedByInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutUpdatedByInput, TurnoUncheckedUpdateWithoutUpdatedByInput>
  }

  export type TurnoUpdateManyWithWhereWithoutUpdatedByInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type DoctorUpsertWithWhereUniqueWithoutUsuariosInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutUsuariosInput, DoctorUncheckedUpdateWithoutUsuariosInput>
    create: XOR<DoctorCreateWithoutUsuariosInput, DoctorUncheckedCreateWithoutUsuariosInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutUsuariosInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutUsuariosInput, DoctorUncheckedUpdateWithoutUsuariosInput>
  }

  export type DoctorUpdateManyWithWhereWithoutUsuariosInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    OR?: DoctorScalarWhereInput[]
    NOT?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    id?: StringFilter<"Doctor"> | string
    nombre?: StringFilter<"Doctor"> | string
    emoji?: StringFilter<"Doctor"> | string
    feriados?: StringNullableListFilter<"Doctor">
    color?: StringNullableFilter<"Doctor"> | string | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
  }

  export type TurnoCreateWithoutConsultorioInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutConsultorioInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutConsultorioInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput>
  }

  export type TurnoCreateManyConsultorioInputEnvelope = {
    data: TurnoCreateManyConsultorioInput | TurnoCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type AgendaDoctorCreateWithoutConsultorioInput = {
    id?: string
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutAgendaDoctorInput
  }

  export type AgendaDoctorUncheckedCreateWithoutConsultorioInput = {
    id?: string
    doctorId: string
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaDoctorCreateOrConnectWithoutConsultorioInput = {
    where: AgendaDoctorWhereUniqueInput
    create: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput>
  }

  export type AgendaDoctorCreateManyConsultorioInputEnvelope = {
    data: AgendaDoctorCreateManyConsultorioInput | AgendaDoctorCreateManyConsultorioInput[]
    skipDuplicates?: boolean
  }

  export type TipoTurnoDoctorCreateWithoutConsultoriosInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutTipoTurnoDoctorInput
    turnos?: TurnoCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput = {
    id?: string
    doctorId: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoUncheckedCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorCreateOrConnectWithoutConsultoriosInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    create: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput>
  }

  export type TurnoUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutConsultorioInput, TurnoUncheckedUpdateWithoutConsultorioInput>
    create: XOR<TurnoCreateWithoutConsultorioInput, TurnoUncheckedCreateWithoutConsultorioInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutConsultorioInput, TurnoUncheckedUpdateWithoutConsultorioInput>
  }

  export type TurnoUpdateManyWithWhereWithoutConsultorioInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type AgendaDoctorUpsertWithWhereUniqueWithoutConsultorioInput = {
    where: AgendaDoctorWhereUniqueInput
    update: XOR<AgendaDoctorUpdateWithoutConsultorioInput, AgendaDoctorUncheckedUpdateWithoutConsultorioInput>
    create: XOR<AgendaDoctorCreateWithoutConsultorioInput, AgendaDoctorUncheckedCreateWithoutConsultorioInput>
  }

  export type AgendaDoctorUpdateWithWhereUniqueWithoutConsultorioInput = {
    where: AgendaDoctorWhereUniqueInput
    data: XOR<AgendaDoctorUpdateWithoutConsultorioInput, AgendaDoctorUncheckedUpdateWithoutConsultorioInput>
  }

  export type AgendaDoctorUpdateManyWithWhereWithoutConsultorioInput = {
    where: AgendaDoctorScalarWhereInput
    data: XOR<AgendaDoctorUpdateManyMutationInput, AgendaDoctorUncheckedUpdateManyWithoutConsultorioInput>
  }

  export type AgendaDoctorScalarWhereInput = {
    AND?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
    OR?: AgendaDoctorScalarWhereInput[]
    NOT?: AgendaDoctorScalarWhereInput | AgendaDoctorScalarWhereInput[]
    id?: StringFilter<"AgendaDoctor"> | string
    doctorId?: StringFilter<"AgendaDoctor"> | string
    consultorioId?: StringNullableFilter<"AgendaDoctor"> | string | null
    dia?: IntFilter<"AgendaDoctor"> | number
    fecha?: DateTimeNullableFilter<"AgendaDoctor"> | Date | string | null
    nombre?: StringFilter<"AgendaDoctor"> | string
    atencion?: BoolFilter<"AgendaDoctor"> | boolean
    desde?: StringFilter<"AgendaDoctor"> | string
    hasta?: StringFilter<"AgendaDoctor"> | string
    corteDesde?: StringNullableFilter<"AgendaDoctor"> | string | null
    corteHasta?: StringNullableFilter<"AgendaDoctor"> | string | null
    createdAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"AgendaDoctor"> | Date | string
  }

  export type TipoTurnoDoctorUpsertWithWhereUniqueWithoutConsultoriosInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    update: XOR<TipoTurnoDoctorUpdateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedUpdateWithoutConsultoriosInput>
    create: XOR<TipoTurnoDoctorCreateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedCreateWithoutConsultoriosInput>
  }

  export type TipoTurnoDoctorUpdateWithWhereUniqueWithoutConsultoriosInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    data: XOR<TipoTurnoDoctorUpdateWithoutConsultoriosInput, TipoTurnoDoctorUncheckedUpdateWithoutConsultoriosInput>
  }

  export type TipoTurnoDoctorUpdateManyWithWhereWithoutConsultoriosInput = {
    where: TipoTurnoDoctorScalarWhereInput
    data: XOR<TipoTurnoDoctorUpdateManyMutationInput, TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosInput>
  }

  export type TipoTurnoDoctorScalarWhereInput = {
    AND?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
    OR?: TipoTurnoDoctorScalarWhereInput[]
    NOT?: TipoTurnoDoctorScalarWhereInput | TipoTurnoDoctorScalarWhereInput[]
    id?: StringFilter<"TipoTurnoDoctor"> | string
    doctorId?: StringFilter<"TipoTurnoDoctor"> | string
    nombre?: StringFilter<"TipoTurnoDoctor"> | string
    duracion?: StringFilter<"TipoTurnoDoctor"> | string
    habilitado?: BoolFilter<"TipoTurnoDoctor"> | boolean
    publico?: BoolFilter<"TipoTurnoDoctor"> | boolean
    createdAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
    updatedAt?: DateTimeFilter<"TipoTurnoDoctor"> | Date | string
  }

  export type AgendaDoctorCreateWithoutDoctorInput = {
    id?: string
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorio?: ConsultorioCreateNestedOneWithoutAgendaDoctorInput
  }

  export type AgendaDoctorUncheckedCreateWithoutDoctorInput = {
    id?: string
    consultorioId?: string | null
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AgendaDoctorCreateOrConnectWithoutDoctorInput = {
    where: AgendaDoctorWhereUniqueInput
    create: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput>
  }

  export type AgendaDoctorCreateManyDoctorInputEnvelope = {
    data: AgendaDoctorCreateManyDoctorInput | AgendaDoctorCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type TipoTurnoDoctorCreateWithoutDoctorInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorios?: ConsultorioCreateNestedManyWithoutTiposTurnoInput
    turnos?: TurnoCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorUncheckedCreateWithoutDoctorInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorios?: ConsultorioUncheckedCreateNestedManyWithoutTiposTurnoInput
    turnos?: TurnoUncheckedCreateNestedManyWithoutTipoDeTurnoInput
  }

  export type TipoTurnoDoctorCreateOrConnectWithoutDoctorInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    create: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput>
  }

  export type TipoTurnoDoctorCreateManyDoctorInputEnvelope = {
    data: TipoTurnoDoctorCreateManyDoctorInput | TipoTurnoDoctorCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type TurnoCreateWithoutDoctorInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutDoctorInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutDoctorInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput>
  }

  export type TurnoCreateManyDoctorInputEnvelope = {
    data: TurnoCreateManyDoctorInput | TurnoCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDoctoresInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutDoctoresInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutDoctoresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput>
  }

  export type AgendaDoctorUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AgendaDoctorWhereUniqueInput
    update: XOR<AgendaDoctorUpdateWithoutDoctorInput, AgendaDoctorUncheckedUpdateWithoutDoctorInput>
    create: XOR<AgendaDoctorCreateWithoutDoctorInput, AgendaDoctorUncheckedCreateWithoutDoctorInput>
  }

  export type AgendaDoctorUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AgendaDoctorWhereUniqueInput
    data: XOR<AgendaDoctorUpdateWithoutDoctorInput, AgendaDoctorUncheckedUpdateWithoutDoctorInput>
  }

  export type AgendaDoctorUpdateManyWithWhereWithoutDoctorInput = {
    where: AgendaDoctorScalarWhereInput
    data: XOR<AgendaDoctorUpdateManyMutationInput, AgendaDoctorUncheckedUpdateManyWithoutDoctorInput>
  }

  export type TipoTurnoDoctorUpsertWithWhereUniqueWithoutDoctorInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    update: XOR<TipoTurnoDoctorUpdateWithoutDoctorInput, TipoTurnoDoctorUncheckedUpdateWithoutDoctorInput>
    create: XOR<TipoTurnoDoctorCreateWithoutDoctorInput, TipoTurnoDoctorUncheckedCreateWithoutDoctorInput>
  }

  export type TipoTurnoDoctorUpdateWithWhereUniqueWithoutDoctorInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    data: XOR<TipoTurnoDoctorUpdateWithoutDoctorInput, TipoTurnoDoctorUncheckedUpdateWithoutDoctorInput>
  }

  export type TipoTurnoDoctorUpdateManyWithWhereWithoutDoctorInput = {
    where: TipoTurnoDoctorScalarWhereInput
    data: XOR<TipoTurnoDoctorUpdateManyMutationInput, TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorInput>
  }

  export type TurnoUpsertWithWhereUniqueWithoutDoctorInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutDoctorInput, TurnoUncheckedUpdateWithoutDoctorInput>
    create: XOR<TurnoCreateWithoutDoctorInput, TurnoUncheckedCreateWithoutDoctorInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutDoctorInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutDoctorInput, TurnoUncheckedUpdateWithoutDoctorInput>
  }

  export type TurnoUpdateManyWithWhereWithoutDoctorInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutDoctorInput>
  }

  export type UserUpsertWithWhereUniqueWithoutDoctoresInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDoctoresInput, UserUncheckedUpdateWithoutDoctoresInput>
    create: XOR<UserCreateWithoutDoctoresInput, UserUncheckedCreateWithoutDoctoresInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDoctoresInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDoctoresInput, UserUncheckedUpdateWithoutDoctoresInput>
  }

  export type UserUpdateManyWithWhereWithoutDoctoresInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDoctoresInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    enabled?: BoolFilter<"User"> | boolean
    token?: StringNullableFilter<"User"> | string | null
    tokenExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    perfil?: IntFilter<"User"> | number
  }

  export type DoctorCreateWithoutAgendaDoctorInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    TipoTurnoDoctor?: TipoTurnoDoctorCreateNestedManyWithoutDoctorInput
    Turno?: TurnoCreateNestedManyWithoutDoctorInput
    usuarios?: UserCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorUncheckedCreateWithoutAgendaDoctorInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutDoctorInput
    Turno?: TurnoUncheckedCreateNestedManyWithoutDoctorInput
    usuarios?: UserUncheckedCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorCreateOrConnectWithoutAgendaDoctorInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutAgendaDoctorInput, DoctorUncheckedCreateWithoutAgendaDoctorInput>
  }

  export type ConsultorioCreateWithoutAgendaDoctorInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioUncheckedCreateWithoutAgendaDoctorInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoUncheckedCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioCreateOrConnectWithoutAgendaDoctorInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutAgendaDoctorInput, ConsultorioUncheckedCreateWithoutAgendaDoctorInput>
  }

  export type DoctorUpsertWithoutAgendaDoctorInput = {
    update: XOR<DoctorUpdateWithoutAgendaDoctorInput, DoctorUncheckedUpdateWithoutAgendaDoctorInput>
    create: XOR<DoctorCreateWithoutAgendaDoctorInput, DoctorUncheckedCreateWithoutAgendaDoctorInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutAgendaDoctorInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutAgendaDoctorInput, DoctorUncheckedUpdateWithoutAgendaDoctorInput>
  }

  export type DoctorUpdateWithoutAgendaDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    TipoTurnoDoctor?: TipoTurnoDoctorUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUpdateManyWithoutDoctoresNestedInput
  }

  export type DoctorUncheckedUpdateWithoutAgendaDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUncheckedUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUncheckedUpdateManyWithoutDoctoresNestedInput
  }

  export type ConsultorioUpsertWithoutAgendaDoctorInput = {
    update: XOR<ConsultorioUpdateWithoutAgendaDoctorInput, ConsultorioUncheckedUpdateWithoutAgendaDoctorInput>
    create: XOR<ConsultorioCreateWithoutAgendaDoctorInput, ConsultorioUncheckedCreateWithoutAgendaDoctorInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutAgendaDoctorInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutAgendaDoctorInput, ConsultorioUncheckedUpdateWithoutAgendaDoctorInput>
  }

  export type ConsultorioUpdateWithoutAgendaDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUpdateManyWithoutConsultoriosNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutAgendaDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUncheckedUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosNestedInput
  }

  export type DoctorCreateWithoutTipoTurnoDoctorInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorCreateNestedManyWithoutDoctorInput
    Turno?: TurnoCreateNestedManyWithoutDoctorInput
    usuarios?: UserCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorUncheckedCreateWithoutTipoTurnoDoctorInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutDoctorInput
    Turno?: TurnoUncheckedCreateNestedManyWithoutDoctorInput
    usuarios?: UserUncheckedCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorCreateOrConnectWithoutTipoTurnoDoctorInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutTipoTurnoDoctorInput, DoctorUncheckedCreateWithoutTipoTurnoDoctorInput>
  }

  export type ConsultorioCreateWithoutTiposTurnoInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutConsultorioInput
    agendaDoctor?: AgendaDoctorCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioUncheckedCreateWithoutTiposTurnoInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoUncheckedCreateNestedManyWithoutConsultorioInput
    agendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutConsultorioInput
  }

  export type ConsultorioCreateOrConnectWithoutTiposTurnoInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput>
  }

  export type TurnoCreateWithoutTipoDeTurnoInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutTipoDeTurnoInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
  }

  export type TurnoCreateOrConnectWithoutTipoDeTurnoInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput>
  }

  export type TurnoCreateManyTipoDeTurnoInputEnvelope = {
    data: TurnoCreateManyTipoDeTurnoInput | TurnoCreateManyTipoDeTurnoInput[]
    skipDuplicates?: boolean
  }

  export type DoctorUpsertWithoutTipoTurnoDoctorInput = {
    update: XOR<DoctorUpdateWithoutTipoTurnoDoctorInput, DoctorUncheckedUpdateWithoutTipoTurnoDoctorInput>
    create: XOR<DoctorCreateWithoutTipoTurnoDoctorInput, DoctorUncheckedCreateWithoutTipoTurnoDoctorInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutTipoTurnoDoctorInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutTipoTurnoDoctorInput, DoctorUncheckedUpdateWithoutTipoTurnoDoctorInput>
  }

  export type DoctorUpdateWithoutTipoTurnoDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUpdateManyWithoutDoctoresNestedInput
  }

  export type DoctorUncheckedUpdateWithoutTipoTurnoDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUncheckedUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUncheckedUpdateManyWithoutDoctoresNestedInput
  }

  export type ConsultorioUpsertWithWhereUniqueWithoutTiposTurnoInput = {
    where: ConsultorioWhereUniqueInput
    update: XOR<ConsultorioUpdateWithoutTiposTurnoInput, ConsultorioUncheckedUpdateWithoutTiposTurnoInput>
    create: XOR<ConsultorioCreateWithoutTiposTurnoInput, ConsultorioUncheckedCreateWithoutTiposTurnoInput>
  }

  export type ConsultorioUpdateWithWhereUniqueWithoutTiposTurnoInput = {
    where: ConsultorioWhereUniqueInput
    data: XOR<ConsultorioUpdateWithoutTiposTurnoInput, ConsultorioUncheckedUpdateWithoutTiposTurnoInput>
  }

  export type ConsultorioUpdateManyWithWhereWithoutTiposTurnoInput = {
    where: ConsultorioScalarWhereInput
    data: XOR<ConsultorioUpdateManyMutationInput, ConsultorioUncheckedUpdateManyWithoutTiposTurnoInput>
  }

  export type ConsultorioScalarWhereInput = {
    AND?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
    OR?: ConsultorioScalarWhereInput[]
    NOT?: ConsultorioScalarWhereInput | ConsultorioScalarWhereInput[]
    id?: StringFilter<"Consultorio"> | string
    nombre?: StringFilter<"Consultorio"> | string
    direccion?: StringNullableFilter<"Consultorio"> | string | null
    telefono?: StringNullableFilter<"Consultorio"> | string | null
    email?: StringNullableFilter<"Consultorio"> | string | null
    color?: StringNullableFilter<"Consultorio"> | string | null
    createdAt?: DateTimeFilter<"Consultorio"> | Date | string
    updatedAt?: DateTimeFilter<"Consultorio"> | Date | string
  }

  export type TurnoUpsertWithWhereUniqueWithoutTipoDeTurnoInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutTipoDeTurnoInput, TurnoUncheckedUpdateWithoutTipoDeTurnoInput>
    create: XOR<TurnoCreateWithoutTipoDeTurnoInput, TurnoUncheckedCreateWithoutTipoDeTurnoInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutTipoDeTurnoInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutTipoDeTurnoInput, TurnoUncheckedUpdateWithoutTipoDeTurnoInput>
  }

  export type TurnoUpdateManyWithWhereWithoutTipoDeTurnoInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutTipoDeTurnoInput>
  }

  export type TurnoCreateWithoutPacienteInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutPacienteInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutPacienteInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput>
  }

  export type TurnoCreateManyPacienteInputEnvelope = {
    data: TurnoCreateManyPacienteInput | TurnoCreateManyPacienteInput[]
    skipDuplicates?: boolean
  }

  export type CoberturaMedicaCreateWithoutPacientesInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaUncheckedCreateWithoutPacientesInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoUncheckedCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaCreateOrConnectWithoutPacientesInput = {
    where: CoberturaMedicaWhereUniqueInput
    create: XOR<CoberturaMedicaCreateWithoutPacientesInput, CoberturaMedicaUncheckedCreateWithoutPacientesInput>
  }

  export type UserCreateWithoutPacientesCreadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutPacientesCreadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutPacientesCreadosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPacientesCreadosInput, UserUncheckedCreateWithoutPacientesCreadosInput>
  }

  export type UserCreateWithoutPacientesEditadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutPacientesEditadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutPacientesEditadosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPacientesEditadosInput, UserUncheckedCreateWithoutPacientesEditadosInput>
  }

  export type TurnoUpsertWithWhereUniqueWithoutPacienteInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutPacienteInput, TurnoUncheckedUpdateWithoutPacienteInput>
    create: XOR<TurnoCreateWithoutPacienteInput, TurnoUncheckedCreateWithoutPacienteInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutPacienteInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutPacienteInput, TurnoUncheckedUpdateWithoutPacienteInput>
  }

  export type TurnoUpdateManyWithWhereWithoutPacienteInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutPacienteInput>
  }

  export type CoberturaMedicaUpsertWithoutPacientesInput = {
    update: XOR<CoberturaMedicaUpdateWithoutPacientesInput, CoberturaMedicaUncheckedUpdateWithoutPacientesInput>
    create: XOR<CoberturaMedicaCreateWithoutPacientesInput, CoberturaMedicaUncheckedCreateWithoutPacientesInput>
    where?: CoberturaMedicaWhereInput
  }

  export type CoberturaMedicaUpdateToOneWithWhereWithoutPacientesInput = {
    where?: CoberturaMedicaWhereInput
    data: XOR<CoberturaMedicaUpdateWithoutPacientesInput, CoberturaMedicaUncheckedUpdateWithoutPacientesInput>
  }

  export type CoberturaMedicaUpdateWithoutPacientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type CoberturaMedicaUncheckedUpdateWithoutPacientesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUncheckedUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type UserUpsertWithoutPacientesCreadosInput = {
    update: XOR<UserUpdateWithoutPacientesCreadosInput, UserUncheckedUpdateWithoutPacientesCreadosInput>
    create: XOR<UserCreateWithoutPacientesCreadosInput, UserUncheckedCreateWithoutPacientesCreadosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPacientesCreadosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPacientesCreadosInput, UserUncheckedUpdateWithoutPacientesCreadosInput>
  }

  export type UserUpdateWithoutPacientesCreadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutPacientesCreadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUpsertWithoutPacientesEditadosInput = {
    update: XOR<UserUpdateWithoutPacientesEditadosInput, UserUncheckedUpdateWithoutPacientesEditadosInput>
    create: XOR<UserCreateWithoutPacientesEditadosInput, UserUncheckedCreateWithoutPacientesEditadosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPacientesEditadosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPacientesEditadosInput, UserUncheckedUpdateWithoutPacientesEditadosInput>
  }

  export type UserUpdateWithoutPacientesEditadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutPacientesEditadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type ConsultorioCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agendaDoctor?: AgendaDoctorCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioUncheckedCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    direccion?: string | null
    telefono?: string | null
    email?: string | null
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutConsultorioInput
    tiposTurno?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutConsultoriosInput
  }

  export type ConsultorioCreateOrConnectWithoutTurnosInput = {
    where: ConsultorioWhereUniqueInput
    create: XOR<ConsultorioCreateWithoutTurnosInput, ConsultorioUncheckedCreateWithoutTurnosInput>
  }

  export type DoctorCreateWithoutTurnoInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorCreateNestedManyWithoutDoctorInput
    usuarios?: UserCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorUncheckedCreateWithoutTurnoInput = {
    id?: string
    nombre: string
    emoji: string
    feriados?: DoctorCreateferiadosInput | string[]
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    AgendaDoctor?: AgendaDoctorUncheckedCreateNestedManyWithoutDoctorInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedCreateNestedManyWithoutDoctorInput
    usuarios?: UserUncheckedCreateNestedManyWithoutDoctoresInput
  }

  export type DoctorCreateOrConnectWithoutTurnoInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutTurnoInput, DoctorUncheckedCreateWithoutTurnoInput>
  }

  export type PacienteCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    coberturaMedica?: CoberturaMedicaCreateNestedOneWithoutPacientesInput
    createdBy?: UserCreateNestedOneWithoutPacientesCreadosInput
    updatedBy?: UserCreateNestedOneWithoutPacientesEditadosInput
  }

  export type PacienteUncheckedCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PacienteCreateOrConnectWithoutTurnosInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutTurnosInput, PacienteUncheckedCreateWithoutTurnosInput>
  }

  export type CoberturaMedicaCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pacientes?: PacienteCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaUncheckedCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    codigo?: string | null
    habilitado?: boolean
    color?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pacientes?: PacienteUncheckedCreateNestedManyWithoutCoberturaMedicaInput
  }

  export type CoberturaMedicaCreateOrConnectWithoutTurnosInput = {
    where: CoberturaMedicaWhereUniqueInput
    create: XOR<CoberturaMedicaCreateWithoutTurnosInput, CoberturaMedicaUncheckedCreateWithoutTurnosInput>
  }

  export type TipoTurnoDoctorCreateWithoutTurnosInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutTipoTurnoDoctorInput
    consultorios?: ConsultorioCreateNestedManyWithoutTiposTurnoInput
  }

  export type TipoTurnoDoctorUncheckedCreateWithoutTurnosInput = {
    id?: string
    doctorId: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    consultorios?: ConsultorioUncheckedCreateNestedManyWithoutTiposTurnoInput
  }

  export type TipoTurnoDoctorCreateOrConnectWithoutTurnosInput = {
    where: TipoTurnoDoctorWhereUniqueInput
    create: XOR<TipoTurnoDoctorCreateWithoutTurnosInput, TipoTurnoDoctorUncheckedCreateWithoutTurnosInput>
  }

  export type UserCreateWithoutTurnosCreadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosEditados?: TurnoCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutTurnosCreadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosEditados?: TurnoUncheckedCreateNestedManyWithoutUpdatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutTurnosCreadosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTurnosCreadosInput, UserUncheckedCreateWithoutTurnosCreadosInput>
  }

  export type UserCreateWithoutTurnosEditadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoCreateNestedManyWithoutCreatedByInput
    doctores?: DoctorCreateNestedManyWithoutUsuariosInput
  }

  export type UserUncheckedCreateWithoutTurnosEditadosInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    enabled?: boolean
    token?: string | null
    tokenExpires?: Date | string | null
    perfil?: number
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    pacientesCreados?: PacienteUncheckedCreateNestedManyWithoutCreatedByInput
    pacientesEditados?: PacienteUncheckedCreateNestedManyWithoutUpdatedByInput
    turnosCreados?: TurnoUncheckedCreateNestedManyWithoutCreatedByInput
    doctores?: DoctorUncheckedCreateNestedManyWithoutUsuariosInput
  }

  export type UserCreateOrConnectWithoutTurnosEditadosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTurnosEditadosInput, UserUncheckedCreateWithoutTurnosEditadosInput>
  }

  export type ConsultorioUpsertWithoutTurnosInput = {
    update: XOR<ConsultorioUpdateWithoutTurnosInput, ConsultorioUncheckedUpdateWithoutTurnosInput>
    create: XOR<ConsultorioCreateWithoutTurnosInput, ConsultorioUncheckedCreateWithoutTurnosInput>
    where?: ConsultorioWhereInput
  }

  export type ConsultorioUpdateToOneWithWhereWithoutTurnosInput = {
    where?: ConsultorioWhereInput
    data: XOR<ConsultorioUpdateWithoutTurnosInput, ConsultorioUncheckedUpdateWithoutTurnosInput>
  }

  export type ConsultorioUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agendaDoctor?: AgendaDoctorUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUpdateManyWithoutConsultoriosNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutConsultorioNestedInput
    tiposTurno?: TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosNestedInput
  }

  export type DoctorUpsertWithoutTurnoInput = {
    update: XOR<DoctorUpdateWithoutTurnoInput, DoctorUncheckedUpdateWithoutTurnoInput>
    create: XOR<DoctorCreateWithoutTurnoInput, DoctorUncheckedCreateWithoutTurnoInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutTurnoInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutTurnoInput, DoctorUncheckedUpdateWithoutTurnoInput>
  }

  export type DoctorUpdateWithoutTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUpdateManyWithoutDoctoresNestedInput
  }

  export type DoctorUncheckedUpdateWithoutTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    usuarios?: UserUncheckedUpdateManyWithoutDoctoresNestedInput
  }

  export type PacienteUpsertWithoutTurnosInput = {
    update: XOR<PacienteUpdateWithoutTurnosInput, PacienteUncheckedUpdateWithoutTurnosInput>
    create: XOR<PacienteCreateWithoutTurnosInput, PacienteUncheckedCreateWithoutTurnosInput>
    where?: PacienteWhereInput
  }

  export type PacienteUpdateToOneWithWhereWithoutTurnosInput = {
    where?: PacienteWhereInput
    data: XOR<PacienteUpdateWithoutTurnosInput, PacienteUncheckedUpdateWithoutTurnosInput>
  }

  export type PacienteUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutPacientesNestedInput
    createdBy?: UserUpdateOneWithoutPacientesCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutPacientesEditadosNestedInput
  }

  export type PacienteUncheckedUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CoberturaMedicaUpsertWithoutTurnosInput = {
    update: XOR<CoberturaMedicaUpdateWithoutTurnosInput, CoberturaMedicaUncheckedUpdateWithoutTurnosInput>
    create: XOR<CoberturaMedicaCreateWithoutTurnosInput, CoberturaMedicaUncheckedCreateWithoutTurnosInput>
    where?: CoberturaMedicaWhereInput
  }

  export type CoberturaMedicaUpdateToOneWithWhereWithoutTurnosInput = {
    where?: CoberturaMedicaWhereInput
    data: XOR<CoberturaMedicaUpdateWithoutTurnosInput, CoberturaMedicaUncheckedUpdateWithoutTurnosInput>
  }

  export type CoberturaMedicaUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pacientes?: PacienteUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type CoberturaMedicaUncheckedUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pacientes?: PacienteUncheckedUpdateManyWithoutCoberturaMedicaNestedInput
  }

  export type TipoTurnoDoctorUpsertWithoutTurnosInput = {
    update: XOR<TipoTurnoDoctorUpdateWithoutTurnosInput, TipoTurnoDoctorUncheckedUpdateWithoutTurnosInput>
    create: XOR<TipoTurnoDoctorCreateWithoutTurnosInput, TipoTurnoDoctorUncheckedCreateWithoutTurnosInput>
    where?: TipoTurnoDoctorWhereInput
  }

  export type TipoTurnoDoctorUpdateToOneWithWhereWithoutTurnosInput = {
    where?: TipoTurnoDoctorWhereInput
    data: XOR<TipoTurnoDoctorUpdateWithoutTurnosInput, TipoTurnoDoctorUncheckedUpdateWithoutTurnosInput>
  }

  export type TipoTurnoDoctorUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutTipoTurnoDoctorNestedInput
    consultorios?: ConsultorioUpdateManyWithoutTiposTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateWithoutTurnosInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUncheckedUpdateManyWithoutTiposTurnoNestedInput
  }

  export type UserUpsertWithoutTurnosCreadosInput = {
    update: XOR<UserUpdateWithoutTurnosCreadosInput, UserUncheckedUpdateWithoutTurnosCreadosInput>
    create: XOR<UserCreateWithoutTurnosCreadosInput, UserUncheckedCreateWithoutTurnosCreadosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTurnosCreadosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTurnosCreadosInput, UserUncheckedUpdateWithoutTurnosCreadosInput>
  }

  export type UserUpdateWithoutTurnosCreadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutTurnosCreadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUpsertWithoutTurnosEditadosInput = {
    update: XOR<UserUpdateWithoutTurnosEditadosInput, UserUncheckedUpdateWithoutTurnosEditadosInput>
    create: XOR<UserCreateWithoutTurnosEditadosInput, UserUncheckedCreateWithoutTurnosEditadosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTurnosEditadosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTurnosEditadosInput, UserUncheckedUpdateWithoutTurnosEditadosInput>
  }

  export type UserUpdateWithoutTurnosEditadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    doctores?: DoctorUpdateManyWithoutUsuariosNestedInput
  }

  export type UserUncheckedUpdateWithoutTurnosEditadosInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    doctores?: DoctorUncheckedUpdateManyWithoutUsuariosNestedInput
  }

  export type PacienteCreateWithoutCoberturaMedicaInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    turnos?: TurnoCreateNestedManyWithoutPacienteInput
    createdBy?: UserCreateNestedOneWithoutPacientesCreadosInput
    updatedBy?: UserCreateNestedOneWithoutPacientesEditadosInput
  }

  export type PacienteUncheckedCreateWithoutCoberturaMedicaInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    turnos?: TurnoUncheckedCreateNestedManyWithoutPacienteInput
  }

  export type PacienteCreateOrConnectWithoutCoberturaMedicaInput = {
    where: PacienteWhereUniqueInput
    create: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput>
  }

  export type PacienteCreateManyCoberturaMedicaInputEnvelope = {
    data: PacienteCreateManyCoberturaMedicaInput | PacienteCreateManyCoberturaMedicaInput[]
    skipDuplicates?: boolean
  }

  export type TurnoCreateWithoutCoberturaMedicaInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    observaciones?: string | null
    token?: string | null
    consultorio: ConsultorioCreateNestedOneWithoutTurnosInput
    doctor: DoctorCreateNestedOneWithoutTurnoInput
    paciente: PacienteCreateNestedOneWithoutTurnosInput
    tipoDeTurno?: TipoTurnoDoctorCreateNestedOneWithoutTurnosInput
    createdBy?: UserCreateNestedOneWithoutTurnosCreadosInput
    updatedBy?: UserCreateNestedOneWithoutTurnosEditadosInput
  }

  export type TurnoUncheckedCreateWithoutCoberturaMedicaInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateOrConnectWithoutCoberturaMedicaInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput>
  }

  export type TurnoCreateManyCoberturaMedicaInputEnvelope = {
    data: TurnoCreateManyCoberturaMedicaInput | TurnoCreateManyCoberturaMedicaInput[]
    skipDuplicates?: boolean
  }

  export type PacienteUpsertWithWhereUniqueWithoutCoberturaMedicaInput = {
    where: PacienteWhereUniqueInput
    update: XOR<PacienteUpdateWithoutCoberturaMedicaInput, PacienteUncheckedUpdateWithoutCoberturaMedicaInput>
    create: XOR<PacienteCreateWithoutCoberturaMedicaInput, PacienteUncheckedCreateWithoutCoberturaMedicaInput>
  }

  export type PacienteUpdateWithWhereUniqueWithoutCoberturaMedicaInput = {
    where: PacienteWhereUniqueInput
    data: XOR<PacienteUpdateWithoutCoberturaMedicaInput, PacienteUncheckedUpdateWithoutCoberturaMedicaInput>
  }

  export type PacienteUpdateManyWithWhereWithoutCoberturaMedicaInput = {
    where: PacienteScalarWhereInput
    data: XOR<PacienteUpdateManyMutationInput, PacienteUncheckedUpdateManyWithoutCoberturaMedicaInput>
  }

  export type TurnoUpsertWithWhereUniqueWithoutCoberturaMedicaInput = {
    where: TurnoWhereUniqueInput
    update: XOR<TurnoUpdateWithoutCoberturaMedicaInput, TurnoUncheckedUpdateWithoutCoberturaMedicaInput>
    create: XOR<TurnoCreateWithoutCoberturaMedicaInput, TurnoUncheckedCreateWithoutCoberturaMedicaInput>
  }

  export type TurnoUpdateWithWhereUniqueWithoutCoberturaMedicaInput = {
    where: TurnoWhereUniqueInput
    data: XOR<TurnoUpdateWithoutCoberturaMedicaInput, TurnoUncheckedUpdateWithoutCoberturaMedicaInput>
  }

  export type TurnoUpdateManyWithWhereWithoutCoberturaMedicaInput = {
    where: TurnoScalarWhereInput
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyWithoutCoberturaMedicaInput>
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type PacienteCreateManyCreatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type PacienteCreateManyUpdatedByInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    coberturaMedicaId?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type TurnoCreateManyCreatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoCreateManyUpdatedByInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PacienteUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutPacienteNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutPacientesNestedInput
    updatedBy?: UserUpdateOneWithoutPacientesEditadosNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    turnos?: TurnoUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PacienteUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutPacienteNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutPacientesNestedInput
    createdBy?: UserUpdateOneWithoutPacientesCreadosNestedInput
  }

  export type PacienteUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    turnos?: TurnoUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoctorUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AgendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    TipoTurnoDoctor?: TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorNestedInput
    Turno?: TurnoUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutUsuariosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    feriados?: DoctorUpdateferiadosInput | string[]
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurnoCreateManyConsultorioInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type AgendaDoctorCreateManyConsultorioInput = {
    id?: string
    doctorId: string
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurnoUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AgendaDoctorUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutAgendaDoctorNestedInput
  }

  export type AgendaDoctorUncheckedUpdateWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorUncheckedUpdateManyWithoutConsultorioInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoTurnoDoctorUpdateWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutTipoTurnoDoctorNestedInput
    turnos?: TurnoUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUncheckedUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateManyWithoutConsultoriosInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorCreateManyDoctorInput = {
    id?: string
    consultorioId?: string | null
    dia: number
    fecha?: Date | string | null
    nombre: string
    atencion: boolean
    desde: string
    hasta: string
    corteDesde?: string | null
    corteHasta?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TipoTurnoDoctorCreateManyDoctorInput = {
    id?: string
    nombre: string
    duracion: string
    habilitado?: boolean
    publico?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurnoCreateManyDoctorInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type AgendaDoctorUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorio?: ConsultorioUpdateOneWithoutAgendaDoctorNestedInput
  }

  export type AgendaDoctorUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    consultorioId?: NullableStringFieldUpdateOperationsInput | string | null
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AgendaDoctorUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    consultorioId?: NullableStringFieldUpdateOperationsInput | string | null
    dia?: IntFieldUpdateOperationsInput | number
    fecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    atencion?: BoolFieldUpdateOperationsInput | boolean
    desde?: StringFieldUpdateOperationsInput | string
    hasta?: StringFieldUpdateOperationsInput | string
    corteDesde?: NullableStringFieldUpdateOperationsInput | string | null
    corteHasta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TipoTurnoDoctorUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUpdateManyWithoutTiposTurnoNestedInput
    turnos?: TurnoUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    consultorios?: ConsultorioUncheckedUpdateManyWithoutTiposTurnoNestedInput
    turnos?: TurnoUncheckedUpdateManyWithoutTipoDeTurnoNestedInput
  }

  export type TipoTurnoDoctorUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    duracion?: StringFieldUpdateOperationsInput | string
    habilitado?: BoolFieldUpdateOperationsInput | boolean
    publico?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurnoUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutDoctoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    pacientesCreados?: PacienteUncheckedUpdateManyWithoutCreatedByNestedInput
    pacientesEditados?: PacienteUncheckedUpdateManyWithoutUpdatedByNestedInput
    turnosCreados?: TurnoUncheckedUpdateManyWithoutCreatedByNestedInput
    turnosEditados?: TurnoUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDoctoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    enabled?: BoolFieldUpdateOperationsInput | boolean
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    perfil?: IntFieldUpdateOperationsInput | number
  }

  export type TurnoCreateManyTipoDeTurnoInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
  }

  export type ConsultorioUpdateWithoutTiposTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutConsultorioNestedInput
    agendaDoctor?: AgendaDoctorUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateWithoutTiposTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUncheckedUpdateManyWithoutConsultorioNestedInput
    agendaDoctor?: AgendaDoctorUncheckedUpdateManyWithoutConsultorioNestedInput
  }

  export type ConsultorioUncheckedUpdateManyWithoutTiposTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    direccion?: NullableStringFieldUpdateOperationsInput | string | null
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurnoUpdateWithoutTipoDeTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutTipoDeTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutTipoDeTurnoInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoCreateManyPacienteInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    coberturaMedicaId?: string | null
    tipoDeTurnoId?: string | null
  }

  export type TurnoUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    coberturaMedica?: CoberturaMedicaUpdateOneWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutPacienteInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    coberturaMedicaId?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PacienteCreateManyCoberturaMedicaInput = {
    id?: string
    nombre: string
    apellido?: string | null
    dni?: string | null
    celular: string
    email?: string | null
    cobertura?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type TurnoCreateManyCoberturaMedicaInput = {
    id?: string
    desde: Date | string
    hasta: Date | string
    servicio: string
    duracion: number
    pacienteId: string
    confirmado?: boolean
    estado?: string | null
    fhCambioEstado?: Date | string | null
    hsAviso?: string | null
    penal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    consultorioId: string
    doctorId: string
    observaciones?: string | null
    token?: string | null
    tipoDeTurnoId?: string | null
  }

  export type PacienteUpdateWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    turnos?: TurnoUpdateManyWithoutPacienteNestedInput
    createdBy?: UserUpdateOneWithoutPacientesCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutPacientesEditadosNestedInput
  }

  export type PacienteUncheckedUpdateWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    turnos?: TurnoUncheckedUpdateManyWithoutPacienteNestedInput
  }

  export type PacienteUncheckedUpdateManyWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: NullableStringFieldUpdateOperationsInput | string | null
    dni?: NullableStringFieldUpdateOperationsInput | string | null
    celular?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    cobertura?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUpdateWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    consultorio?: ConsultorioUpdateOneRequiredWithoutTurnosNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutTurnoNestedInput
    paciente?: PacienteUpdateOneRequiredWithoutTurnosNestedInput
    tipoDeTurno?: TipoTurnoDoctorUpdateOneWithoutTurnosNestedInput
    createdBy?: UserUpdateOneWithoutTurnosCreadosNestedInput
    updatedBy?: UserUpdateOneWithoutTurnosEditadosNestedInput
  }

  export type TurnoUncheckedUpdateWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TurnoUncheckedUpdateManyWithoutCoberturaMedicaInput = {
    id?: StringFieldUpdateOperationsInput | string
    desde?: DateTimeFieldUpdateOperationsInput | Date | string
    hasta?: DateTimeFieldUpdateOperationsInput | Date | string
    servicio?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    pacienteId?: StringFieldUpdateOperationsInput | string
    confirmado?: BoolFieldUpdateOperationsInput | boolean
    estado?: NullableStringFieldUpdateOperationsInput | string | null
    fhCambioEstado?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hsAviso?: NullableStringFieldUpdateOperationsInput | string | null
    penal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    consultorioId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    tipoDeTurnoId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}